------------------------------------------------------------------------------------------------------------------------
--! @file	vga_controller_vga_signals.vhd
--! @brief	This file contains the signal generation for the VGA interface. Yet the only available resolution is
--!			640x480@60Hz via the architecture a640x480.
------------------------------------------------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;

entity vga_controller_vga_signals is

	port (
		reset				:	in		std_logic;	--! reset input, when asserted no signals are generated
		clk50				:	in		std_logic;	--! 50MHz input clock
		px_clk			:	out	std_logic;	--! VGA pixel clock
		px_clk_locked	:	out	std_logic;	--! Wether the pixel clock is enabled
		screen_active	:	out	std_logic;	--! 1: data displayed on screen, 0: data not displayed on screen
		h_sync			:	out	std_logic;	--! VGA H Sync
		v_sync			:	out	std_logic	--! VGA V Sync
	);

end vga_controller_vga_signals;

--! @brief		640x480@60Hz
--! @details	This architecture implements signal generation for an resolution of 640x480@60Hz with an input clock of 50MHz.
architecture a640x480 of vga_controller_vga_signals is
	signal s_px_clk				: std_logic;		--! internal signal for pixel clock
	signal s_hactive				: std_logic;		--! the frame is horizontally in the active area
	signal s_vactive				: std_logic;		--! the frame is vertically in the active area
	shared variable px_cnt		: integer range 0 to 800 := 0;	--! counts the pixels in the current line
	shared variable line_cnt	: integer range 0 to 525 := 0;	--! counts the lines in the current frame
begin
	
	--! Generates the pixel clock from an 50MHz input clock
	px_clk_generator : process (reset, clk50) is
	begin
	
		if reset = '1' then
			s_px_clk <= '0';
		elsif rising_edge (clk50) then
			s_px_clk <= not s_px_clk;
		end if;
		
	end process;
	
	px_clk_locked <= not reset;
	px_clk <= s_px_clk;

	
	--! Counts the pixels in an line and lines in an frame
	
	--! Pixel counter:
	--! - 800 pixel(= 800 clock ticks) per line with:
	--! - 8 pixel front porch
	--! - 96 pixel h-sync signal(active low)
	--! - 40 pixel back porch
	--! - 8 pixel left border
	--! - 640 pixel displayed data
	--! - 8 pixel right border
	--! .
	--! Line counter:
	--! - 525 lines per field(= image) with:
	--! - 2 lines front porch
	--! - 2 lines v-sync signal(active low)
	--! - 25 lines back porch
	--! - 8 lines top border
	--! - 480 lines displayed data
	--! - 8 lines bottom border

	counter : process(reset, s_px_clk) is
	begin
		if reset = '1' then
			px_cnt := 0;
		elsif s_px_clk'event and s_px_clk = '1' then
			if px_cnt >= 799 then					-- new line
				px_cnt := 0;
				if line_cnt >= 524 then				-- new image
					line_cnt := 0;
				else								-- next line
					line_cnt := line_cnt + 1;
				end if;
			else									-- next pixel in current line
				px_cnt := px_cnt + 1;
			end if;
		end if;
	end process;
	
	--! Calculates the active screen area signals according to the line and pixel counts.
	
	--! H Sync and V Sync are generated by combinatory logic. The screen active signals cannot be generated combinatory,
	--! because due to the way the counter variables are incremented there will be hazards and screen_active may become 
	--! low unexpectedly.
	sync : process(reset, s_px_clk) is
	begin
		if reset = '1' then
			s_hactive <= '0';
			s_vactive <= '0';
		elsif s_px_clk'event and s_px_clk = '1' then
			s_hactive <= '0';
			s_vactive <= '0';
			-- hactive is one ahead to allow for the FIFO to catch up
			if px_cnt > 150 and px_cnt <= 790 then		-- 640 pixel data in 1 line
				s_hactive <= '1';
			end if;
			if line_cnt > 36 and line_cnt <= 516 then	-- 480 lines data in 1 field
				s_vactive <= '1';
			end if;
		end if;
	end process;
	
	h_sync <= '0' when px_cnt >= 8 and px_cnt < 104 else '1';
	v_sync <= '0' when line_cnt >= 2 and line_cnt < 4 else '1';
	
	screen_active <= s_hactive and s_vactive;

end a640x480;