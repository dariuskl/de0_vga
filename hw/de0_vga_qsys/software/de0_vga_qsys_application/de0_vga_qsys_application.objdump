
de0_vga_qsys_application.elf:     file format elf32-littlenios2
de0_vga_qsys_application.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000d66c memsz 0x0000d66c flags r-x
    LOAD off    0x0000e68c vaddr 0x0080d68c paddr 0x0080f9dc align 2**12
         filesz 0x00002350 memsz 0x00002350 flags rw-
    LOAD off    0x00010d2c vaddr 0x00811d2c paddr 0x00811d2c align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cff0  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004e8  0080d1a4  0080d1a4  0000e1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002350  0080d68c  0080f9dc  0000e68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00811d2c  00811d2c  00010d2c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000109dc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cd8  00000000  00000000  00010a00  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000013dc  00000000  00000000  000116d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025146  00000000  00000000  00012ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007e6c  00000000  00000000  00037bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001422c  00000000  00000000  0003fa66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001918  00000000  00000000  00053c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000236f  00000000  00000000  000555ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c496  00000000  00000000  0005791b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00063db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00063dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00067661  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00067664  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00067669  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006766a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006766b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00067676  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00067681  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0006768c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  00067692  2**0
                  CONTENTS, READONLY
 26 .jdi          00005eaf  00000000  00000000  000676c6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080d1a4 l    d  .rodata	00000000 .rodata
0080d68c l    d  .rwdata	00000000 .rwdata
00811d2c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 vga_driver.c
00811d2c l     O .bss	00000002 vprintln_y_off
00000000 l    df *ABS*	00000000 lib2-divmod.c
00800d30 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00800fe8 l     F .text	00000058 std
008010f4 l     F .text	00000008 __fp_lock
008010fc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080df80 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0080209c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008022e8 l     F .text	00000058 __sprint_r
0080d3be l     O .rodata	00000010 blanks.3452
0080d3ae l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00804434 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0080f9b0 l     O .rwdata	00000004 charset
0080d3f0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0080d538 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00809090 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080a8e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080a944 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080aa44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080ab64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080ac44 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080ada0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080afcc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080f9cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080b268 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080e93c l     O .rwdata	00001060 jtag_uart_0
0080b340 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080b580 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080b7a8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080c048 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080c46c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080c5a8 l     F .text	000000dc alt_file_locked
0080c80c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080cf20 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080d0d4 l     F .text	00000040 alt_sim_halt
00806fec g     F .text	00000094 _mprec_log10
008070d8 g     F .text	00000088 __any_on
00808494 g     F .text	00000070 _isatty_r
0080d510 g     O .rodata	00000028 __mprec_tinytens
0080ae00 g     F .text	0000006c alt_main
00801e24 g     F .text	000000a0 _puts_r
00811d8c g     O .bss	00000100 alt_irq
008068f4 g     F .text	00000078 _lseek_r
0080f9dc g       *ABS*	00000000 __flash_rwdata_start
00809bb0 g     F .text	00000088 __eqdf2
0081201c g       *ABS*	00000000 __alt_heap_start
00801dac g     F .text	00000044 printf
00802130 g     F .text	00000068 __sseek
00801050 g     F .text	000000a4 __sinit
00806854 g     F .text	00000084 _setlocale_r
00801150 g     F .text	00000068 __sfmoreglue
0080ae8c g     F .text	00000020 __malloc_unlock
00806b00 g     F .text	000000e0 memmove
00801140 g     F .text	00000010 _cleanup
00807160 g     F .text	000000bc _Balloc
00809cc0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00808420 g     F .text	00000074 _fstat_r
00811d3c g     O .bss	00000004 errno
00811d50 g     O .bss	00000004 alt_argv
0081799c g       *ABS*	00000000 _gp
00800314 g     F .text	00000208 put_frame_buffer
00800fc4 g     F .text	00000024 fgets
0080e7bc g     O .rwdata	00000180 alt_fd_list
0080ca30 g     F .text	00000094 alt_find_dev
00801c74 g     F .text	000000a0 memcpy
00801134 g     F .text	0000000c _cleanup_r
00809e58 g     F .text	000000f8 __floatsidf
0080c530 g     F .text	00000078 alt_io_redirect
00809dd0 g     F .text	00000088 __ltdf2
0080d1a4 g       *ABS*	00000000 __DTOR_END__
00801ec4 g     F .text	00000014 puts
00806f3c g     F .text	000000b0 __ratio
0080b9c0 g     F .text	00000224 altera_avalon_jtag_uart_read
0080143c g     F .text	00000014 malloc
00801df0 g     F .text	00000034 _printf_r
00800e6c g     F .text	00000008 __udivsi3
0080aaa4 g     F .text	000000c0 isatty
0080d420 g     O .rodata	000000c8 __mprec_tens
00806830 g     F .text	00000008 __locale_charset
0080cc9c g     F .text	00000090 alt_icache_flush
00811d30 g     O .bss	00000004 __malloc_top_pad
0080f9ac g     O .rwdata	00000004 __mb_cur_max
00806838 g     F .text	0000000c _localeconv_r
00807858 g     F .text	0000003c __i2b
00806394 g     F .text	0000049c __sfvwrite_r
008020b8 g     F .text	00000070 _sbrk_r
00807bd4 g     F .text	00000078 _read_r
0080e788 g     O .rwdata	0000000c __lc_ctype
0080f9c4 g     O .rwdata	00000004 alt_max_fd
0080a5e8 g     F .text	00000138 __unpack_d
00805c00 g     F .text	00000110 _fclose_r
00805f20 g     F .text	00000034 fflush
00811d34 g     O .bss	00000004 __malloc_max_sbrked_mem
00809520 g     F .text	00000074 __adddf3
00806e1c g     F .text	00000120 __b2d
00808ae0 g     F .text	000005b0 __umoddi3
0080acb0 g     F .text	000000f0 lseek
0080f9a0 g     O .rwdata	00000004 _global_impure_ptr
00807c4c g     F .text	000005f4 _realloc_r
0081201c g       *ABS*	00000000 __bss_end
0080c374 g     F .text	000000f8 alt_iic_isr_register
0080c904 g     F .text	0000010c alt_tick
00808504 g     F .text	000005dc __udivdi3
0080d4e8 g     O .rodata	00000028 __mprec_bigtens
00807ab4 g     F .text	00000120 __s2b
0080a028 g     F .text	00000194 __floatunsidf
00806d3c g     F .text	00000060 __mcmp
0080111c g     F .text	00000018 __fp_lock_all
0080c32c g     F .text	00000048 alt_ic_irq_enabled
0080c86c g     F .text	00000098 alt_alarm_stop
00811d58 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080e794 g     O .rwdata	00000028 alt_dev_null
0080bf78 g     F .text	0000001c alt_dcache_flush_all
00806c08 g     F .text	00000070 __hi0bits
00809f50 g     F .text	000000d8 __fixdfsi
0080f9dc g       *ABS*	00000000 __ram_rwdata_end
0080f9bc g     O .rwdata	00000008 alt_dev_list
0080b148 g     F .text	00000120 write
0080d68c g       *ABS*	00000000 __ram_rodata_end
0080a970 g     F .text	000000d4 fstat
00807994 g     F .text	00000120 __pow5mult
00811d40 g     O .bss	00000004 __nlocale_changed
00800e74 g     F .text	00000008 __umodsi3
0081201c g       *ABS*	00000000 end
0080b4c0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080d1a0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080a254 g     F .text	00000080 __clzsi2
0080bbe4 g     F .text	00000240 altera_avalon_jtag_uart_write
00801040 g     F .text	00000004 __sfp_lock_acquire
00801b90 g     F .text	000000e4 memchr
00802340 g     F .text	00001eac ___vfprintf_internal_r
00806080 g     F .text	00000314 _free_r
0080cf24 g     F .text	000001b0 __call_exitprocs
00811d44 g     O .bss	00000004 __mlocale_changed
0080f9a8 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
00811d5c g     O .bss	00000004 _alt_tick_rate
00807524 g     F .text	0000014c __lshift
00811d60 g     O .bss	00000004 _alt_nticks
0080aeac g     F .text	00000120 read
0080b2fc g     F .text	00000044 alt_sys_init
0080cdec g     F .text	00000134 __register_exitproc
00807670 g     F .text	000001e8 __multiply
0080b858 g     F .text	00000074 altera_avalon_jtag_uart_close
0080d68c g       *ABS*	00000000 __ram_rwdata_start
0080d1a4 g       *ABS*	00000000 __ram_rodata_start
00811d64 g     O .bss	00000028 __malloc_current_mallinfo
0080721c g     F .text	0000017c __d2b
00800848 g     F .text	000004e8 de0_vga_init
0080b378 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080cbe4 g     F .text	000000b8 alt_get_fd
0080a720 g     F .text	000000c8 __fpcmp_parts_d
008043c4 g     F .text	00000070 _close_r
0080cd78 g     F .text	00000074 memcmp
0080b428 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0081201c g       *ABS*	00000000 __alt_stack_base
0080b470 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00804288 g     F .text	0000013c __swsetup_r
00809958 g     F .text	00000258 __divdf3
008011b8 g     F .text	000000f0 __sfp
00807080 g     F .text	00000058 __copybits
0080e380 g     O .rwdata	00000408 __malloc_av_
0080104c g     F .text	00000004 __sinit_lock_release
00809594 g     F .text	000003c4 __muldf3
00802214 g     F .text	00000060 __sread
0080cac4 g     F .text	00000120 alt_find_file
0080bf94 g     F .text	000000b4 alt_dev_llist_insert
0080ae6c g     F .text	00000020 __malloc_lock
0080b08c g     F .text	000000bc sbrk
00805d24 g     F .text	000001fc _fflush_r
0080836c g     F .text	000000b4 _calloc_r
0080de48 g     O .rwdata	00000138 fh_logo
00811d2c g       *ABS*	00000000 __bss_start
00801d14 g     F .text	00000098 memset
008001f0 g     F .text	00000124 main
00811d54 g     O .bss	00000004 alt_envp
00811d38 g     O .bss	00000004 __malloc_max_total_mem
0080b3d0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00802128 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00805d10 g     F .text	00000014 fclose
00811e8c g     O .bss	00000190 _atexit0
0080464c g     F .text	000015b4 _dtoa_r
00801450 g     F .text	00000740 _malloc_r
0080f9c8 g     O .rwdata	00000004 alt_errno
00801370 g     F .text	000000b8 _fwalk
00800e7c g     F .text	00000148 _fgets_r
00800dac g     F .text	00000060 __divsi3
0080d544 g     O .rodata	00000014 __thenan_df
00805f54 g     F .text	0000012c _malloc_trim_r
0080d1a4 g       *ABS*	00000000 __CTOR_END__
008082b0 g     F .text	000000bc strcmp
0080d1a4 g       *ABS*	00000000 __flash_rodata_start
0080d1a4 g       *ABS*	00000000 __DTOR_LIST__
00809c38 g     F .text	00000088 __nedf2
0080b2c8 g     F .text	00000034 alt_irq_init
0080b02c g     F .text	00000060 alt_release_fd
0080d558 g     O .rodata	00000100 __clz_tab
00811d48 g     O .bss	00000004 _PathLocale
0080cd2c g     F .text	00000014 atexit
00804210 g     F .text	00000078 _write_r
008068d8 g     F .text	0000001c setlocale
00800674 g     F .text	000001d4 vprintln
0080f99c g     O .rwdata	00000004 _impure_ptr
00811d4c g     O .bss	00000004 alt_argc
0080c10c g     F .text	00000064 _do_dtors
0080d68c g     O .rwdata	000007bc charmap
00801ed8 g     F .text	000001c4 __srefill_r
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00806d9c g     F .text	00000080 __ulp
00808240 g     F .text	00000040 __isinfd
00801104 g     F .text	00000018 __fp_unlock_all
0080f9b4 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806844 g     F .text	00000010 localeconv
0080c1a0 g     F .text	00000050 alt_ic_isr_register
0080f9dc g       *ABS*	00000000 _edata
0081201c g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080b8cc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080c28c g     F .text	000000a0 alt_ic_irq_disable
00802198 g     F .text	0000007c __swrite
0080f9a4 g     O .rwdata	00000004 __malloc_trim_threshold
0080ca10 g     F .text	00000020 altera_nios2_qsys_irq_init
0080cd40 g     F .text	00000038 exit
008012a8 g     F .text	000000c8 _fwalk_reent
00807398 g     F .text	0000018c __mdiff
0080051c g     F .text	00000158 put_fb_string
00800e0c g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00801044 g     F .text	00000004 __sfp_lock_release
0080d114 g     F .text	00000020 _exit
00808280 g     F .text	00000030 __isnand
0080be24 g     F .text	00000154 alt_alarm_start
0080a1bc g     F .text	00000098 __muldi3
0080696c g     F .text	00000194 __smakebuf_r
00802274 g     F .text	00000074 strlen
0080c684 g     F .text	00000188 open
00809d48 g     F .text	00000088 __gedf2
0080c170 g     F .text	00000030 alt_icache_flush_all
0080f9d0 g     O .rwdata	00000004 alt_priority_mask
0080c1f0 g     F .text	0000009c alt_ic_irq_enable
008041ec g     F .text	00000024 __vfprintf_internal
008094a0 g     F .text	00000080 __subdf3
00806c78 g     F .text	000000c4 __lo0bits
0080f9d4 g     O .rwdata	00000008 alt_alarm_list
0080c0a8 g     F .text	00000064 _do_ctors
0080a7e8 g     F .text	000000fc close
0080abc4 g     F .text	00000080 alt_load
0080a2d4 g     F .text	00000314 __pack_d
00801428 g     F .text	00000014 free
00801048 g     F .text	00000004 __sinit_lock_acquire
00807894 g     F .text	00000100 __multadd
00806be0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18c76304 	addi	r3,r3,7564
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18c76304 	addi	r3,r3,7564
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d69e6714 	ori	gp,gp,31132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	10874b14 	ori	r2,r2,7468

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18c80714 	ori	r3,r3,8220

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080abc40 	call	80abc4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080ae000 	call	80ae00 <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <main>:
#include <system.h>
#include <io.h>


int main ()
{
  8001f0:	deffc904 	addi	sp,sp,-220
  8001f4:	dfc03615 	stw	ra,216(sp)
  8001f8:	dc403515 	stw	r17,212(sp)
  8001fc:	dc003415 	stw	r16,208(sp)
	uint16 x;
	frame_buffer fb;
	char buffer[200] = {0};
  800200:	d9000204 	addi	r4,sp,8
  800204:	000b883a 	mov	r5,zero
  800208:	01803204 	movi	r6,200
  80020c:	0801d140 	call	801d14 <memset>

	if ((x = de0_vga_init (&fb)) != 0)
  800210:	d809883a 	mov	r4,sp
  800214:	08008480 	call	800848 <de0_vga_init>
  800218:	10c03fcc 	andi	r3,r2,255
  80021c:	18000a26 	beq	r3,zero,800248 <main+0x58>
	{
		switch (x)
  800220:	00800044 	movi	r2,1
  800224:	1880041e 	bne	r3,r2,800238 <main+0x48>
		{
		case 1:
			printf ("ERROR: Out of memory. Could not allocate memory for the frame buffer\n");
  800228:	01002074 	movhi	r4,129
  80022c:	21346904 	addi	r4,r4,-11868
  800230:	0801ec40 	call	801ec4 <puts>
  800234:	00003106 	br	8002fc <main+0x10c>
			break;
		default:
			printf ("ERROR: Something went wrong initializing the de0_vga\n");
  800238:	01002074 	movhi	r4,129
  80023c:	21347b04 	addi	r4,r4,-11796
  800240:	0801ec40 	call	801ec4 <puts>
  800244:	00002d06 	br	8002fc <main+0x10c>
			break;
		}
		return -1;
	}

	IOWR (VGA_0_BASE, VGA_CSR_FB_BASE_ADDR, (uint32) fb.p_pxs);	// write frame buffer base address into control register
  800248:	d8c00017 	ldw	r3,0(sp)
  80024c:	0005883a 	mov	r2,zero
  800250:	10c00035 	stwio	r3,0(r2)

	IOWR (VGA_0_BASE, VGA_CSR_CTRL, VGA_CSR_CTRL_GO);				// write GO-Bit into control register
  800254:	00c00044 	movi	r3,1
  800258:	00800104 	movi	r2,4
  80025c:	10c00035 	stwio	r3,0(r2)
	printf ("VGA startet\n");
  800260:	01002074 	movhi	r4,129
  800264:	21348904 	addi	r4,r4,-11740
  800268:	0801ec40 	call	801ec4 <puts>
	sprintf (buffer, "Max Stolze & Darius Kellermann\n\nImplementation einer VGA-Schnittstelle unter Verwendung von DMA in einem NIOS-System\n\nEmbedded-Systems-Projektarbeit im WS 2011/2012\n\n");
  80026c:	dc000204 	addi	r16,sp,8
  800270:	8009883a 	mov	r4,r16
  800274:	01402074 	movhi	r5,129
  800278:	29748c04 	addi	r5,r5,-11728
  80027c:	018029c4 	movi	r6,167
  800280:	0801c740 	call	801c74 <memcpy>
	vprintln (&fb, buffer);
  800284:	d809883a 	mov	r4,sp
  800288:	800b883a 	mov	r5,r16
  80028c:	08006740 	call	800674 <vprintln>

	sprintf (buffer, "Hello World! Use the JTAG UART to tell me what to say. :)");
  800290:	8009883a 	mov	r4,r16
  800294:	01402074 	movhi	r5,129
  800298:	2974b604 	addi	r5,r5,-11560
  80029c:	01800e84 	movi	r6,58
  8002a0:	0801c740 	call	801c74 <memcpy>
	vprintln (&fb, buffer);
  8002a4:	d809883a 	mov	r4,sp
  8002a8:	800b883a 	mov	r5,r16
  8002ac:	08006740 	call	800674 <vprintln>
  8002b0:	dc000204 	addi	r16,sp,8
  8002b4:	04402074 	movhi	r17,129
  8002b8:	8c7e6704 	addi	r17,r17,-1636

	while (1)
	{
		printf ("Tell me what to say: ");
  8002bc:	01002074 	movhi	r4,129
  8002c0:	2134c504 	addi	r4,r4,-11500
  8002c4:	0801dac0 	call	801dac <printf>
		vprintln (&fb, fgets (buffer, 200, stdin));
  8002c8:	88800017 	ldw	r2,0(r17)
  8002cc:	8009883a 	mov	r4,r16
  8002d0:	01403204 	movi	r5,200
  8002d4:	11800117 	ldw	r6,4(r2)
  8002d8:	0800fc40 	call	800fc4 <fgets>
  8002dc:	d809883a 	mov	r4,sp
  8002e0:	100b883a 	mov	r5,r2
  8002e4:	08006740 	call	800674 <vprintln>
		printf ("Written \"%s\" into the buffer\n", buffer);
  8002e8:	01002074 	movhi	r4,129
  8002ec:	2134cb04 	addi	r4,r4,-11476
  8002f0:	800b883a 	mov	r5,r16
  8002f4:	0801dac0 	call	801dac <printf>
  8002f8:	003ff006 	br	8002bc <main+0xcc>
	}

	return 0;
}
  8002fc:	00bfffc4 	movi	r2,-1
  800300:	dfc03617 	ldw	ra,216(sp)
  800304:	dc403517 	ldw	r17,212(sp)
  800308:	dc003417 	ldw	r16,208(sp)
  80030c:	dec03704 	addi	sp,sp,220
  800310:	f800283a 	ret

00800314 <put_frame_buffer>:
	// TODO Write the frame buffer base address into the hardware register and set go bit (not yet possible)
	return 0;
}

void put_frame_buffer (frame_buffer *fb, uint16 *element, uint8 width, uint8 height, uint16 off_x, uint16 off_y)
{
  800314:	deffed04 	addi	sp,sp,-76
  800318:	dfc01215 	stw	ra,72(sp)
  80031c:	df001115 	stw	fp,68(sp)
  800320:	ddc01015 	stw	r23,64(sp)
  800324:	dd800f15 	stw	r22,60(sp)
  800328:	dd400e15 	stw	r21,56(sp)
  80032c:	dd000d15 	stw	r20,52(sp)
  800330:	dcc00c15 	stw	r19,48(sp)
  800334:	dc800b15 	stw	r18,44(sp)
  800338:	dc400a15 	stw	r17,40(sp)
  80033c:	dc000915 	stw	r16,36(sp)
  800340:	d9000615 	stw	r4,24(sp)
  800344:	d9400715 	stw	r5,28(sp)
  800348:	d8c01417 	ldw	r3,80(sp)
  80034c:	d9800805 	stb	r6,32(sp)
  800350:	d880130b 	ldhu	r2,76(sp)
  800354:	d880088d 	sth	r2,34(sp)
	uint16 x, y;

	for (y = off_y; (y < (off_y + height)) && (y < DISPLAY_NUM_ROWS); y++)
  800358:	193fffcc 	andi	r4,r3,65535
  80035c:	d9000015 	stw	r4,0(sp)
  800360:	39c03fcc 	andi	r7,r7,255
  800364:	390f883a 	add	r7,r7,r4
  800368:	d9c00215 	stw	r7,8(sp)
  80036c:	21c05f0e 	bge	r4,r7,8004ec <put_frame_buffer+0x1d8>
  800370:	008077c4 	movi	r2,479
  800374:	11005d36 	bltu	r2,r4,8004ec <put_frame_buffer+0x1d8>
  800378:	d8c0010d 	sth	r3,4(sp)
  80037c:	2007883a 	mov	r3,r4
  800380:	00004a06 	br	8004ac <put_frame_buffer+0x198>
		for (x = off_x; (x < (off_x + width)) && (x < DISPLAY_NUM_COLUMNS); x++)
			frame_px_w (fb, x, y, element[(x-off_x)+(width*(y-off_y))]);
  800384:	04000144 	movi	r16,5
  800388:	d9400517 	ldw	r5,20(sp)
  80038c:	2d49883a 	add	r4,r5,r21
  800390:	800b883a 	mov	r5,r16
  800394:	0800dac0 	call	800dac <__divsi3>
  800398:	100490fa 	slli	r2,r2,3
  80039c:	d9000617 	ldw	r4,24(sp)
  8003a0:	20c00017 	ldw	r3,0(r4)
  8003a4:	10ed883a 	add	r22,r2,r3
  8003a8:	b93fffcc 	andi	r4,r23,65535
  8003ac:	800b883a 	mov	r5,r16
  8003b0:	0800e740 	call	800e74 <__umodsi3>
  8003b4:	10bfffcc 	andi	r2,r2,65535
  8003b8:	12800324 	muli	r10,r2,12
  8003bc:	0103ffc4 	movi	r4,4095
  8003c0:	000b883a 	mov	r5,zero
  8003c4:	50bff804 	addi	r2,r10,-32
  8003c8:	10000316 	blt	r2,zero,8003d8 <put_frame_buffer+0xc4>
  8003cc:	20a8983a 	sll	r20,r4,r2
  8003d0:	0027883a 	mov	r19,zero
  8003d4:	00000706 	br	8003f4 <put_frame_buffer+0xe0>
  8003d8:	2006d07a 	srli	r3,r4,1
  8003dc:	008007c4 	movi	r2,31
  8003e0:	1285c83a 	sub	r2,r2,r10
  8003e4:	1886d83a 	srl	r3,r3,r2
  8003e8:	2aa8983a 	sll	r20,r5,r10
  8003ec:	1d28b03a 	or	r20,r3,r20
  8003f0:	22a6983a 	sll	r19,r4,r10
  8003f4:	04c4303a 	nor	r2,zero,r19
  8003f8:	0506303a 	nor	r3,zero,r20
  8003fc:	b1000017 	ldw	r4,0(r22)
  800400:	b1400117 	ldw	r5,4(r22)
  800404:	2090703a 	and	r8,r4,r2
  800408:	28d2703a 	and	r9,r5,r3
  80040c:	af05c83a 	sub	r2,r21,fp
  800410:	d9400417 	ldw	r5,16(sp)
  800414:	1145883a 	add	r2,r2,r5
  800418:	1085883a 	add	r2,r2,r2
  80041c:	d8c00717 	ldw	r3,28(sp)
  800420:	10c5883a 	add	r2,r2,r3
  800424:	1100000b 	ldhu	r4,0(r2)
  800428:	0083ffc4 	movi	r2,4095
  80042c:	208c703a 	and	r6,r4,r2
  800430:	000f883a 	mov	r7,zero
  800434:	50bff804 	addi	r2,r10,-32
  800438:	10000316 	blt	r2,zero,800448 <put_frame_buffer+0x134>
  80043c:	30a4983a 	sll	r18,r6,r2
  800440:	0023883a 	mov	r17,zero
  800444:	00000706 	br	800464 <put_frame_buffer+0x150>
  800448:	3006d07a 	srli	r3,r6,1
  80044c:	008007c4 	movi	r2,31
  800450:	1285c83a 	sub	r2,r2,r10
  800454:	1886d83a 	srl	r3,r3,r2
  800458:	3aa4983a 	sll	r18,r7,r10
  80045c:	1ca4b03a 	or	r18,r3,r18
  800460:	32a2983a 	sll	r17,r6,r10
  800464:	4444b03a 	or	r2,r8,r17
  800468:	b0800015 	stw	r2,0(r22)
  80046c:	4c84b03a 	or	r2,r9,r18
  800470:	b0800115 	stw	r2,4(r22)
void put_frame_buffer (frame_buffer *fb, uint16 *element, uint8 width, uint8 height, uint16 off_x, uint16 off_y)
{
	uint16 x, y;

	for (y = off_y; (y < (off_y + height)) && (y < DISPLAY_NUM_ROWS); y++)
		for (x = off_x; (x < (off_x + width)) && (x < DISPLAY_NUM_COLUMNS); x++)
  800474:	bdc00044 	addi	r23,r23,1
  800478:	bd7fffcc 	andi	r21,r23,65535
  80047c:	d9000317 	ldw	r4,12(sp)
  800480:	a900020e 	bge	r21,r4,80048c <put_frame_buffer+0x178>
  800484:	0080a004 	movi	r2,640
  800488:	a8bfbe1e 	bne	r21,r2,800384 <put_frame_buffer+0x70>

void put_frame_buffer (frame_buffer *fb, uint16 *element, uint8 width, uint8 height, uint16 off_x, uint16 off_y)
{
	uint16 x, y;

	for (y = off_y; (y < (off_y + height)) && (y < DISPLAY_NUM_ROWS); y++)
  80048c:	d940010b 	ldhu	r5,4(sp)
  800490:	29400044 	addi	r5,r5,1
  800494:	d940010d 	sth	r5,4(sp)
  800498:	28ffffcc 	andi	r3,r5,65535
  80049c:	d8800217 	ldw	r2,8(sp)
  8004a0:	1880120e 	bge	r3,r2,8004ec <put_frame_buffer+0x1d8>
  8004a4:	00807804 	movi	r2,480
  8004a8:	18801026 	beq	r3,r2,8004ec <put_frame_buffer+0x1d8>
		for (x = off_x; (x < (off_x + width)) && (x < DISPLAY_NUM_COLUMNS); x++)
  8004ac:	df00088b 	ldhu	fp,34(sp)
  8004b0:	d9000803 	ldbu	r4,32(sp)
  8004b4:	e10b883a 	add	r5,fp,r4
  8004b8:	d9400315 	stw	r5,12(sp)
  8004bc:	e17ff30e 	bge	fp,r5,80048c <put_frame_buffer+0x178>
  8004c0:	00809fc4 	movi	r2,639
  8004c4:	173ff136 	bltu	r2,fp,80048c <put_frame_buffer+0x178>
			frame_px_w (fb, x, y, element[(x-off_x)+(width*(y-off_y))]);
  8004c8:	1880a024 	muli	r2,r3,640
  8004cc:	d8800515 	stw	r2,20(sp)
  8004d0:	d9400017 	ldw	r5,0(sp)
  8004d4:	1945c83a 	sub	r2,r3,r5
  8004d8:	1105383a 	mul	r2,r2,r4
  8004dc:	d8800415 	stw	r2,16(sp)
  8004e0:	ddc0088b 	ldhu	r23,34(sp)
  8004e4:	e02b883a 	mov	r21,fp
  8004e8:	003fa606 	br	800384 <put_frame_buffer+0x70>
}
  8004ec:	dfc01217 	ldw	ra,72(sp)
  8004f0:	df001117 	ldw	fp,68(sp)
  8004f4:	ddc01017 	ldw	r23,64(sp)
  8004f8:	dd800f17 	ldw	r22,60(sp)
  8004fc:	dd400e17 	ldw	r21,56(sp)
  800500:	dd000d17 	ldw	r20,52(sp)
  800504:	dcc00c17 	ldw	r19,48(sp)
  800508:	dc800b17 	ldw	r18,44(sp)
  80050c:	dc400a17 	ldw	r17,40(sp)
  800510:	dc000917 	ldw	r16,36(sp)
  800514:	dec01304 	addi	sp,sp,76
  800518:	f800283a 	ret

0080051c <put_fb_string>:

void put_fb_string (frame_buffer *fb, char *string, uint16 x_off, uint16 y_off)
{
  80051c:	defff504 	addi	sp,sp,-44
  800520:	dfc00a15 	stw	ra,40(sp)
  800524:	ddc00915 	stw	r23,36(sp)
  800528:	dd800815 	stw	r22,32(sp)
  80052c:	dd400715 	stw	r21,28(sp)
  800530:	dd000615 	stw	r20,24(sp)
  800534:	dcc00515 	stw	r19,20(sp)
  800538:	dc800415 	stw	r18,16(sp)
  80053c:	dc400315 	stw	r17,12(sp)
  800540:	dc000215 	stw	r16,8(sp)
  800544:	2027883a 	mov	r19,r4
	int i = 0, x = x_off, y = y_off;

	while (string[i] != 0)
  800548:	29000003 	ldbu	r4,0(r5)
  80054c:	20803fcc 	andi	r2,r4,255
  800550:	1080201c 	xori	r2,r2,128
  800554:	10bfe004 	addi	r2,r2,-128
  800558:	10003b26 	beq	r2,zero,800648 <put_fb_string+0x12c>
			frame_px_w (fb, x, y, element[(x-off_x)+(width*(y-off_y))]);
}

void put_fb_string (frame_buffer *fb, char *string, uint16 x_off, uint16 y_off)
{
	int i = 0, x = x_off, y = y_off;
  80055c:	353fffcc 	andi	r20,r6,65535
  800560:	3d7fffcc 	andi	r21,r7,65535
  800564:	2823883a 	mov	r17,r5
  800568:	a021883a 	mov	r16,r20
  80056c:	a825883a 	mov	r18,r21
  800570:	05802074 	movhi	r22,129
  800574:	b5b4ba84 	addi	r22,r22,-11542
  800578:	05c02074 	movhi	r23,129
  80057c:	bdf3ca84 	addi	r23,r23,-12502

	while (string[i] != 0)
	{
		put_frame_buffer (fb, (uint16 *)&charmap[get_index (string[i])], CHAR_WIDTH, CHAR_HEIGHT, x, y);
  800580:	200b883a 	mov	r5,r4
  800584:	20bff804 	addi	r2,r4,-32
  800588:	10803fcc 	andi	r2,r2,255
  80058c:	00c01004 	movi	r3,64
  800590:	18800636 	bltu	r3,r2,8005ac <put_fb_string+0x90>
  800594:	20803fcc 	andi	r2,r4,255
  800598:	1080201c 	xori	r2,r2,128
  80059c:	10bfe004 	addi	r2,r2,-128
  8005a0:	108007a4 	muli	r2,r2,30
  8005a4:	158b883a 	add	r5,r2,r22
  8005a8:	00000c06 	br	8005dc <put_fb_string+0xc0>
  8005ac:	28bfe7c4 	addi	r2,r5,-97
  8005b0:	10803fcc 	andi	r2,r2,255
  8005b4:	00c00644 	movi	r3,25
  8005b8:	1880032e 	bgeu	r3,r2,8005c8 <put_fb_string+0xac>
  8005bc:	01402074 	movhi	r5,129
  8005c0:	2975a304 	addi	r5,r5,-10612
  8005c4:	00000506 	br	8005dc <put_fb_string+0xc0>
  8005c8:	20803fcc 	andi	r2,r4,255
  8005cc:	1080201c 	xori	r2,r2,128
  8005d0:	10bfe004 	addi	r2,r2,-128
  8005d4:	108007a4 	muli	r2,r2,30
  8005d8:	15cb883a 	add	r5,r2,r23
  8005dc:	80bfffcc 	andi	r2,r16,65535
  8005e0:	d8800015 	stw	r2,0(sp)
  8005e4:	90bfffcc 	andi	r2,r18,65535
  8005e8:	d8800115 	stw	r2,4(sp)
  8005ec:	9809883a 	mov	r4,r19
  8005f0:	018000c4 	movi	r6,3
  8005f4:	01c00144 	movi	r7,5
  8005f8:	08003140 	call	800314 <put_frame_buffer>
		if (x < (DISPLAY_NUM_COLUMNS - (fb->text_offset_x + CHAR_WIDTH + CHAR_INTERCHARSPACING)))
  8005fc:	98c0010b 	ldhu	r3,4(r19)
  800600:	00809f04 	movi	r2,636
  800604:	10c5c83a 	sub	r2,r2,r3
  800608:	8080020e 	bge	r16,r2,800614 <put_fb_string+0xf8>
			x += CHAR_WIDTH + CHAR_INTERCHARSPACING;
  80060c:	84000104 	addi	r16,r16,4
  800610:	00000706 	br	800630 <put_fb_string+0x114>
		else
		{
			x = x_off;
			if (y < DISPLAY_NUM_ROWS - 2 * (CHAR_HEIGHT + CHAR_INTERLINESPACING))
  800614:	00807444 	movi	r2,465
  800618:	1480030e 	bge	r2,r18,800628 <put_fb_string+0x10c>
  80061c:	a021883a 	mov	r16,r20
  800620:	a825883a 	mov	r18,r21
  800624:	00000206 	br	800630 <put_fb_string+0x114>
				y += CHAR_HEIGHT + CHAR_INTERLINESPACING;
  800628:	948001c4 	addi	r18,r18,7
  80062c:	a021883a 	mov	r16,r20

void put_fb_string (frame_buffer *fb, char *string, uint16 x_off, uint16 y_off)
{
	int i = 0, x = x_off, y = y_off;

	while (string[i] != 0)
  800630:	89000043 	ldbu	r4,1(r17)
  800634:	8c400044 	addi	r17,r17,1
  800638:	20803fcc 	andi	r2,r4,255
  80063c:	1080201c 	xori	r2,r2,128
  800640:	10bfe004 	addi	r2,r2,-128
  800644:	103fce1e 	bne	r2,zero,800580 <put_fb_string+0x64>
			else
				y = y_off;
		}
		i++;
	}
}
  800648:	dfc00a17 	ldw	ra,40(sp)
  80064c:	ddc00917 	ldw	r23,36(sp)
  800650:	dd800817 	ldw	r22,32(sp)
  800654:	dd400717 	ldw	r21,28(sp)
  800658:	dd000617 	ldw	r20,24(sp)
  80065c:	dcc00517 	ldw	r19,20(sp)
  800660:	dc800417 	ldw	r18,16(sp)
  800664:	dc400317 	ldw	r17,12(sp)
  800668:	dc000217 	ldw	r16,8(sp)
  80066c:	dec00b04 	addi	sp,sp,44
  800670:	f800283a 	ret

00800674 <vprintln>:

void vprintln (frame_buffer *fb, char *string)
{
  800674:	defff604 	addi	sp,sp,-40
  800678:	dfc00915 	stw	ra,36(sp)
  80067c:	dd800815 	stw	r22,32(sp)
  800680:	dd400715 	stw	r21,28(sp)
  800684:	dd000615 	stw	r20,24(sp)
  800688:	dcc00515 	stw	r19,20(sp)
  80068c:	dc800415 	stw	r18,16(sp)
  800690:	dc400315 	stw	r17,12(sp)
  800694:	dc000215 	stw	r16,8(sp)
  800698:	2023883a 	mov	r17,r4
	int i = 0, x = fb->text_offset_x, y = vprintln_y_off;
  80069c:	2400010b 	ldhu	r16,4(r4)
  8006a0:	d528e40f 	ldh	r20,-23664(gp)

	while (string[i] != 0)
  8006a4:	29000003 	ldbu	r4,0(r5)
  8006a8:	20803fcc 	andi	r2,r4,255
  8006ac:	1080201c 	xori	r2,r2,128
  8006b0:	10bfe004 	addi	r2,r2,-128
  8006b4:	10004126 	beq	r2,zero,8007bc <vprintln+0x148>
  8006b8:	2827883a 	mov	r19,r5
  8006bc:	8025883a 	mov	r18,r16
  8006c0:	05807444 	movi	r22,465
	{
		switch (string[i])
  8006c4:	20c03fcc 	andi	r3,r4,255
  8006c8:	18c0201c 	xori	r3,r3,128
  8006cc:	18ffe004 	addi	r3,r3,-128
  8006d0:	00800284 	movi	r2,10
  8006d4:	1880061e 	bne	r3,r2,8006f0 <vprintln+0x7c>
		{
		case '\n':
			x = fb->text_offset_x;
  8006d8:	8c00010b 	ldhu	r16,4(r17)
			if (y < DISPLAY_NUM_ROWS - 2 * (CHAR_HEIGHT + CHAR_INTERLINESPACING))
  8006dc:	b5000216 	blt	r22,r20,8006e8 <vprintln+0x74>
				y += CHAR_HEIGHT + CHAR_INTERLINESPACING;
  8006e0:	a50001c4 	addi	r20,r20,7
  8006e4:	00002d06 	br	80079c <vprintln+0x128>
			else
				y = fb->text_offset_y;
  8006e8:	8d00018b 	ldhu	r20,6(r17)
  8006ec:	00002b06 	br	80079c <vprintln+0x128>
{
	int i = 0, x = fb->text_offset_x, y = vprintln_y_off;

	while (string[i] != 0)
	{
		switch (string[i])
  8006f0:	21803fcc 	andi	r6,r4,255
  8006f4:	3180201c 	xori	r6,r6,128
  8006f8:	31bfe004 	addi	r6,r6,-128
				y += CHAR_HEIGHT + CHAR_INTERLINESPACING;
			else
				y = fb->text_offset_y;
			break;
		default:
			put_frame_buffer (fb, (uint16 *)&charmap[get_index (string[i])], CHAR_WIDTH, CHAR_HEIGHT, x, y);
  8006fc:	200b883a 	mov	r5,r4
  800700:	20bff804 	addi	r2,r4,-32
  800704:	10803fcc 	andi	r2,r2,255
  800708:	00c01004 	movi	r3,64
  80070c:	18800536 	bltu	r3,r2,800724 <vprintln+0xb0>
  800710:	30c007a4 	muli	r3,r6,30
  800714:	00802074 	movhi	r2,129
  800718:	10b4ba84 	addi	r2,r2,-11542
  80071c:	188b883a 	add	r5,r3,r2
  800720:	00000b06 	br	800750 <vprintln+0xdc>
  800724:	28bfe7c4 	addi	r2,r5,-97
  800728:	10803fcc 	andi	r2,r2,255
  80072c:	00c00644 	movi	r3,25
  800730:	1880032e 	bgeu	r3,r2,800740 <vprintln+0xcc>
  800734:	01402074 	movhi	r5,129
  800738:	2975a304 	addi	r5,r5,-10612
  80073c:	00000406 	br	800750 <vprintln+0xdc>
  800740:	30c007a4 	muli	r3,r6,30
  800744:	00802074 	movhi	r2,129
  800748:	10b3ca84 	addi	r2,r2,-12502
  80074c:	188b883a 	add	r5,r3,r2
  800750:	05400144 	movi	r21,5
  800754:	90bfffcc 	andi	r2,r18,65535
  800758:	d8800015 	stw	r2,0(sp)
  80075c:	a0bfffcc 	andi	r2,r20,65535
  800760:	d8800115 	stw	r2,4(sp)
  800764:	8809883a 	mov	r4,r17
  800768:	018000c4 	movi	r6,3
  80076c:	a80f883a 	mov	r7,r21
  800770:	08003140 	call	800314 <put_frame_buffer>
			if (x < (DISPLAY_NUM_COLUMNS - (fb->text_offset_x + CHAR_WIDTH + CHAR_INTERCHARSPACING)))
  800774:	8c00010b 	ldhu	r16,4(r17)
  800778:	00809f04 	movi	r2,636
  80077c:	1405c83a 	sub	r2,r2,r16
  800780:	9080020e 	bge	r18,r2,80078c <vprintln+0x118>
				x += CHAR_WIDTH + CHAR_INTERLINESPACING;
  800784:	9561883a 	add	r16,r18,r21
  800788:	00000406 	br	80079c <vprintln+0x128>
			else
			{
				x = fb->text_offset_x;
				if (y < DISPLAY_NUM_ROWS - 2 * (CHAR_HEIGHT + CHAR_INTERLINESPACING))
  80078c:	b5000216 	blt	r22,r20,800798 <vprintln+0x124>
					y += CHAR_HEIGHT + CHAR_INTERLINESPACING;
  800790:	a50001c4 	addi	r20,r20,7
  800794:	00000106 	br	80079c <vprintln+0x128>
				else
					y = fb->text_offset_y;
  800798:	8d00018b 	ldhu	r20,6(r17)

void vprintln (frame_buffer *fb, char *string)
{
	int i = 0, x = fb->text_offset_x, y = vprintln_y_off;

	while (string[i] != 0)
  80079c:	99000043 	ldbu	r4,1(r19)
  8007a0:	9cc00044 	addi	r19,r19,1
  8007a4:	20803fcc 	andi	r2,r4,255
  8007a8:	1080201c 	xori	r2,r2,128
  8007ac:	10bfe004 	addi	r2,r2,-128
  8007b0:	10000226 	beq	r2,zero,8007bc <vprintln+0x148>
  8007b4:	8025883a 	mov	r18,r16
  8007b8:	003fc206 	br	8006c4 <vprintln+0x50>
			}
		}
		i++;
	}
	// whiten all remainder of the line
	while (x < (DISPLAY_NUM_COLUMNS - (fb->text_offset_x + CHAR_WIDTH + CHAR_INTERCHARSPACING)))
  8007bc:	88c0010b 	ldhu	r3,4(r17)
  8007c0:	00809f04 	movi	r2,636
  8007c4:	10c5c83a 	sub	r2,r2,r3
  8007c8:	80800f0e 	bge	r16,r2,800808 <vprintln+0x194>
  8007cc:	a4bfffcc 	andi	r18,r20,65535
  8007d0:	04c09f04 	movi	r19,636
	{
		put_frame_buffer (fb, (uint16 *)&charmap[get_index (' ')], CHAR_WIDTH, CHAR_HEIGHT, x, y);
  8007d4:	80bfffcc 	andi	r2,r16,65535
  8007d8:	d8800015 	stw	r2,0(sp)
  8007dc:	dc800115 	stw	r18,4(sp)
  8007e0:	8809883a 	mov	r4,r17
  8007e4:	01402074 	movhi	r5,129
  8007e8:	2975aa84 	addi	r5,r5,-10582
  8007ec:	018000c4 	movi	r6,3
  8007f0:	01c00144 	movi	r7,5
  8007f4:	08003140 	call	800314 <put_frame_buffer>
		x += CHAR_WIDTH + CHAR_INTERCHARSPACING;
  8007f8:	84000104 	addi	r16,r16,4
			}
		}
		i++;
	}
	// whiten all remainder of the line
	while (x < (DISPLAY_NUM_COLUMNS - (fb->text_offset_x + CHAR_WIDTH + CHAR_INTERCHARSPACING)))
  8007fc:	8880010b 	ldhu	r2,4(r17)
  800800:	9885c83a 	sub	r2,r19,r2
  800804:	80bff316 	blt	r16,r2,8007d4 <vprintln+0x160>
	{
		put_frame_buffer (fb, (uint16 *)&charmap[get_index (' ')], CHAR_WIDTH, CHAR_HEIGHT, x, y);
		x += CHAR_WIDTH + CHAR_INTERCHARSPACING;
	}
	// Line break!
	if (y < DISPLAY_NUM_ROWS - 2 * (CHAR_HEIGHT + CHAR_INTERLINESPACING))
  800808:	00807444 	movi	r2,465
  80080c:	15000216 	blt	r2,r20,800818 <vprintln+0x1a4>
		y += CHAR_HEIGHT + CHAR_INTERLINESPACING;
  800810:	a08001c4 	addi	r2,r20,7
  800814:	00000106 	br	80081c <vprintln+0x1a8>
	else
		y = fb->text_offset_y;
  800818:	8880018b 	ldhu	r2,6(r17)
	vprintln_y_off = y;
  80081c:	d0a8e40d 	sth	r2,-23664(gp)
}
  800820:	dfc00917 	ldw	ra,36(sp)
  800824:	dd800817 	ldw	r22,32(sp)
  800828:	dd400717 	ldw	r21,28(sp)
  80082c:	dd000617 	ldw	r20,24(sp)
  800830:	dcc00517 	ldw	r19,20(sp)
  800834:	dc800417 	ldw	r18,16(sp)
  800838:	dc400317 	ldw	r17,12(sp)
  80083c:	dc000217 	ldw	r16,8(sp)
  800840:	dec00a04 	addi	sp,sp,40
  800844:	f800283a 	ret

00800848 <de0_vga_init>:
#include "fh_logo.h"

static short vprintln_y_off;	/*! Keeps track of the y-position while writing to the frame buffer */

uint8 de0_vga_init (frame_buffer *fb)
{
  800848:	deffe504 	addi	sp,sp,-108
  80084c:	dfc01a15 	stw	ra,104(sp)
  800850:	dd801915 	stw	r22,100(sp)
  800854:	dd401815 	stw	r21,96(sp)
  800858:	dd001715 	stw	r20,92(sp)
  80085c:	dcc01615 	stw	r19,88(sp)
  800860:	dc801515 	stw	r18,84(sp)
  800864:	dc401415 	stw	r17,80(sp)
  800868:	dc001315 	stw	r16,76(sp)
  80086c:	0005883a 	mov	r2,zero
  800870:	d8800f15 	stw	r2,60(sp)
  800874:	d8801015 	stw	r2,64(sp)
  800878:	d8801115 	stw	r2,68(sp)
  80087c:	d8801215 	stw	r2,72(sp)
  800880:	202d883a 	mov	r22,r4
	uint16 x, y, color;
	char buffer[50] = {0};
  800884:	d8000215 	stw	zero,8(sp)
  800888:	d8000315 	stw	zero,12(sp)
  80088c:	d8000415 	stw	zero,16(sp)
  800890:	d8000515 	stw	zero,20(sp)
  800894:	d8000615 	stw	zero,24(sp)
  800898:	d8000715 	stw	zero,28(sp)
  80089c:	d8000815 	stw	zero,32(sp)
  8008a0:	d8000915 	stw	zero,36(sp)
  8008a4:	d8000a15 	stw	zero,40(sp)
  8008a8:	d8000b15 	stw	zero,44(sp)
  8008ac:	d8000c15 	stw	zero,48(sp)
  8008b0:	d8000d15 	stw	zero,52(sp)
  8008b4:	d8000e0d 	sth	zero,56(sp)

	// Try to allocate as many segments as required for the frame buffer.
	if ((fb->p_pxs = (uint64 *) malloc (((DISPLAY_NUM_COLUMNS * DISPLAY_NUM_ROWS) / 5) * sizeof (uint64))) == NULL)
  8008b8:	01000234 	movhi	r4,8
  8008bc:	21200004 	addi	r4,r4,-32768
  8008c0:	080143c0 	call	80143c <malloc>
  8008c4:	b0800015 	stw	r2,0(r22)
  8008c8:	1000021e 	bne	r2,zero,8008d4 <de0_vga_init+0x8c>
  8008cc:	00800044 	movi	r2,1
  8008d0:	00010d06 	br	800d08 <de0_vga_init+0x4c0>
		return 1;	// out of memory
	fb->text_offset_x = 20;
  8008d4:	00800504 	movi	r2,20
  8008d8:	b080010d 	sth	r2,4(r22)
	fb->text_offset_y = 120;
  8008dc:	00801e04 	movi	r2,120
  8008e0:	b080018d 	sth	r2,6(r22)

	vprintln_y_off = fb->text_offset_y;
  8008e4:	d0a8e40d 	sth	r2,-23664(gp)
  8008e8:	002b883a 	mov	r21,zero
  8008ec:	0000f706 	br	800ccc <de0_vga_init+0x484>

	// Pre-fill the frame buffer all white
	for (y = 0; y < DISPLAY_NUM_ROWS; y++)
		for (x = 0; x < DISPLAY_NUM_COLUMNS; x++)
			frame_px_w (fb, x, y, 0xFFF);
  8008f0:	04000144 	movi	r16,5
  8008f4:	ad09883a 	add	r4,r21,r20
  8008f8:	800b883a 	mov	r5,r16
  8008fc:	0800dac0 	call	800dac <__divsi3>
  800900:	100490fa 	slli	r2,r2,3
  800904:	b0c00017 	ldw	r3,0(r22)
  800908:	10e7883a 	add	r19,r2,r3
  80090c:	a13fffcc 	andi	r4,r20,65535
  800910:	800b883a 	mov	r5,r16
  800914:	0800e740 	call	800e74 <__umodsi3>
  800918:	10bfffcc 	andi	r2,r2,65535
  80091c:	11800324 	muli	r6,r2,12
  800920:	0103ffc4 	movi	r4,4095
  800924:	000b883a 	mov	r5,zero
  800928:	30bff804 	addi	r2,r6,-32
  80092c:	10000316 	blt	r2,zero,80093c <de0_vga_init+0xf4>
  800930:	20a4983a 	sll	r18,r4,r2
  800934:	0023883a 	mov	r17,zero
  800938:	00000706 	br	800958 <de0_vga_init+0x110>
  80093c:	2006d07a 	srli	r3,r4,1
  800940:	008007c4 	movi	r2,31
  800944:	1185c83a 	sub	r2,r2,r6
  800948:	1886d83a 	srl	r3,r3,r2
  80094c:	29a4983a 	sll	r18,r5,r6
  800950:	1ca4b03a 	or	r18,r3,r18
  800954:	21a2983a 	sll	r17,r4,r6
  800958:	0448303a 	nor	r4,zero,r17
  80095c:	048a303a 	nor	r5,zero,r18
  800960:	99800017 	ldw	r6,0(r19)
  800964:	99c00117 	ldw	r7,4(r19)
  800968:	3104703a 	and	r2,r6,r4
  80096c:	3946703a 	and	r3,r7,r5
  800970:	1448b03a 	or	r4,r2,r17
  800974:	99000015 	stw	r4,0(r19)
  800978:	1c84b03a 	or	r2,r3,r18
  80097c:	98800115 	stw	r2,4(r19)
  800980:	a5000044 	addi	r20,r20,1

	vprintln_y_off = fb->text_offset_y;

	// Pre-fill the frame buffer all white
	for (y = 0; y < DISPLAY_NUM_ROWS; y++)
		for (x = 0; x < DISPLAY_NUM_COLUMNS; x++)
  800984:	0080a004 	movi	r2,640
  800988:	a0bfd91e 	bne	r20,r2,8008f0 <de0_vga_init+0xa8>
  80098c:	ad2b883a 	add	r21,r21,r20
	fb->text_offset_y = 120;

	vprintln_y_off = fb->text_offset_y;

	// Pre-fill the frame buffer all white
	for (y = 0; y < DISPLAY_NUM_ROWS; y++)
  800990:	00800174 	movhi	r2,5
  800994:	10ac0004 	addi	r2,r2,-20480
  800998:	a880cc1e 	bne	r21,r2,800ccc <de0_vga_init+0x484>
		for (x = 0; x < DISPLAY_NUM_COLUMNS; x++)
			frame_px_w (fb, x, y, 0xFFF);

	// write sample splash
	put_frame_buffer (fb, fh_logo, FH_LOGO_WIDTH, FH_LOGO_HEIGHT, 20, 30);
  80099c:	00800504 	movi	r2,20
  8009a0:	d8800015 	stw	r2,0(sp)
  8009a4:	04000784 	movi	r16,30
  8009a8:	dc000115 	stw	r16,4(sp)
  8009ac:	b009883a 	mov	r4,r22
  8009b0:	01402074 	movhi	r5,129
  8009b4:	29779204 	addi	r5,r5,-8632
  8009b8:	01800304 	movi	r6,12
  8009bc:	01c00344 	movi	r7,13
  8009c0:	08003140 	call	800314 <put_frame_buffer>
  8009c4:	002b883a 	mov	r21,zero
  8009c8:	0000c206 	br	800cd4 <de0_vga_init+0x48c>
	for (y = 0; y < 5; y++)
		for (x = 0; x < 5; x++)
		{
			if (!(y == 4 && x > 2))
  8009cc:	a8ffffcc 	andi	r3,r21,65535
  8009d0:	00800104 	movi	r2,4
  8009d4:	1880041e 	bne	r3,r2,8009e8 <de0_vga_init+0x1a0>
  8009d8:	90ffffcc 	andi	r3,r18,65535
  8009dc:	00800084 	movi	r2,2
  8009e0:	10c0c02e 	bgeu	r2,r3,800ce4 <de0_vga_init+0x49c>
  8009e4:	00004d06 	br	800b1c <de0_vga_init+0x2d4>
				put_frame_buffer (fb, fh_logo, FH_LOGO_WIDTH, FH_LOGO_HEIGHT, (20 + (x+2)*FH_LOGO_WIDTH), (30 + y*FH_LOGO_HEIGHT));
  8009e8:	dcc00015 	stw	r19,0(sp)
  8009ec:	dd000115 	stw	r20,4(sp)
  8009f0:	b009883a 	mov	r4,r22
  8009f4:	01402074 	movhi	r5,129
  8009f8:	29779204 	addi	r5,r5,-8632
  8009fc:	01800304 	movi	r6,12
  800a00:	01c00344 	movi	r7,13
  800a04:	08003140 	call	800314 <put_frame_buffer>
			if (y == 2 && x == 4)
  800a08:	a8ffffcc 	andi	r3,r21,65535
  800a0c:	00800084 	movi	r2,2
  800a10:	1880181e 	bne	r3,r2,800a74 <de0_vga_init+0x22c>
  800a14:	90ffffcc 	andi	r3,r18,65535
  800a18:	00800104 	movi	r2,4
  800a1c:	18803f1e 	bne	r3,r2,800b1c <de0_vga_init+0x2d4>
			{
				sprintf (buffer, "Fachhochschule Koeln");
  800a20:	009a18f4 	movhi	r2,26723
  800a24:	10985184 	addi	r2,r2,24902
  800a28:	d8800215 	stw	r2,8(sp)
  800a2c:	10838884 	addi	r2,r2,3618
  800a30:	d8800315 	stw	r2,12(sp)
  800a34:	009d5a34 	movhi	r2,30056
  800a38:	1098dcc4 	addi	r2,r2,25459
  800a3c:	d8800415 	stw	r2,16(sp)
  800a40:	0092c834 	movhi	r2,19232
  800a44:	10995b04 	addi	r2,r2,25964
  800a48:	d8800515 	stw	r2,20(sp)
  800a4c:	009b9b34 	movhi	r2,28268
  800a50:	10995bc4 	addi	r2,r2,25967
  800a54:	d8800615 	stw	r2,24(sp)
  800a58:	d8000705 	stb	zero,28(sp)
				put_fb_string (fb, buffer, (30 + x*FH_LOGO_WIDTH) + 35, (30 + y*FH_LOGO_HEIGHT) + 4);
  800a5c:	b009883a 	mov	r4,r22
  800a60:	d9400204 	addi	r5,sp,8
  800a64:	01801c44 	movi	r6,113
  800a68:	01c00f04 	movi	r7,60
  800a6c:	080051c0 	call	80051c <put_fb_string>
  800a70:	00002a06 	br	800b1c <de0_vga_init+0x2d4>
			}
			if (y == 3 && x == 4)
  800a74:	a8ffffcc 	andi	r3,r21,65535
  800a78:	008000c4 	movi	r2,3
  800a7c:	1880271e 	bne	r3,r2,800b1c <de0_vga_init+0x2d4>
  800a80:	90ffffcc 	andi	r3,r18,65535
  800a84:	00800104 	movi	r2,4
  800a88:	1880241e 	bne	r3,r2,800b1c <de0_vga_init+0x2d4>
			{
				sprintf (buffer, "Cologne University of Applied Sciences");
  800a8c:	009bdb34 	movhi	r2,28524
  800a90:	109bd0c4 	addi	r2,r2,28483
  800a94:	d8800215 	stw	r2,8(sp)
  800a98:	00881974 	movhi	r2,8293
  800a9c:	109b99c4 	addi	r2,r2,28263
  800aa0:	d8800315 	stw	r2,12(sp)
  800aa4:	009d9a74 	movhi	r2,30313
  800aa8:	109b9544 	addi	r2,r2,28245
  800aac:	d8800415 	stw	r2,16(sp)
  800ab0:	009a5cf4 	movhi	r2,26995
  800ab4:	109c9944 	addi	r2,r2,29285
  800ab8:	d8800515 	stw	r2,20(sp)
  800abc:	009bc834 	movhi	r2,28448
  800ac0:	109e5d04 	addi	r2,r2,31092
  800ac4:	d8800615 	stw	r2,24(sp)
  800ac8:	009c1074 	movhi	r2,28737
  800acc:	10881984 	addi	r2,r2,8294
  800ad0:	d8800715 	stw	r2,28(sp)
  800ad4:	00995a74 	movhi	r2,25961
  800ad8:	109b1c04 	addi	r2,r2,27760
  800adc:	d8800815 	stw	r2,32(sp)
  800ae0:	0098d4f4 	movhi	r2,25427
  800ae4:	10881904 	addi	r2,r2,8292
  800ae8:	d8800915 	stw	r2,36(sp)
  800aec:	0098dbb4 	movhi	r2,25454
  800af0:	10995a44 	addi	r2,r2,25961
  800af4:	d8800a15 	stw	r2,40(sp)
  800af8:	009cd944 	movi	r2,29541
  800afc:	d8800b0d 	sth	r2,44(sp)
  800b00:	d8000b85 	stb	zero,46(sp)
				put_fb_string (fb, buffer, (30 + x*FH_LOGO_WIDTH) + 35, (30 + y*FH_LOGO_HEIGHT) + 4);
  800b04:	b009883a 	mov	r4,r22
  800b08:	d9400204 	addi	r5,sp,8
  800b0c:	01801c44 	movi	r6,113
  800b10:	01c01244 	movi	r7,73
  800b14:	080051c0 	call	80051c <put_fb_string>
  800b18:	00000406 	br	800b2c <de0_vga_init+0x2e4>
  800b1c:	94800044 	addi	r18,r18,1
  800b20:	9cc00304 	addi	r19,r19,12
			frame_px_w (fb, x, y, 0xFFF);

	// write sample splash
	put_frame_buffer (fb, fh_logo, FH_LOGO_WIDTH, FH_LOGO_HEIGHT, 20, 30);
	for (y = 0; y < 5; y++)
		for (x = 0; x < 5; x++)
  800b24:	00800144 	movi	r2,5
  800b28:	90bfa81e 	bne	r18,r2,8009cc <de0_vga_init+0x184>
  800b2c:	ad400044 	addi	r21,r21,1
  800b30:	84000344 	addi	r16,r16,13
		for (x = 0; x < DISPLAY_NUM_COLUMNS; x++)
			frame_px_w (fb, x, y, 0xFFF);

	// write sample splash
	put_frame_buffer (fb, fh_logo, FH_LOGO_WIDTH, FH_LOGO_HEIGHT, 20, 30);
	for (y = 0; y < 5; y++)
  800b34:	00800144 	movi	r2,5
  800b38:	a880661e 	bne	r21,r2,800cd4 <de0_vga_init+0x48c>
  800b3c:	002b883a 	mov	r21,zero
  800b40:	a809883a 	mov	r4,r21
		}

	// write color banner to show off 12-Bit color
	for (x = 0; x < DISPLAY_NUM_COLUMNS; x++)
	{
		if (x < 106)
  800b44:	a8ffffcc 	andi	r3,r21,65535
  800b48:	00801a44 	movi	r2,105
  800b4c:	10c00236 	bltu	r2,r3,800b58 <de0_vga_init+0x310>
  800b50:	0483c004 	movi	r18,3840
  800b54:	00001506 	br	800bac <de0_vga_init+0x364>
			color = 0xF00;
		else if (x < 213)
  800b58:	a8ffffcc 	andi	r3,r21,65535
  800b5c:	00803504 	movi	r2,212
  800b60:	10c00236 	bltu	r2,r3,800b6c <de0_vga_init+0x324>
  800b64:	0483fc04 	movi	r18,4080
  800b68:	00001006 	br	800bac <de0_vga_init+0x364>
			color = 0xFF0;
		else if (x < 319)
  800b6c:	a8ffffcc 	andi	r3,r21,65535
  800b70:	00804f84 	movi	r2,318
  800b74:	10c00236 	bltu	r2,r3,800b80 <de0_vga_init+0x338>
  800b78:	04803c04 	movi	r18,240
  800b7c:	00000b06 	br	800bac <de0_vga_init+0x364>
			color = 0x0F0;
		else if (x < 416)
  800b80:	a8ffffcc 	andi	r3,r21,65535
  800b84:	008067c4 	movi	r2,415
  800b88:	10c00236 	bltu	r2,r3,800b94 <de0_vga_init+0x34c>
  800b8c:	04803fc4 	movi	r18,255
  800b90:	00000606 	br	800bac <de0_vga_init+0x364>
			color = 0x0FF;
		else if (x < 524)
  800b94:	a8ffffcc 	andi	r3,r21,65535
  800b98:	008082c4 	movi	r2,523
  800b9c:	10c00236 	bltu	r2,r3,800ba8 <de0_vga_init+0x360>
  800ba0:	048003c4 	movi	r18,15
  800ba4:	00000106 	br	800bac <de0_vga_init+0x364>
  800ba8:	0483c3c4 	movi	r18,3855
			color = 0x00F;
		else
			color = 0xF0F;
		for (y = 0; y < 5; y++)
			frame_px_w (fb, x, y, color);
  800bac:	213fffcc 	andi	r4,r4,65535
  800bb0:	01400144 	movi	r5,5
  800bb4:	0800e740 	call	800e74 <__umodsi3>
  800bb8:	10bfffcc 	andi	r2,r2,65535
  800bbc:	12000324 	muli	r8,r2,12
  800bc0:	0103ffc4 	movi	r4,4095
  800bc4:	000b883a 	mov	r5,zero
  800bc8:	40bff804 	addi	r2,r8,-32
  800bcc:	10000416 	blt	r2,zero,800be0 <de0_vga_init+0x398>
  800bd0:	2088983a 	sll	r4,r4,r2
  800bd4:	d9001215 	stw	r4,72(sp)
  800bd8:	d9401115 	stw	r5,68(sp)
  800bdc:	00000906 	br	800c04 <de0_vga_init+0x3bc>
  800be0:	2006d07a 	srli	r3,r4,1
  800be4:	008007c4 	movi	r2,31
  800be8:	1205c83a 	sub	r2,r2,r8
  800bec:	1886d83a 	srl	r3,r3,r2
  800bf0:	2a0c983a 	sll	r6,r5,r8
  800bf4:	1984b03a 	or	r2,r3,r6
  800bf8:	d8801215 	stw	r2,72(sp)
  800bfc:	2208983a 	sll	r4,r4,r8
  800c00:	d9001115 	stw	r4,68(sp)
  800c04:	d9401117 	ldw	r5,68(sp)
  800c08:	0160303a 	nor	r16,zero,r5
  800c0c:	d9801217 	ldw	r6,72(sp)
  800c10:	01a2303a 	nor	r17,zero,r6
  800c14:	90bfffcc 	andi	r2,r18,65535
  800c18:	1009883a 	mov	r4,r2
  800c1c:	0083ffc4 	movi	r2,4095
  800c20:	208c703a 	and	r6,r4,r2
  800c24:	000f883a 	mov	r7,zero
  800c28:	40bff804 	addi	r2,r8,-32
  800c2c:	10000516 	blt	r2,zero,800c44 <de0_vga_init+0x3fc>
  800c30:	308c983a 	sll	r6,r6,r2
  800c34:	d9801015 	stw	r6,64(sp)
  800c38:	0005883a 	mov	r2,zero
  800c3c:	d8800f15 	stw	r2,60(sp)
  800c40:	00000906 	br	800c68 <de0_vga_init+0x420>
  800c44:	3006d07a 	srli	r3,r6,1
  800c48:	008007c4 	movi	r2,31
  800c4c:	1205c83a 	sub	r2,r2,r8
  800c50:	1886d83a 	srl	r3,r3,r2
  800c54:	3a0a983a 	sll	r5,r7,r8
  800c58:	1944b03a 	or	r2,r3,r5
  800c5c:	d8801015 	stw	r2,64(sp)
  800c60:	320c983a 	sll	r6,r6,r8
  800c64:	d9800f15 	stw	r6,60(sp)
  800c68:	0025883a 	mov	r18,zero
  800c6c:	04c0a004 	movi	r19,640
  800c70:	05032004 	movi	r20,3200
  800c74:	9549883a 	add	r4,r18,r21
  800c78:	01400144 	movi	r5,5
  800c7c:	0800dac0 	call	800dac <__divsi3>
  800c80:	100490fa 	slli	r2,r2,3
  800c84:	b0c00017 	ldw	r3,0(r22)
  800c88:	10c5883a 	add	r2,r2,r3
  800c8c:	11400017 	ldw	r5,0(r2)
  800c90:	11800117 	ldw	r6,4(r2)
  800c94:	2c06703a 	and	r3,r5,r16
  800c98:	3448703a 	and	r4,r6,r17
  800c9c:	d9800f17 	ldw	r6,60(sp)
  800ca0:	198ab03a 	or	r5,r3,r6
  800ca4:	11400015 	stw	r5,0(r2)
  800ca8:	d9401017 	ldw	r5,64(sp)
  800cac:	2146b03a 	or	r3,r4,r5
  800cb0:	10c00115 	stw	r3,4(r2)
  800cb4:	94e5883a 	add	r18,r18,r19
			color = 0x0FF;
		else if (x < 524)
			color = 0x00F;
		else
			color = 0xF0F;
		for (y = 0; y < 5; y++)
  800cb8:	953fee1e 	bne	r18,r20,800c74 <de0_vga_init+0x42c>
  800cbc:	ad400044 	addi	r21,r21,1
				put_fb_string (fb, buffer, (30 + x*FH_LOGO_WIDTH) + 35, (30 + y*FH_LOGO_HEIGHT) + 4);
			}
		}

	// write color banner to show off 12-Bit color
	for (x = 0; x < DISPLAY_NUM_COLUMNS; x++)
  800cc0:	acff9f1e 	bne	r21,r19,800b40 <de0_vga_init+0x2f8>
  800cc4:	0005883a 	mov	r2,zero
  800cc8:	00000f06 	br	800d08 <de0_vga_init+0x4c0>
  800ccc:	0029883a 	mov	r20,zero
  800cd0:	003f0706 	br	8008f0 <de0_vga_init+0xa8>
  800cd4:	8029883a 	mov	r20,r16
  800cd8:	0025883a 	mov	r18,zero
  800cdc:	04c00b04 	movi	r19,44
  800ce0:	003f3a06 	br	8009cc <de0_vga_init+0x184>
	put_frame_buffer (fb, fh_logo, FH_LOGO_WIDTH, FH_LOGO_HEIGHT, 20, 30);
	for (y = 0; y < 5; y++)
		for (x = 0; x < 5; x++)
		{
			if (!(y == 4 && x > 2))
				put_frame_buffer (fb, fh_logo, FH_LOGO_WIDTH, FH_LOGO_HEIGHT, (20 + (x+2)*FH_LOGO_WIDTH), (30 + y*FH_LOGO_HEIGHT));
  800ce4:	dcc00015 	stw	r19,0(sp)
  800ce8:	dd000115 	stw	r20,4(sp)
  800cec:	b009883a 	mov	r4,r22
  800cf0:	01402074 	movhi	r5,129
  800cf4:	29779204 	addi	r5,r5,-8632
  800cf8:	01800304 	movi	r6,12
  800cfc:	01c00344 	movi	r7,13
  800d00:	08003140 	call	800314 <put_frame_buffer>
  800d04:	003f8506 	br	800b1c <de0_vga_init+0x2d4>
			frame_px_w (fb, x, y, color);
	}

	// TODO Write the frame buffer base address into the hardware register and set go bit (not yet possible)
	return 0;
}
  800d08:	dfc01a17 	ldw	ra,104(sp)
  800d0c:	dd801917 	ldw	r22,100(sp)
  800d10:	dd401817 	ldw	r21,96(sp)
  800d14:	dd001717 	ldw	r20,92(sp)
  800d18:	dcc01617 	ldw	r19,88(sp)
  800d1c:	dc801517 	ldw	r18,84(sp)
  800d20:	dc401417 	ldw	r17,80(sp)
  800d24:	dc001317 	ldw	r16,76(sp)
  800d28:	dec01b04 	addi	sp,sp,108
  800d2c:	f800283a 	ret

00800d30 <udivmodsi4>:
  800d30:	29001b2e 	bgeu	r5,r4,800da0 <udivmodsi4+0x70>
  800d34:	28001a16 	blt	r5,zero,800da0 <udivmodsi4+0x70>
  800d38:	00800044 	movi	r2,1
  800d3c:	0007883a 	mov	r3,zero
  800d40:	01c007c4 	movi	r7,31
  800d44:	00000306 	br	800d54 <udivmodsi4+0x24>
  800d48:	19c01326 	beq	r3,r7,800d98 <udivmodsi4+0x68>
  800d4c:	18c00044 	addi	r3,r3,1
  800d50:	28000416 	blt	r5,zero,800d64 <udivmodsi4+0x34>
  800d54:	294b883a 	add	r5,r5,r5
  800d58:	1085883a 	add	r2,r2,r2
  800d5c:	293ffa36 	bltu	r5,r4,800d48 <udivmodsi4+0x18>
  800d60:	10000d26 	beq	r2,zero,800d98 <udivmodsi4+0x68>
  800d64:	0007883a 	mov	r3,zero
  800d68:	21400236 	bltu	r4,r5,800d74 <udivmodsi4+0x44>
  800d6c:	2149c83a 	sub	r4,r4,r5
  800d70:	1886b03a 	or	r3,r3,r2
  800d74:	1004d07a 	srli	r2,r2,1
  800d78:	280ad07a 	srli	r5,r5,1
  800d7c:	103ffa1e 	bne	r2,zero,800d68 <udivmodsi4+0x38>
  800d80:	30000226 	beq	r6,zero,800d8c <udivmodsi4+0x5c>
  800d84:	2005883a 	mov	r2,r4
  800d88:	f800283a 	ret
  800d8c:	1809883a 	mov	r4,r3
  800d90:	2005883a 	mov	r2,r4
  800d94:	f800283a 	ret
  800d98:	0007883a 	mov	r3,zero
  800d9c:	003ff806 	br	800d80 <udivmodsi4+0x50>
  800da0:	00800044 	movi	r2,1
  800da4:	0007883a 	mov	r3,zero
  800da8:	003fef06 	br	800d68 <udivmodsi4+0x38>

00800dac <__divsi3>:
  800dac:	defffe04 	addi	sp,sp,-8
  800db0:	dc000015 	stw	r16,0(sp)
  800db4:	dfc00115 	stw	ra,4(sp)
  800db8:	0021883a 	mov	r16,zero
  800dbc:	20000c16 	blt	r4,zero,800df0 <__divsi3+0x44>
  800dc0:	000d883a 	mov	r6,zero
  800dc4:	28000e16 	blt	r5,zero,800e00 <__divsi3+0x54>
  800dc8:	0800d300 	call	800d30 <udivmodsi4>
  800dcc:	1007883a 	mov	r3,r2
  800dd0:	8005003a 	cmpeq	r2,r16,zero
  800dd4:	1000011e 	bne	r2,zero,800ddc <__divsi3+0x30>
  800dd8:	00c7c83a 	sub	r3,zero,r3
  800ddc:	1805883a 	mov	r2,r3
  800de0:	dfc00117 	ldw	ra,4(sp)
  800de4:	dc000017 	ldw	r16,0(sp)
  800de8:	dec00204 	addi	sp,sp,8
  800dec:	f800283a 	ret
  800df0:	0109c83a 	sub	r4,zero,r4
  800df4:	04000044 	movi	r16,1
  800df8:	000d883a 	mov	r6,zero
  800dfc:	283ff20e 	bge	r5,zero,800dc8 <__divsi3+0x1c>
  800e00:	014bc83a 	sub	r5,zero,r5
  800e04:	8021003a 	cmpeq	r16,r16,zero
  800e08:	003fef06 	br	800dc8 <__divsi3+0x1c>

00800e0c <__modsi3>:
  800e0c:	deffff04 	addi	sp,sp,-4
  800e10:	dfc00015 	stw	ra,0(sp)
  800e14:	01800044 	movi	r6,1
  800e18:	2807883a 	mov	r3,r5
  800e1c:	20000416 	blt	r4,zero,800e30 <__modsi3+0x24>
  800e20:	28000c16 	blt	r5,zero,800e54 <__modsi3+0x48>
  800e24:	dfc00017 	ldw	ra,0(sp)
  800e28:	dec00104 	addi	sp,sp,4
  800e2c:	0800d301 	jmpi	800d30 <udivmodsi4>
  800e30:	0109c83a 	sub	r4,zero,r4
  800e34:	28000b16 	blt	r5,zero,800e64 <__modsi3+0x58>
  800e38:	180b883a 	mov	r5,r3
  800e3c:	01800044 	movi	r6,1
  800e40:	0800d300 	call	800d30 <udivmodsi4>
  800e44:	0085c83a 	sub	r2,zero,r2
  800e48:	dfc00017 	ldw	ra,0(sp)
  800e4c:	dec00104 	addi	sp,sp,4
  800e50:	f800283a 	ret
  800e54:	014bc83a 	sub	r5,zero,r5
  800e58:	dfc00017 	ldw	ra,0(sp)
  800e5c:	dec00104 	addi	sp,sp,4
  800e60:	0800d301 	jmpi	800d30 <udivmodsi4>
  800e64:	0147c83a 	sub	r3,zero,r5
  800e68:	003ff306 	br	800e38 <__modsi3+0x2c>

00800e6c <__udivsi3>:
  800e6c:	000d883a 	mov	r6,zero
  800e70:	0800d301 	jmpi	800d30 <udivmodsi4>

00800e74 <__umodsi3>:
  800e74:	01800044 	movi	r6,1
  800e78:	0800d301 	jmpi	800d30 <udivmodsi4>

00800e7c <_fgets_r>:
  800e7c:	defff804 	addi	sp,sp,-32
  800e80:	00800044 	movi	r2,1
  800e84:	dd800615 	stw	r22,24(sp)
  800e88:	dd400515 	stw	r21,20(sp)
  800e8c:	dc400115 	stw	r17,4(sp)
  800e90:	dc000015 	stw	r16,0(sp)
  800e94:	dfc00715 	stw	ra,28(sp)
  800e98:	dd000415 	stw	r20,16(sp)
  800e9c:	dcc00315 	stw	r19,12(sp)
  800ea0:	dc800215 	stw	r18,8(sp)
  800ea4:	3021883a 	mov	r16,r6
  800ea8:	282d883a 	mov	r22,r5
  800eac:	3823883a 	mov	r17,r7
  800eb0:	202b883a 	mov	r21,r4
  800eb4:	1180410e 	bge	r2,r6,800fbc <_fgets_r+0x140>
  800eb8:	20000226 	beq	r4,zero,800ec4 <_fgets_r+0x48>
  800ebc:	20800e17 	ldw	r2,56(r4)
  800ec0:	10002e26 	beq	r2,zero,800f7c <_fgets_r+0x100>
  800ec4:	853fffc4 	addi	r20,r16,-1
  800ec8:	b027883a 	mov	r19,r22
  800ecc:	88800117 	ldw	r2,4(r17)
  800ed0:	a809883a 	mov	r4,r21
  800ed4:	880b883a 	mov	r5,r17
  800ed8:	100d883a 	mov	r6,r2
  800edc:	1000031e 	bne	r2,zero,800eec <_fgets_r+0x70>
  800ee0:	0801ed80 	call	801ed8 <__srefill_r>
  800ee4:	1000341e 	bne	r2,zero,800fb8 <_fgets_r+0x13c>
  800ee8:	89800117 	ldw	r6,4(r17)
  800eec:	01400284 	movi	r5,10
  800ef0:	3021883a 	mov	r16,r6
  800ef4:	8c800017 	ldw	r18,0(r17)
  800ef8:	a180012e 	bgeu	r20,r6,800f00 <_fgets_r+0x84>
  800efc:	a021883a 	mov	r16,r20
  800f00:	9009883a 	mov	r4,r18
  800f04:	800d883a 	mov	r6,r16
  800f08:	0801b900 	call	801b90 <memchr>
  800f0c:	1007883a 	mov	r3,r2
  800f10:	900b883a 	mov	r5,r18
  800f14:	9809883a 	mov	r4,r19
  800f18:	800d883a 	mov	r6,r16
  800f1c:	1000191e 	bne	r2,zero,800f84 <_fgets_r+0x108>
  800f20:	88800117 	ldw	r2,4(r17)
  800f24:	88c00017 	ldw	r3,0(r17)
  800f28:	9c27883a 	add	r19,r19,r16
  800f2c:	1405c83a 	sub	r2,r2,r16
  800f30:	1c07883a 	add	r3,r3,r16
  800f34:	88c00015 	stw	r3,0(r17)
  800f38:	88800115 	stw	r2,4(r17)
  800f3c:	0801c740 	call	801c74 <memcpy>
  800f40:	a407c83a 	sub	r3,r20,r16
  800f44:	1829883a 	mov	r20,r3
  800f48:	183fe01e 	bne	r3,zero,800ecc <_fgets_r+0x50>
  800f4c:	98000005 	stb	zero,0(r19)
  800f50:	b005883a 	mov	r2,r22
  800f54:	dfc00717 	ldw	ra,28(sp)
  800f58:	dd800617 	ldw	r22,24(sp)
  800f5c:	dd400517 	ldw	r21,20(sp)
  800f60:	dd000417 	ldw	r20,16(sp)
  800f64:	dcc00317 	ldw	r19,12(sp)
  800f68:	dc800217 	ldw	r18,8(sp)
  800f6c:	dc400117 	ldw	r17,4(sp)
  800f70:	dc000017 	ldw	r16,0(sp)
  800f74:	dec00804 	addi	sp,sp,32
  800f78:	f800283a 	ret
  800f7c:	08010500 	call	801050 <__sinit>
  800f80:	003fd006 	br	800ec4 <_fgets_r+0x48>
  800f84:	88800117 	ldw	r2,4(r17)
  800f88:	18c00044 	addi	r3,r3,1
  800f8c:	1ca1c83a 	sub	r16,r3,r18
  800f90:	1405c83a 	sub	r2,r2,r16
  800f94:	800d883a 	mov	r6,r16
  800f98:	88c00015 	stw	r3,0(r17)
  800f9c:	88800115 	stw	r2,4(r17)
  800fa0:	900b883a 	mov	r5,r18
  800fa4:	9809883a 	mov	r4,r19
  800fa8:	0801c740 	call	801c74 <memcpy>
  800fac:	9c21883a 	add	r16,r19,r16
  800fb0:	80000005 	stb	zero,0(r16)
  800fb4:	003fe606 	br	800f50 <_fgets_r+0xd4>
  800fb8:	9dbfe41e 	bne	r19,r22,800f4c <_fgets_r+0xd0>
  800fbc:	002d883a 	mov	r22,zero
  800fc0:	003fe306 	br	800f50 <_fgets_r+0xd4>

00800fc4 <fgets>:
  800fc4:	00802074 	movhi	r2,129
  800fc8:	10be6704 	addi	r2,r2,-1636
  800fcc:	2013883a 	mov	r9,r4
  800fd0:	11000017 	ldw	r4,0(r2)
  800fd4:	2805883a 	mov	r2,r5
  800fd8:	300f883a 	mov	r7,r6
  800fdc:	480b883a 	mov	r5,r9
  800fe0:	100d883a 	mov	r6,r2
  800fe4:	0800e7c1 	jmpi	800e7c <_fgets_r>

00800fe8 <std>:
  800fe8:	00802034 	movhi	r2,128
  800fec:	10884a04 	addi	r2,r2,8488
  800ff0:	20800b15 	stw	r2,44(r4)
  800ff4:	00802034 	movhi	r2,128
  800ff8:	10888504 	addi	r2,r2,8724
  800ffc:	20800815 	stw	r2,32(r4)
  801000:	00c02034 	movhi	r3,128
  801004:	18c86604 	addi	r3,r3,8600
  801008:	00802034 	movhi	r2,128
  80100c:	10884c04 	addi	r2,r2,8496
  801010:	2140030d 	sth	r5,12(r4)
  801014:	2180038d 	sth	r6,14(r4)
  801018:	20c00915 	stw	r3,36(r4)
  80101c:	20800a15 	stw	r2,40(r4)
  801020:	20000015 	stw	zero,0(r4)
  801024:	20000115 	stw	zero,4(r4)
  801028:	20000215 	stw	zero,8(r4)
  80102c:	20000415 	stw	zero,16(r4)
  801030:	20000515 	stw	zero,20(r4)
  801034:	20000615 	stw	zero,24(r4)
  801038:	21000715 	stw	r4,28(r4)
  80103c:	f800283a 	ret

00801040 <__sfp_lock_acquire>:
  801040:	f800283a 	ret

00801044 <__sfp_lock_release>:
  801044:	f800283a 	ret

00801048 <__sinit_lock_acquire>:
  801048:	f800283a 	ret

0080104c <__sinit_lock_release>:
  80104c:	f800283a 	ret

00801050 <__sinit>:
  801050:	20800e17 	ldw	r2,56(r4)
  801054:	defffd04 	addi	sp,sp,-12
  801058:	dc400115 	stw	r17,4(sp)
  80105c:	dc000015 	stw	r16,0(sp)
  801060:	dfc00215 	stw	ra,8(sp)
  801064:	04400044 	movi	r17,1
  801068:	01400104 	movi	r5,4
  80106c:	000d883a 	mov	r6,zero
  801070:	2021883a 	mov	r16,r4
  801074:	2200bb04 	addi	r8,r4,748
  801078:	200f883a 	mov	r7,r4
  80107c:	10000526 	beq	r2,zero,801094 <__sinit+0x44>
  801080:	dfc00217 	ldw	ra,8(sp)
  801084:	dc400117 	ldw	r17,4(sp)
  801088:	dc000017 	ldw	r16,0(sp)
  80108c:	dec00304 	addi	sp,sp,12
  801090:	f800283a 	ret
  801094:	21000117 	ldw	r4,4(r4)
  801098:	00802034 	movhi	r2,128
  80109c:	10844d04 	addi	r2,r2,4404
  8010a0:	00c000c4 	movi	r3,3
  8010a4:	80800f15 	stw	r2,60(r16)
  8010a8:	80c0b915 	stw	r3,740(r16)
  8010ac:	8200ba15 	stw	r8,744(r16)
  8010b0:	84400e15 	stw	r17,56(r16)
  8010b4:	8000b815 	stw	zero,736(r16)
  8010b8:	0800fe80 	call	800fe8 <std>
  8010bc:	81000217 	ldw	r4,8(r16)
  8010c0:	880d883a 	mov	r6,r17
  8010c4:	800f883a 	mov	r7,r16
  8010c8:	01400284 	movi	r5,10
  8010cc:	0800fe80 	call	800fe8 <std>
  8010d0:	81000317 	ldw	r4,12(r16)
  8010d4:	800f883a 	mov	r7,r16
  8010d8:	01400484 	movi	r5,18
  8010dc:	01800084 	movi	r6,2
  8010e0:	dfc00217 	ldw	ra,8(sp)
  8010e4:	dc400117 	ldw	r17,4(sp)
  8010e8:	dc000017 	ldw	r16,0(sp)
  8010ec:	dec00304 	addi	sp,sp,12
  8010f0:	0800fe81 	jmpi	800fe8 <std>

008010f4 <__fp_lock>:
  8010f4:	0005883a 	mov	r2,zero
  8010f8:	f800283a 	ret

008010fc <__fp_unlock>:
  8010fc:	0005883a 	mov	r2,zero
  801100:	f800283a 	ret

00801104 <__fp_unlock_all>:
  801104:	00802074 	movhi	r2,129
  801108:	10be6704 	addi	r2,r2,-1636
  80110c:	11000017 	ldw	r4,0(r2)
  801110:	01402034 	movhi	r5,128
  801114:	29443f04 	addi	r5,r5,4348
  801118:	08013701 	jmpi	801370 <_fwalk>

0080111c <__fp_lock_all>:
  80111c:	00802074 	movhi	r2,129
  801120:	10be6704 	addi	r2,r2,-1636
  801124:	11000017 	ldw	r4,0(r2)
  801128:	01402034 	movhi	r5,128
  80112c:	29443d04 	addi	r5,r5,4340
  801130:	08013701 	jmpi	801370 <_fwalk>

00801134 <_cleanup_r>:
  801134:	01402034 	movhi	r5,128
  801138:	29574404 	addi	r5,r5,23824
  80113c:	08013701 	jmpi	801370 <_fwalk>

00801140 <_cleanup>:
  801140:	00802074 	movhi	r2,129
  801144:	10be6804 	addi	r2,r2,-1632
  801148:	11000017 	ldw	r4,0(r2)
  80114c:	08011341 	jmpi	801134 <_cleanup_r>

00801150 <__sfmoreglue>:
  801150:	defffc04 	addi	sp,sp,-16
  801154:	dc400115 	stw	r17,4(sp)
  801158:	2c401724 	muli	r17,r5,92
  80115c:	dc800215 	stw	r18,8(sp)
  801160:	2825883a 	mov	r18,r5
  801164:	89400304 	addi	r5,r17,12
  801168:	dc000015 	stw	r16,0(sp)
  80116c:	dfc00315 	stw	ra,12(sp)
  801170:	08014500 	call	801450 <_malloc_r>
  801174:	0021883a 	mov	r16,zero
  801178:	880d883a 	mov	r6,r17
  80117c:	000b883a 	mov	r5,zero
  801180:	10000626 	beq	r2,zero,80119c <__sfmoreglue+0x4c>
  801184:	11000304 	addi	r4,r2,12
  801188:	14800115 	stw	r18,4(r2)
  80118c:	10000015 	stw	zero,0(r2)
  801190:	11000215 	stw	r4,8(r2)
  801194:	1021883a 	mov	r16,r2
  801198:	0801d140 	call	801d14 <memset>
  80119c:	8005883a 	mov	r2,r16
  8011a0:	dfc00317 	ldw	ra,12(sp)
  8011a4:	dc800217 	ldw	r18,8(sp)
  8011a8:	dc400117 	ldw	r17,4(sp)
  8011ac:	dc000017 	ldw	r16,0(sp)
  8011b0:	dec00404 	addi	sp,sp,16
  8011b4:	f800283a 	ret

008011b8 <__sfp>:
  8011b8:	defffd04 	addi	sp,sp,-12
  8011bc:	00802074 	movhi	r2,129
  8011c0:	10be6804 	addi	r2,r2,-1632
  8011c4:	dc000015 	stw	r16,0(sp)
  8011c8:	14000017 	ldw	r16,0(r2)
  8011cc:	dc400115 	stw	r17,4(sp)
  8011d0:	dfc00215 	stw	ra,8(sp)
  8011d4:	80800e17 	ldw	r2,56(r16)
  8011d8:	2023883a 	mov	r17,r4
  8011dc:	10002626 	beq	r2,zero,801278 <__sfp+0xc0>
  8011e0:	8400b804 	addi	r16,r16,736
  8011e4:	80800117 	ldw	r2,4(r16)
  8011e8:	81000217 	ldw	r4,8(r16)
  8011ec:	10ffffc4 	addi	r3,r2,-1
  8011f0:	18000916 	blt	r3,zero,801218 <__sfp+0x60>
  8011f4:	2080030f 	ldh	r2,12(r4)
  8011f8:	10000b26 	beq	r2,zero,801228 <__sfp+0x70>
  8011fc:	017fffc4 	movi	r5,-1
  801200:	00000206 	br	80120c <__sfp+0x54>
  801204:	2080030f 	ldh	r2,12(r4)
  801208:	10000726 	beq	r2,zero,801228 <__sfp+0x70>
  80120c:	18ffffc4 	addi	r3,r3,-1
  801210:	21001704 	addi	r4,r4,92
  801214:	197ffb1e 	bne	r3,r5,801204 <__sfp+0x4c>
  801218:	80800017 	ldw	r2,0(r16)
  80121c:	10001926 	beq	r2,zero,801284 <__sfp+0xcc>
  801220:	1021883a 	mov	r16,r2
  801224:	003fef06 	br	8011e4 <__sfp+0x2c>
  801228:	00bfffc4 	movi	r2,-1
  80122c:	00c00044 	movi	r3,1
  801230:	2080038d 	sth	r2,14(r4)
  801234:	20c0030d 	sth	r3,12(r4)
  801238:	20000015 	stw	zero,0(r4)
  80123c:	20000215 	stw	zero,8(r4)
  801240:	20000115 	stw	zero,4(r4)
  801244:	20000415 	stw	zero,16(r4)
  801248:	20000515 	stw	zero,20(r4)
  80124c:	20000615 	stw	zero,24(r4)
  801250:	20000c15 	stw	zero,48(r4)
  801254:	20000d15 	stw	zero,52(r4)
  801258:	20001115 	stw	zero,68(r4)
  80125c:	20001215 	stw	zero,72(r4)
  801260:	2005883a 	mov	r2,r4
  801264:	dfc00217 	ldw	ra,8(sp)
  801268:	dc400117 	ldw	r17,4(sp)
  80126c:	dc000017 	ldw	r16,0(sp)
  801270:	dec00304 	addi	sp,sp,12
  801274:	f800283a 	ret
  801278:	8009883a 	mov	r4,r16
  80127c:	08010500 	call	801050 <__sinit>
  801280:	003fd706 	br	8011e0 <__sfp+0x28>
  801284:	8809883a 	mov	r4,r17
  801288:	01400104 	movi	r5,4
  80128c:	08011500 	call	801150 <__sfmoreglue>
  801290:	80800015 	stw	r2,0(r16)
  801294:	103fe21e 	bne	r2,zero,801220 <__sfp+0x68>
  801298:	00800304 	movi	r2,12
  80129c:	0009883a 	mov	r4,zero
  8012a0:	88800015 	stw	r2,0(r17)
  8012a4:	003fee06 	br	801260 <__sfp+0xa8>

008012a8 <_fwalk_reent>:
  8012a8:	defff704 	addi	sp,sp,-36
  8012ac:	dcc00315 	stw	r19,12(sp)
  8012b0:	24c0b804 	addi	r19,r4,736
  8012b4:	dd800615 	stw	r22,24(sp)
  8012b8:	dd400515 	stw	r21,20(sp)
  8012bc:	dfc00815 	stw	ra,32(sp)
  8012c0:	ddc00715 	stw	r23,28(sp)
  8012c4:	dd000415 	stw	r20,16(sp)
  8012c8:	dc800215 	stw	r18,8(sp)
  8012cc:	dc400115 	stw	r17,4(sp)
  8012d0:	dc000015 	stw	r16,0(sp)
  8012d4:	202b883a 	mov	r21,r4
  8012d8:	282d883a 	mov	r22,r5
  8012dc:	08010400 	call	801040 <__sfp_lock_acquire>
  8012e0:	98002126 	beq	r19,zero,801368 <_fwalk_reent+0xc0>
  8012e4:	002f883a 	mov	r23,zero
  8012e8:	9c800117 	ldw	r18,4(r19)
  8012ec:	9c000217 	ldw	r16,8(r19)
  8012f0:	90bfffc4 	addi	r2,r18,-1
  8012f4:	10000d16 	blt	r2,zero,80132c <_fwalk_reent+0x84>
  8012f8:	0023883a 	mov	r17,zero
  8012fc:	053fffc4 	movi	r20,-1
  801300:	8080030f 	ldh	r2,12(r16)
  801304:	8c400044 	addi	r17,r17,1
  801308:	10000626 	beq	r2,zero,801324 <_fwalk_reent+0x7c>
  80130c:	8080038f 	ldh	r2,14(r16)
  801310:	800b883a 	mov	r5,r16
  801314:	a809883a 	mov	r4,r21
  801318:	15000226 	beq	r2,r20,801324 <_fwalk_reent+0x7c>
  80131c:	b03ee83a 	callr	r22
  801320:	b8aeb03a 	or	r23,r23,r2
  801324:	84001704 	addi	r16,r16,92
  801328:	947ff51e 	bne	r18,r17,801300 <_fwalk_reent+0x58>
  80132c:	9cc00017 	ldw	r19,0(r19)
  801330:	983fed1e 	bne	r19,zero,8012e8 <_fwalk_reent+0x40>
  801334:	08010440 	call	801044 <__sfp_lock_release>
  801338:	b805883a 	mov	r2,r23
  80133c:	dfc00817 	ldw	ra,32(sp)
  801340:	ddc00717 	ldw	r23,28(sp)
  801344:	dd800617 	ldw	r22,24(sp)
  801348:	dd400517 	ldw	r21,20(sp)
  80134c:	dd000417 	ldw	r20,16(sp)
  801350:	dcc00317 	ldw	r19,12(sp)
  801354:	dc800217 	ldw	r18,8(sp)
  801358:	dc400117 	ldw	r17,4(sp)
  80135c:	dc000017 	ldw	r16,0(sp)
  801360:	dec00904 	addi	sp,sp,36
  801364:	f800283a 	ret
  801368:	002f883a 	mov	r23,zero
  80136c:	003ff106 	br	801334 <_fwalk_reent+0x8c>

00801370 <_fwalk>:
  801370:	defff804 	addi	sp,sp,-32
  801374:	dcc00315 	stw	r19,12(sp)
  801378:	24c0b804 	addi	r19,r4,736
  80137c:	dd400515 	stw	r21,20(sp)
  801380:	dfc00715 	stw	ra,28(sp)
  801384:	dd800615 	stw	r22,24(sp)
  801388:	dd000415 	stw	r20,16(sp)
  80138c:	dc800215 	stw	r18,8(sp)
  801390:	dc400115 	stw	r17,4(sp)
  801394:	dc000015 	stw	r16,0(sp)
  801398:	282b883a 	mov	r21,r5
  80139c:	08010400 	call	801040 <__sfp_lock_acquire>
  8013a0:	98001f26 	beq	r19,zero,801420 <_fwalk+0xb0>
  8013a4:	002d883a 	mov	r22,zero
  8013a8:	9c800117 	ldw	r18,4(r19)
  8013ac:	9c000217 	ldw	r16,8(r19)
  8013b0:	90bfffc4 	addi	r2,r18,-1
  8013b4:	10000c16 	blt	r2,zero,8013e8 <_fwalk+0x78>
  8013b8:	0023883a 	mov	r17,zero
  8013bc:	053fffc4 	movi	r20,-1
  8013c0:	8080030f 	ldh	r2,12(r16)
  8013c4:	8c400044 	addi	r17,r17,1
  8013c8:	10000526 	beq	r2,zero,8013e0 <_fwalk+0x70>
  8013cc:	8080038f 	ldh	r2,14(r16)
  8013d0:	8009883a 	mov	r4,r16
  8013d4:	15000226 	beq	r2,r20,8013e0 <_fwalk+0x70>
  8013d8:	a83ee83a 	callr	r21
  8013dc:	b0acb03a 	or	r22,r22,r2
  8013e0:	84001704 	addi	r16,r16,92
  8013e4:	947ff61e 	bne	r18,r17,8013c0 <_fwalk+0x50>
  8013e8:	9cc00017 	ldw	r19,0(r19)
  8013ec:	983fee1e 	bne	r19,zero,8013a8 <_fwalk+0x38>
  8013f0:	08010440 	call	801044 <__sfp_lock_release>
  8013f4:	b005883a 	mov	r2,r22
  8013f8:	dfc00717 	ldw	ra,28(sp)
  8013fc:	dd800617 	ldw	r22,24(sp)
  801400:	dd400517 	ldw	r21,20(sp)
  801404:	dd000417 	ldw	r20,16(sp)
  801408:	dcc00317 	ldw	r19,12(sp)
  80140c:	dc800217 	ldw	r18,8(sp)
  801410:	dc400117 	ldw	r17,4(sp)
  801414:	dc000017 	ldw	r16,0(sp)
  801418:	dec00804 	addi	sp,sp,32
  80141c:	f800283a 	ret
  801420:	002d883a 	mov	r22,zero
  801424:	003ff206 	br	8013f0 <_fwalk+0x80>

00801428 <free>:
  801428:	00802074 	movhi	r2,129
  80142c:	10be6704 	addi	r2,r2,-1636
  801430:	200b883a 	mov	r5,r4
  801434:	11000017 	ldw	r4,0(r2)
  801438:	08060801 	jmpi	806080 <_free_r>

0080143c <malloc>:
  80143c:	00802074 	movhi	r2,129
  801440:	10be6704 	addi	r2,r2,-1636
  801444:	200b883a 	mov	r5,r4
  801448:	11000017 	ldw	r4,0(r2)
  80144c:	08014501 	jmpi	801450 <_malloc_r>

00801450 <_malloc_r>:
  801450:	defff604 	addi	sp,sp,-40
  801454:	28c002c4 	addi	r3,r5,11
  801458:	00800584 	movi	r2,22
  80145c:	dc800215 	stw	r18,8(sp)
  801460:	dfc00915 	stw	ra,36(sp)
  801464:	df000815 	stw	fp,32(sp)
  801468:	ddc00715 	stw	r23,28(sp)
  80146c:	dd800615 	stw	r22,24(sp)
  801470:	dd400515 	stw	r21,20(sp)
  801474:	dd000415 	stw	r20,16(sp)
  801478:	dcc00315 	stw	r19,12(sp)
  80147c:	dc400115 	stw	r17,4(sp)
  801480:	dc000015 	stw	r16,0(sp)
  801484:	2025883a 	mov	r18,r4
  801488:	10c01236 	bltu	r2,r3,8014d4 <_malloc_r+0x84>
  80148c:	04400404 	movi	r17,16
  801490:	8940142e 	bgeu	r17,r5,8014e4 <_malloc_r+0x94>
  801494:	00800304 	movi	r2,12
  801498:	0007883a 	mov	r3,zero
  80149c:	90800015 	stw	r2,0(r18)
  8014a0:	1805883a 	mov	r2,r3
  8014a4:	dfc00917 	ldw	ra,36(sp)
  8014a8:	df000817 	ldw	fp,32(sp)
  8014ac:	ddc00717 	ldw	r23,28(sp)
  8014b0:	dd800617 	ldw	r22,24(sp)
  8014b4:	dd400517 	ldw	r21,20(sp)
  8014b8:	dd000417 	ldw	r20,16(sp)
  8014bc:	dcc00317 	ldw	r19,12(sp)
  8014c0:	dc800217 	ldw	r18,8(sp)
  8014c4:	dc400117 	ldw	r17,4(sp)
  8014c8:	dc000017 	ldw	r16,0(sp)
  8014cc:	dec00a04 	addi	sp,sp,40
  8014d0:	f800283a 	ret
  8014d4:	00bffe04 	movi	r2,-8
  8014d8:	18a2703a 	and	r17,r3,r2
  8014dc:	883fed16 	blt	r17,zero,801494 <_malloc_r+0x44>
  8014e0:	897fec36 	bltu	r17,r5,801494 <_malloc_r+0x44>
  8014e4:	9009883a 	mov	r4,r18
  8014e8:	080ae6c0 	call	80ae6c <__malloc_lock>
  8014ec:	00807dc4 	movi	r2,503
  8014f0:	14402b2e 	bgeu	r2,r17,8015a0 <_malloc_r+0x150>
  8014f4:	8806d27a 	srli	r3,r17,9
  8014f8:	18003f1e 	bne	r3,zero,8015f8 <_malloc_r+0x1a8>
  8014fc:	880cd0fa 	srli	r6,r17,3
  801500:	300490fa 	slli	r2,r6,3
  801504:	02c02074 	movhi	r11,129
  801508:	5af8e004 	addi	r11,r11,-7296
  80150c:	12cb883a 	add	r5,r2,r11
  801510:	2c000317 	ldw	r16,12(r5)
  801514:	580f883a 	mov	r7,r11
  801518:	2c00041e 	bne	r5,r16,80152c <_malloc_r+0xdc>
  80151c:	00000a06 	br	801548 <_malloc_r+0xf8>
  801520:	1800860e 	bge	r3,zero,80173c <_malloc_r+0x2ec>
  801524:	84000317 	ldw	r16,12(r16)
  801528:	2c000726 	beq	r5,r16,801548 <_malloc_r+0xf8>
  80152c:	80800117 	ldw	r2,4(r16)
  801530:	00ffff04 	movi	r3,-4
  801534:	10c8703a 	and	r4,r2,r3
  801538:	2447c83a 	sub	r3,r4,r17
  80153c:	008003c4 	movi	r2,15
  801540:	10fff70e 	bge	r2,r3,801520 <_malloc_r+0xd0>
  801544:	31bfffc4 	addi	r6,r6,-1
  801548:	32400044 	addi	r9,r6,1
  80154c:	02802074 	movhi	r10,129
  801550:	52b8e204 	addi	r10,r10,-7288
  801554:	54000217 	ldw	r16,8(r10)
  801558:	8280a026 	beq	r16,r10,8017dc <_malloc_r+0x38c>
  80155c:	80800117 	ldw	r2,4(r16)
  801560:	00ffff04 	movi	r3,-4
  801564:	10ca703a 	and	r5,r2,r3
  801568:	2c4dc83a 	sub	r6,r5,r17
  80156c:	008003c4 	movi	r2,15
  801570:	11808316 	blt	r2,r6,801780 <_malloc_r+0x330>
  801574:	52800315 	stw	r10,12(r10)
  801578:	52800215 	stw	r10,8(r10)
  80157c:	30002916 	blt	r6,zero,801624 <_malloc_r+0x1d4>
  801580:	8147883a 	add	r3,r16,r5
  801584:	18800117 	ldw	r2,4(r3)
  801588:	9009883a 	mov	r4,r18
  80158c:	10800054 	ori	r2,r2,1
  801590:	18800115 	stw	r2,4(r3)
  801594:	080ae8c0 	call	80ae8c <__malloc_unlock>
  801598:	80c00204 	addi	r3,r16,8
  80159c:	003fc006 	br	8014a0 <_malloc_r+0x50>
  8015a0:	02c02074 	movhi	r11,129
  8015a4:	5af8e004 	addi	r11,r11,-7296
  8015a8:	8ac5883a 	add	r2,r17,r11
  8015ac:	14000317 	ldw	r16,12(r2)
  8015b0:	580f883a 	mov	r7,r11
  8015b4:	8806d0fa 	srli	r3,r17,3
  8015b8:	14006c26 	beq	r2,r16,80176c <_malloc_r+0x31c>
  8015bc:	80c00117 	ldw	r3,4(r16)
  8015c0:	00bfff04 	movi	r2,-4
  8015c4:	81800317 	ldw	r6,12(r16)
  8015c8:	1886703a 	and	r3,r3,r2
  8015cc:	80c7883a 	add	r3,r16,r3
  8015d0:	18800117 	ldw	r2,4(r3)
  8015d4:	81400217 	ldw	r5,8(r16)
  8015d8:	9009883a 	mov	r4,r18
  8015dc:	10800054 	ori	r2,r2,1
  8015e0:	18800115 	stw	r2,4(r3)
  8015e4:	31400215 	stw	r5,8(r6)
  8015e8:	29800315 	stw	r6,12(r5)
  8015ec:	080ae8c0 	call	80ae8c <__malloc_unlock>
  8015f0:	80c00204 	addi	r3,r16,8
  8015f4:	003faa06 	br	8014a0 <_malloc_r+0x50>
  8015f8:	00800104 	movi	r2,4
  8015fc:	10c0052e 	bgeu	r2,r3,801614 <_malloc_r+0x1c4>
  801600:	00800504 	movi	r2,20
  801604:	10c07836 	bltu	r2,r3,8017e8 <_malloc_r+0x398>
  801608:	198016c4 	addi	r6,r3,91
  80160c:	300490fa 	slli	r2,r6,3
  801610:	003fbc06 	br	801504 <_malloc_r+0xb4>
  801614:	8804d1ba 	srli	r2,r17,6
  801618:	11800e04 	addi	r6,r2,56
  80161c:	300490fa 	slli	r2,r6,3
  801620:	003fb806 	br	801504 <_malloc_r+0xb4>
  801624:	00807fc4 	movi	r2,511
  801628:	1140bb36 	bltu	r2,r5,801918 <_malloc_r+0x4c8>
  80162c:	2806d0fa 	srli	r3,r5,3
  801630:	573ffe04 	addi	fp,r10,-8
  801634:	00800044 	movi	r2,1
  801638:	180890fa 	slli	r4,r3,3
  80163c:	1807d0ba 	srai	r3,r3,2
  801640:	e1c00117 	ldw	r7,4(fp)
  801644:	5909883a 	add	r4,r11,r4
  801648:	21400217 	ldw	r5,8(r4)
  80164c:	10c4983a 	sll	r2,r2,r3
  801650:	81000315 	stw	r4,12(r16)
  801654:	81400215 	stw	r5,8(r16)
  801658:	388eb03a 	or	r7,r7,r2
  80165c:	2c000315 	stw	r16,12(r5)
  801660:	24000215 	stw	r16,8(r4)
  801664:	e1c00115 	stw	r7,4(fp)
  801668:	4807883a 	mov	r3,r9
  80166c:	4800cd16 	blt	r9,zero,8019a4 <_malloc_r+0x554>
  801670:	1807d0ba 	srai	r3,r3,2
  801674:	00800044 	movi	r2,1
  801678:	10c8983a 	sll	r4,r2,r3
  80167c:	39004436 	bltu	r7,r4,801790 <_malloc_r+0x340>
  801680:	21c4703a 	and	r2,r4,r7
  801684:	10000a1e 	bne	r2,zero,8016b0 <_malloc_r+0x260>
  801688:	2109883a 	add	r4,r4,r4
  80168c:	00bfff04 	movi	r2,-4
  801690:	4884703a 	and	r2,r9,r2
  801694:	3906703a 	and	r3,r7,r4
  801698:	12400104 	addi	r9,r2,4
  80169c:	1800041e 	bne	r3,zero,8016b0 <_malloc_r+0x260>
  8016a0:	2109883a 	add	r4,r4,r4
  8016a4:	3904703a 	and	r2,r7,r4
  8016a8:	4a400104 	addi	r9,r9,4
  8016ac:	103ffc26 	beq	r2,zero,8016a0 <_malloc_r+0x250>
  8016b0:	480490fa 	slli	r2,r9,3
  8016b4:	4819883a 	mov	r12,r9
  8016b8:	023fff04 	movi	r8,-4
  8016bc:	589b883a 	add	r13,r11,r2
  8016c0:	6807883a 	mov	r3,r13
  8016c4:	014003c4 	movi	r5,15
  8016c8:	1c000317 	ldw	r16,12(r3)
  8016cc:	1c00041e 	bne	r3,r16,8016e0 <_malloc_r+0x290>
  8016d0:	0000a706 	br	801970 <_malloc_r+0x520>
  8016d4:	3000ab0e 	bge	r6,zero,801984 <_malloc_r+0x534>
  8016d8:	84000317 	ldw	r16,12(r16)
  8016dc:	1c00a426 	beq	r3,r16,801970 <_malloc_r+0x520>
  8016e0:	80800117 	ldw	r2,4(r16)
  8016e4:	1204703a 	and	r2,r2,r8
  8016e8:	144dc83a 	sub	r6,r2,r17
  8016ec:	29bff90e 	bge	r5,r6,8016d4 <_malloc_r+0x284>
  8016f0:	81000317 	ldw	r4,12(r16)
  8016f4:	80c00217 	ldw	r3,8(r16)
  8016f8:	89400054 	ori	r5,r17,1
  8016fc:	8445883a 	add	r2,r16,r17
  801700:	20c00215 	stw	r3,8(r4)
  801704:	19000315 	stw	r4,12(r3)
  801708:	81400115 	stw	r5,4(r16)
  80170c:	1187883a 	add	r3,r2,r6
  801710:	31000054 	ori	r4,r6,1
  801714:	50800315 	stw	r2,12(r10)
  801718:	50800215 	stw	r2,8(r10)
  80171c:	19800015 	stw	r6,0(r3)
  801720:	11000115 	stw	r4,4(r2)
  801724:	12800215 	stw	r10,8(r2)
  801728:	12800315 	stw	r10,12(r2)
  80172c:	9009883a 	mov	r4,r18
  801730:	080ae8c0 	call	80ae8c <__malloc_unlock>
  801734:	80c00204 	addi	r3,r16,8
  801738:	003f5906 	br	8014a0 <_malloc_r+0x50>
  80173c:	8109883a 	add	r4,r16,r4
  801740:	20800117 	ldw	r2,4(r4)
  801744:	80c00217 	ldw	r3,8(r16)
  801748:	81400317 	ldw	r5,12(r16)
  80174c:	10800054 	ori	r2,r2,1
  801750:	20800115 	stw	r2,4(r4)
  801754:	28c00215 	stw	r3,8(r5)
  801758:	19400315 	stw	r5,12(r3)
  80175c:	9009883a 	mov	r4,r18
  801760:	080ae8c0 	call	80ae8c <__malloc_unlock>
  801764:	80c00204 	addi	r3,r16,8
  801768:	003f4d06 	br	8014a0 <_malloc_r+0x50>
  80176c:	80800204 	addi	r2,r16,8
  801770:	14000317 	ldw	r16,12(r2)
  801774:	143f911e 	bne	r2,r16,8015bc <_malloc_r+0x16c>
  801778:	1a400084 	addi	r9,r3,2
  80177c:	003f7306 	br	80154c <_malloc_r+0xfc>
  801780:	88c00054 	ori	r3,r17,1
  801784:	8445883a 	add	r2,r16,r17
  801788:	80c00115 	stw	r3,4(r16)
  80178c:	003fdf06 	br	80170c <_malloc_r+0x2bc>
  801790:	e4000217 	ldw	r16,8(fp)
  801794:	00bfff04 	movi	r2,-4
  801798:	80c00117 	ldw	r3,4(r16)
  80179c:	802d883a 	mov	r22,r16
  8017a0:	18aa703a 	and	r21,r3,r2
  8017a4:	ac401636 	bltu	r21,r17,801800 <_malloc_r+0x3b0>
  8017a8:	ac49c83a 	sub	r4,r21,r17
  8017ac:	008003c4 	movi	r2,15
  8017b0:	1100130e 	bge	r2,r4,801800 <_malloc_r+0x3b0>
  8017b4:	88800054 	ori	r2,r17,1
  8017b8:	8447883a 	add	r3,r16,r17
  8017bc:	80800115 	stw	r2,4(r16)
  8017c0:	20800054 	ori	r2,r4,1
  8017c4:	18800115 	stw	r2,4(r3)
  8017c8:	e0c00215 	stw	r3,8(fp)
  8017cc:	9009883a 	mov	r4,r18
  8017d0:	080ae8c0 	call	80ae8c <__malloc_unlock>
  8017d4:	80c00204 	addi	r3,r16,8
  8017d8:	003f3106 	br	8014a0 <_malloc_r+0x50>
  8017dc:	39c00117 	ldw	r7,4(r7)
  8017e0:	573ffe04 	addi	fp,r10,-8
  8017e4:	003fa006 	br	801668 <_malloc_r+0x218>
  8017e8:	00801504 	movi	r2,84
  8017ec:	10c06736 	bltu	r2,r3,80198c <_malloc_r+0x53c>
  8017f0:	8804d33a 	srli	r2,r17,12
  8017f4:	11801b84 	addi	r6,r2,110
  8017f8:	300490fa 	slli	r2,r6,3
  8017fc:	003f4106 	br	801504 <_malloc_r+0xb4>
  801800:	d0a8e517 	ldw	r2,-23660(gp)
  801804:	d0e00317 	ldw	r3,-32756(gp)
  801808:	053fffc4 	movi	r20,-1
  80180c:	10800404 	addi	r2,r2,16
  801810:	88a7883a 	add	r19,r17,r2
  801814:	1d000326 	beq	r3,r20,801824 <_malloc_r+0x3d4>
  801818:	98c3ffc4 	addi	r3,r19,4095
  80181c:	00bc0004 	movi	r2,-4096
  801820:	18a6703a 	and	r19,r3,r2
  801824:	9009883a 	mov	r4,r18
  801828:	980b883a 	mov	r5,r19
  80182c:	08020b80 	call	8020b8 <_sbrk_r>
  801830:	1009883a 	mov	r4,r2
  801834:	15000426 	beq	r2,r20,801848 <_malloc_r+0x3f8>
  801838:	854b883a 	add	r5,r16,r21
  80183c:	1029883a 	mov	r20,r2
  801840:	11405a2e 	bgeu	r2,r5,8019ac <_malloc_r+0x55c>
  801844:	87000c26 	beq	r16,fp,801878 <_malloc_r+0x428>
  801848:	e4000217 	ldw	r16,8(fp)
  80184c:	80c00117 	ldw	r3,4(r16)
  801850:	00bfff04 	movi	r2,-4
  801854:	1884703a 	and	r2,r3,r2
  801858:	14400336 	bltu	r2,r17,801868 <_malloc_r+0x418>
  80185c:	1449c83a 	sub	r4,r2,r17
  801860:	008003c4 	movi	r2,15
  801864:	113fd316 	blt	r2,r4,8017b4 <_malloc_r+0x364>
  801868:	9009883a 	mov	r4,r18
  80186c:	080ae8c0 	call	80ae8c <__malloc_unlock>
  801870:	0007883a 	mov	r3,zero
  801874:	003f0a06 	br	8014a0 <_malloc_r+0x50>
  801878:	05c02074 	movhi	r23,129
  80187c:	bdc75904 	addi	r23,r23,7524
  801880:	b8800017 	ldw	r2,0(r23)
  801884:	988d883a 	add	r6,r19,r2
  801888:	b9800015 	stw	r6,0(r23)
  80188c:	d0e00317 	ldw	r3,-32756(gp)
  801890:	00bfffc4 	movi	r2,-1
  801894:	18808e26 	beq	r3,r2,801ad0 <_malloc_r+0x680>
  801898:	2145c83a 	sub	r2,r4,r5
  80189c:	3085883a 	add	r2,r6,r2
  8018a0:	b8800015 	stw	r2,0(r23)
  8018a4:	20c001cc 	andi	r3,r4,7
  8018a8:	18005f1e 	bne	r3,zero,801a28 <_malloc_r+0x5d8>
  8018ac:	000b883a 	mov	r5,zero
  8018b0:	a4c5883a 	add	r2,r20,r19
  8018b4:	1083ffcc 	andi	r2,r2,4095
  8018b8:	00c40004 	movi	r3,4096
  8018bc:	1887c83a 	sub	r3,r3,r2
  8018c0:	28e7883a 	add	r19,r5,r3
  8018c4:	9009883a 	mov	r4,r18
  8018c8:	980b883a 	mov	r5,r19
  8018cc:	08020b80 	call	8020b8 <_sbrk_r>
  8018d0:	1007883a 	mov	r3,r2
  8018d4:	00bfffc4 	movi	r2,-1
  8018d8:	18807a26 	beq	r3,r2,801ac4 <_malloc_r+0x674>
  8018dc:	1d05c83a 	sub	r2,r3,r20
  8018e0:	9885883a 	add	r2,r19,r2
  8018e4:	10c00054 	ori	r3,r2,1
  8018e8:	b8800017 	ldw	r2,0(r23)
  8018ec:	a021883a 	mov	r16,r20
  8018f0:	a0c00115 	stw	r3,4(r20)
  8018f4:	9885883a 	add	r2,r19,r2
  8018f8:	b8800015 	stw	r2,0(r23)
  8018fc:	e5000215 	stw	r20,8(fp)
  801900:	b7003626 	beq	r22,fp,8019dc <_malloc_r+0x58c>
  801904:	018003c4 	movi	r6,15
  801908:	35404b36 	bltu	r6,r21,801a38 <_malloc_r+0x5e8>
  80190c:	00800044 	movi	r2,1
  801910:	a0800115 	stw	r2,4(r20)
  801914:	003fcd06 	br	80184c <_malloc_r+0x3fc>
  801918:	2808d27a 	srli	r4,r5,9
  80191c:	2000371e 	bne	r4,zero,8019fc <_malloc_r+0x5ac>
  801920:	2808d0fa 	srli	r4,r5,3
  801924:	200690fa 	slli	r3,r4,3
  801928:	1ad1883a 	add	r8,r3,r11
  80192c:	41800217 	ldw	r6,8(r8)
  801930:	41805b26 	beq	r8,r6,801aa0 <_malloc_r+0x650>
  801934:	30800117 	ldw	r2,4(r6)
  801938:	00ffff04 	movi	r3,-4
  80193c:	10c4703a 	and	r2,r2,r3
  801940:	2880022e 	bgeu	r5,r2,80194c <_malloc_r+0x4fc>
  801944:	31800217 	ldw	r6,8(r6)
  801948:	41bffa1e 	bne	r8,r6,801934 <_malloc_r+0x4e4>
  80194c:	32000317 	ldw	r8,12(r6)
  801950:	39c00117 	ldw	r7,4(r7)
  801954:	82000315 	stw	r8,12(r16)
  801958:	81800215 	stw	r6,8(r16)
  80195c:	07002074 	movhi	fp,129
  801960:	e738e004 	addi	fp,fp,-7296
  801964:	34000315 	stw	r16,12(r6)
  801968:	44000215 	stw	r16,8(r8)
  80196c:	003f3e06 	br	801668 <_malloc_r+0x218>
  801970:	63000044 	addi	r12,r12,1
  801974:	608000cc 	andi	r2,r12,3
  801978:	10005d26 	beq	r2,zero,801af0 <_malloc_r+0x6a0>
  80197c:	18c00204 	addi	r3,r3,8
  801980:	003f5106 	br	8016c8 <_malloc_r+0x278>
  801984:	8089883a 	add	r4,r16,r2
  801988:	003f6d06 	br	801740 <_malloc_r+0x2f0>
  80198c:	00805504 	movi	r2,340
  801990:	10c02036 	bltu	r2,r3,801a14 <_malloc_r+0x5c4>
  801994:	8804d3fa 	srli	r2,r17,15
  801998:	11801dc4 	addi	r6,r2,119
  80199c:	300490fa 	slli	r2,r6,3
  8019a0:	003ed806 	br	801504 <_malloc_r+0xb4>
  8019a4:	48c000c4 	addi	r3,r9,3
  8019a8:	003f3106 	br	801670 <_malloc_r+0x220>
  8019ac:	05c02074 	movhi	r23,129
  8019b0:	bdc75904 	addi	r23,r23,7524
  8019b4:	b8800017 	ldw	r2,0(r23)
  8019b8:	988d883a 	add	r6,r19,r2
  8019bc:	b9800015 	stw	r6,0(r23)
  8019c0:	293fb21e 	bne	r5,r4,80188c <_malloc_r+0x43c>
  8019c4:	2083ffcc 	andi	r2,r4,4095
  8019c8:	103fb01e 	bne	r2,zero,80188c <_malloc_r+0x43c>
  8019cc:	e4000217 	ldw	r16,8(fp)
  8019d0:	9d45883a 	add	r2,r19,r21
  8019d4:	10800054 	ori	r2,r2,1
  8019d8:	80800115 	stw	r2,4(r16)
  8019dc:	b8c00017 	ldw	r3,0(r23)
  8019e0:	d0a8e617 	ldw	r2,-23656(gp)
  8019e4:	10c0012e 	bgeu	r2,r3,8019ec <_malloc_r+0x59c>
  8019e8:	d0e8e615 	stw	r3,-23656(gp)
  8019ec:	d0a8e717 	ldw	r2,-23652(gp)
  8019f0:	10ff962e 	bgeu	r2,r3,80184c <_malloc_r+0x3fc>
  8019f4:	d0e8e715 	stw	r3,-23652(gp)
  8019f8:	003f9406 	br	80184c <_malloc_r+0x3fc>
  8019fc:	00800104 	movi	r2,4
  801a00:	11001e36 	bltu	r2,r4,801a7c <_malloc_r+0x62c>
  801a04:	2804d1ba 	srli	r2,r5,6
  801a08:	11000e04 	addi	r4,r2,56
  801a0c:	200690fa 	slli	r3,r4,3
  801a10:	003fc506 	br	801928 <_malloc_r+0x4d8>
  801a14:	00815504 	movi	r2,1364
  801a18:	10c01d2e 	bgeu	r2,r3,801a90 <_malloc_r+0x640>
  801a1c:	01801f84 	movi	r6,126
  801a20:	0080fc04 	movi	r2,1008
  801a24:	003eb706 	br	801504 <_malloc_r+0xb4>
  801a28:	00800204 	movi	r2,8
  801a2c:	10cbc83a 	sub	r5,r2,r3
  801a30:	2169883a 	add	r20,r4,r5
  801a34:	003f9e06 	br	8018b0 <_malloc_r+0x460>
  801a38:	00bffe04 	movi	r2,-8
  801a3c:	a93ffd04 	addi	r4,r21,-12
  801a40:	2088703a 	and	r4,r4,r2
  801a44:	b10b883a 	add	r5,r22,r4
  801a48:	00c00144 	movi	r3,5
  801a4c:	28c00215 	stw	r3,8(r5)
  801a50:	28c00115 	stw	r3,4(r5)
  801a54:	b0800117 	ldw	r2,4(r22)
  801a58:	1080004c 	andi	r2,r2,1
  801a5c:	2084b03a 	or	r2,r4,r2
  801a60:	b0800115 	stw	r2,4(r22)
  801a64:	313fdd2e 	bgeu	r6,r4,8019dc <_malloc_r+0x58c>
  801a68:	b1400204 	addi	r5,r22,8
  801a6c:	9009883a 	mov	r4,r18
  801a70:	08060800 	call	806080 <_free_r>
  801a74:	e4000217 	ldw	r16,8(fp)
  801a78:	003fd806 	br	8019dc <_malloc_r+0x58c>
  801a7c:	00800504 	movi	r2,20
  801a80:	11001536 	bltu	r2,r4,801ad8 <_malloc_r+0x688>
  801a84:	210016c4 	addi	r4,r4,91
  801a88:	200690fa 	slli	r3,r4,3
  801a8c:	003fa606 	br	801928 <_malloc_r+0x4d8>
  801a90:	8804d4ba 	srli	r2,r17,18
  801a94:	11801f04 	addi	r6,r2,124
  801a98:	300490fa 	slli	r2,r6,3
  801a9c:	003e9906 	br	801504 <_malloc_r+0xb4>
  801aa0:	2009d0ba 	srai	r4,r4,2
  801aa4:	01402074 	movhi	r5,129
  801aa8:	2978e004 	addi	r5,r5,-7296
  801aac:	00c00044 	movi	r3,1
  801ab0:	28800117 	ldw	r2,4(r5)
  801ab4:	1906983a 	sll	r3,r3,r4
  801ab8:	10c4b03a 	or	r2,r2,r3
  801abc:	28800115 	stw	r2,4(r5)
  801ac0:	003fa306 	br	801950 <_malloc_r+0x500>
  801ac4:	0027883a 	mov	r19,zero
  801ac8:	00c00044 	movi	r3,1
  801acc:	003f8606 	br	8018e8 <_malloc_r+0x498>
  801ad0:	d1200315 	stw	r4,-32756(gp)
  801ad4:	003f7306 	br	8018a4 <_malloc_r+0x454>
  801ad8:	00801504 	movi	r2,84
  801adc:	11001936 	bltu	r2,r4,801b44 <_malloc_r+0x6f4>
  801ae0:	2804d33a 	srli	r2,r5,12
  801ae4:	11001b84 	addi	r4,r2,110
  801ae8:	200690fa 	slli	r3,r4,3
  801aec:	003f8e06 	br	801928 <_malloc_r+0x4d8>
  801af0:	480b883a 	mov	r5,r9
  801af4:	6807883a 	mov	r3,r13
  801af8:	288000cc 	andi	r2,r5,3
  801afc:	18fffe04 	addi	r3,r3,-8
  801b00:	297fffc4 	addi	r5,r5,-1
  801b04:	10001526 	beq	r2,zero,801b5c <_malloc_r+0x70c>
  801b08:	18800217 	ldw	r2,8(r3)
  801b0c:	10fffa26 	beq	r2,r3,801af8 <_malloc_r+0x6a8>
  801b10:	2109883a 	add	r4,r4,r4
  801b14:	393f1e36 	bltu	r7,r4,801790 <_malloc_r+0x340>
  801b18:	203f1d26 	beq	r4,zero,801790 <_malloc_r+0x340>
  801b1c:	21c4703a 	and	r2,r4,r7
  801b20:	10000226 	beq	r2,zero,801b2c <_malloc_r+0x6dc>
  801b24:	6013883a 	mov	r9,r12
  801b28:	003ee106 	br	8016b0 <_malloc_r+0x260>
  801b2c:	2109883a 	add	r4,r4,r4
  801b30:	3904703a 	and	r2,r7,r4
  801b34:	63000104 	addi	r12,r12,4
  801b38:	103ffc26 	beq	r2,zero,801b2c <_malloc_r+0x6dc>
  801b3c:	6013883a 	mov	r9,r12
  801b40:	003edb06 	br	8016b0 <_malloc_r+0x260>
  801b44:	00805504 	movi	r2,340
  801b48:	11000836 	bltu	r2,r4,801b6c <_malloc_r+0x71c>
  801b4c:	2804d3fa 	srli	r2,r5,15
  801b50:	11001dc4 	addi	r4,r2,119
  801b54:	200690fa 	slli	r3,r4,3
  801b58:	003f7306 	br	801928 <_malloc_r+0x4d8>
  801b5c:	0104303a 	nor	r2,zero,r4
  801b60:	388e703a 	and	r7,r7,r2
  801b64:	e1c00115 	stw	r7,4(fp)
  801b68:	003fe906 	br	801b10 <_malloc_r+0x6c0>
  801b6c:	00815504 	movi	r2,1364
  801b70:	1100032e 	bgeu	r2,r4,801b80 <_malloc_r+0x730>
  801b74:	01001f84 	movi	r4,126
  801b78:	00c0fc04 	movi	r3,1008
  801b7c:	003f6a06 	br	801928 <_malloc_r+0x4d8>
  801b80:	2804d4ba 	srli	r2,r5,18
  801b84:	11001f04 	addi	r4,r2,124
  801b88:	200690fa 	slli	r3,r4,3
  801b8c:	003f6606 	br	801928 <_malloc_r+0x4d8>

00801b90 <memchr>:
  801b90:	008000c4 	movi	r2,3
  801b94:	29403fcc 	andi	r5,r5,255
  801b98:	2007883a 	mov	r3,r4
  801b9c:	1180022e 	bgeu	r2,r6,801ba8 <memchr+0x18>
  801ba0:	2084703a 	and	r2,r4,r2
  801ba4:	10000b26 	beq	r2,zero,801bd4 <memchr+0x44>
  801ba8:	313fffc4 	addi	r4,r6,-1
  801bac:	3000051e 	bne	r6,zero,801bc4 <memchr+0x34>
  801bb0:	00002c06 	br	801c64 <memchr+0xd4>
  801bb4:	213fffc4 	addi	r4,r4,-1
  801bb8:	00bfffc4 	movi	r2,-1
  801bbc:	18c00044 	addi	r3,r3,1
  801bc0:	20802826 	beq	r4,r2,801c64 <memchr+0xd4>
  801bc4:	18800003 	ldbu	r2,0(r3)
  801bc8:	28bffa1e 	bne	r5,r2,801bb4 <memchr+0x24>
  801bcc:	1805883a 	mov	r2,r3
  801bd0:	f800283a 	ret
  801bd4:	0011883a 	mov	r8,zero
  801bd8:	0007883a 	mov	r3,zero
  801bdc:	01c00104 	movi	r7,4
  801be0:	4004923a 	slli	r2,r8,8
  801be4:	18c00044 	addi	r3,r3,1
  801be8:	1151883a 	add	r8,r2,r5
  801bec:	19fffc1e 	bne	r3,r7,801be0 <memchr+0x50>
  801bf0:	02bfbff4 	movhi	r10,65279
  801bf4:	52bfbfc4 	addi	r10,r10,-257
  801bf8:	02602074 	movhi	r9,32897
  801bfc:	4a602004 	addi	r9,r9,-32640
  801c00:	02c000c4 	movi	r11,3
  801c04:	20800017 	ldw	r2,0(r4)
  801c08:	31bfff04 	addi	r6,r6,-4
  801c0c:	200f883a 	mov	r7,r4
  801c10:	1204f03a 	xor	r2,r2,r8
  801c14:	1287883a 	add	r3,r2,r10
  801c18:	1a46703a 	and	r3,r3,r9
  801c1c:	0084303a 	nor	r2,zero,r2
  801c20:	10c4703a 	and	r2,r2,r3
  801c24:	10000b26 	beq	r2,zero,801c54 <memchr+0xc4>
  801c28:	20800003 	ldbu	r2,0(r4)
  801c2c:	28800f26 	beq	r5,r2,801c6c <memchr+0xdc>
  801c30:	20800043 	ldbu	r2,1(r4)
  801c34:	21c00044 	addi	r7,r4,1
  801c38:	28800c26 	beq	r5,r2,801c6c <memchr+0xdc>
  801c3c:	20800083 	ldbu	r2,2(r4)
  801c40:	21c00084 	addi	r7,r4,2
  801c44:	28800926 	beq	r5,r2,801c6c <memchr+0xdc>
  801c48:	208000c3 	ldbu	r2,3(r4)
  801c4c:	21c000c4 	addi	r7,r4,3
  801c50:	28800626 	beq	r5,r2,801c6c <memchr+0xdc>
  801c54:	21000104 	addi	r4,r4,4
  801c58:	59bfea36 	bltu	r11,r6,801c04 <memchr+0x74>
  801c5c:	2007883a 	mov	r3,r4
  801c60:	003fd106 	br	801ba8 <memchr+0x18>
  801c64:	0005883a 	mov	r2,zero
  801c68:	f800283a 	ret
  801c6c:	3805883a 	mov	r2,r7
  801c70:	f800283a 	ret

00801c74 <memcpy>:
  801c74:	01c003c4 	movi	r7,15
  801c78:	2007883a 	mov	r3,r4
  801c7c:	3980032e 	bgeu	r7,r6,801c8c <memcpy+0x18>
  801c80:	2904b03a 	or	r2,r5,r4
  801c84:	108000cc 	andi	r2,r2,3
  801c88:	10000926 	beq	r2,zero,801cb0 <memcpy+0x3c>
  801c8c:	30000626 	beq	r6,zero,801ca8 <memcpy+0x34>
  801c90:	30cd883a 	add	r6,r6,r3
  801c94:	28800003 	ldbu	r2,0(r5)
  801c98:	29400044 	addi	r5,r5,1
  801c9c:	18800005 	stb	r2,0(r3)
  801ca0:	18c00044 	addi	r3,r3,1
  801ca4:	30fffb1e 	bne	r6,r3,801c94 <memcpy+0x20>
  801ca8:	2005883a 	mov	r2,r4
  801cac:	f800283a 	ret
  801cb0:	3811883a 	mov	r8,r7
  801cb4:	200f883a 	mov	r7,r4
  801cb8:	28c00017 	ldw	r3,0(r5)
  801cbc:	31bffc04 	addi	r6,r6,-16
  801cc0:	38c00015 	stw	r3,0(r7)
  801cc4:	28800117 	ldw	r2,4(r5)
  801cc8:	38800115 	stw	r2,4(r7)
  801ccc:	28c00217 	ldw	r3,8(r5)
  801cd0:	38c00215 	stw	r3,8(r7)
  801cd4:	28800317 	ldw	r2,12(r5)
  801cd8:	29400404 	addi	r5,r5,16
  801cdc:	38800315 	stw	r2,12(r7)
  801ce0:	39c00404 	addi	r7,r7,16
  801ce4:	41bff436 	bltu	r8,r6,801cb8 <memcpy+0x44>
  801ce8:	008000c4 	movi	r2,3
  801cec:	1180072e 	bgeu	r2,r6,801d0c <memcpy+0x98>
  801cf0:	1007883a 	mov	r3,r2
  801cf4:	28800017 	ldw	r2,0(r5)
  801cf8:	31bfff04 	addi	r6,r6,-4
  801cfc:	29400104 	addi	r5,r5,4
  801d00:	38800015 	stw	r2,0(r7)
  801d04:	39c00104 	addi	r7,r7,4
  801d08:	19bffa36 	bltu	r3,r6,801cf4 <memcpy+0x80>
  801d0c:	3807883a 	mov	r3,r7
  801d10:	003fde06 	br	801c8c <memcpy+0x18>

00801d14 <memset>:
  801d14:	008000c4 	movi	r2,3
  801d18:	29403fcc 	andi	r5,r5,255
  801d1c:	2007883a 	mov	r3,r4
  801d20:	1180022e 	bgeu	r2,r6,801d2c <memset+0x18>
  801d24:	2084703a 	and	r2,r4,r2
  801d28:	10000826 	beq	r2,zero,801d4c <memset+0x38>
  801d2c:	30000526 	beq	r6,zero,801d44 <memset+0x30>
  801d30:	2805883a 	mov	r2,r5
  801d34:	30cd883a 	add	r6,r6,r3
  801d38:	18800005 	stb	r2,0(r3)
  801d3c:	18c00044 	addi	r3,r3,1
  801d40:	19bffd1e 	bne	r3,r6,801d38 <memset+0x24>
  801d44:	2005883a 	mov	r2,r4
  801d48:	f800283a 	ret
  801d4c:	2804923a 	slli	r2,r5,8
  801d50:	020003c4 	movi	r8,15
  801d54:	200f883a 	mov	r7,r4
  801d58:	2884b03a 	or	r2,r5,r2
  801d5c:	1006943a 	slli	r3,r2,16
  801d60:	10c6b03a 	or	r3,r2,r3
  801d64:	41800a2e 	bgeu	r8,r6,801d90 <memset+0x7c>
  801d68:	4005883a 	mov	r2,r8
  801d6c:	31bffc04 	addi	r6,r6,-16
  801d70:	38c00015 	stw	r3,0(r7)
  801d74:	38c00115 	stw	r3,4(r7)
  801d78:	38c00215 	stw	r3,8(r7)
  801d7c:	38c00315 	stw	r3,12(r7)
  801d80:	39c00404 	addi	r7,r7,16
  801d84:	11bff936 	bltu	r2,r6,801d6c <memset+0x58>
  801d88:	008000c4 	movi	r2,3
  801d8c:	1180052e 	bgeu	r2,r6,801da4 <memset+0x90>
  801d90:	31bfff04 	addi	r6,r6,-4
  801d94:	008000c4 	movi	r2,3
  801d98:	38c00015 	stw	r3,0(r7)
  801d9c:	39c00104 	addi	r7,r7,4
  801da0:	11bffb36 	bltu	r2,r6,801d90 <memset+0x7c>
  801da4:	3807883a 	mov	r3,r7
  801da8:	003fe006 	br	801d2c <memset+0x18>

00801dac <printf>:
  801dac:	defffb04 	addi	sp,sp,-20
  801db0:	dfc00115 	stw	ra,4(sp)
  801db4:	d9400215 	stw	r5,8(sp)
  801db8:	d9800315 	stw	r6,12(sp)
  801dbc:	d9c00415 	stw	r7,16(sp)
  801dc0:	00802074 	movhi	r2,129
  801dc4:	10be6704 	addi	r2,r2,-1636
  801dc8:	10c00017 	ldw	r3,0(r2)
  801dcc:	200b883a 	mov	r5,r4
  801dd0:	d8800204 	addi	r2,sp,8
  801dd4:	19000217 	ldw	r4,8(r3)
  801dd8:	100d883a 	mov	r6,r2
  801ddc:	d8800015 	stw	r2,0(sp)
  801de0:	08041ec0 	call	8041ec <__vfprintf_internal>
  801de4:	dfc00117 	ldw	ra,4(sp)
  801de8:	dec00504 	addi	sp,sp,20
  801dec:	f800283a 	ret

00801df0 <_printf_r>:
  801df0:	defffc04 	addi	sp,sp,-16
  801df4:	dfc00115 	stw	ra,4(sp)
  801df8:	d9800215 	stw	r6,8(sp)
  801dfc:	d9c00315 	stw	r7,12(sp)
  801e00:	280d883a 	mov	r6,r5
  801e04:	21400217 	ldw	r5,8(r4)
  801e08:	d8c00204 	addi	r3,sp,8
  801e0c:	180f883a 	mov	r7,r3
  801e10:	d8c00015 	stw	r3,0(sp)
  801e14:	08023400 	call	802340 <___vfprintf_internal_r>
  801e18:	dfc00117 	ldw	ra,4(sp)
  801e1c:	dec00404 	addi	sp,sp,16
  801e20:	f800283a 	ret

00801e24 <_puts_r>:
  801e24:	defff604 	addi	sp,sp,-40
  801e28:	dc400715 	stw	r17,28(sp)
  801e2c:	2023883a 	mov	r17,r4
  801e30:	2809883a 	mov	r4,r5
  801e34:	dfc00915 	stw	ra,36(sp)
  801e38:	dcc00815 	stw	r19,32(sp)
  801e3c:	2827883a 	mov	r19,r5
  801e40:	08022740 	call	802274 <strlen>
  801e44:	89400217 	ldw	r5,8(r17)
  801e48:	00c02074 	movhi	r3,129
  801e4c:	18f4d204 	addi	r3,r3,-11448
  801e50:	01c00044 	movi	r7,1
  801e54:	12000044 	addi	r8,r2,1
  801e58:	d8c00515 	stw	r3,20(sp)
  801e5c:	d9c00615 	stw	r7,24(sp)
  801e60:	d8c00304 	addi	r3,sp,12
  801e64:	01c00084 	movi	r7,2
  801e68:	8809883a 	mov	r4,r17
  801e6c:	d80d883a 	mov	r6,sp
  801e70:	d8c00015 	stw	r3,0(sp)
  801e74:	dcc00315 	stw	r19,12(sp)
  801e78:	da000215 	stw	r8,8(sp)
  801e7c:	d9c00115 	stw	r7,4(sp)
  801e80:	d8800415 	stw	r2,16(sp)
  801e84:	08063940 	call	806394 <__sfvwrite_r>
  801e88:	00ffffc4 	movi	r3,-1
  801e8c:	10000626 	beq	r2,zero,801ea8 <_puts_r+0x84>
  801e90:	1805883a 	mov	r2,r3
  801e94:	dfc00917 	ldw	ra,36(sp)
  801e98:	dcc00817 	ldw	r19,32(sp)
  801e9c:	dc400717 	ldw	r17,28(sp)
  801ea0:	dec00a04 	addi	sp,sp,40
  801ea4:	f800283a 	ret
  801ea8:	00c00284 	movi	r3,10
  801eac:	1805883a 	mov	r2,r3
  801eb0:	dfc00917 	ldw	ra,36(sp)
  801eb4:	dcc00817 	ldw	r19,32(sp)
  801eb8:	dc400717 	ldw	r17,28(sp)
  801ebc:	dec00a04 	addi	sp,sp,40
  801ec0:	f800283a 	ret

00801ec4 <puts>:
  801ec4:	00802074 	movhi	r2,129
  801ec8:	10be6704 	addi	r2,r2,-1636
  801ecc:	200b883a 	mov	r5,r4
  801ed0:	11000017 	ldw	r4,0(r2)
  801ed4:	0801e241 	jmpi	801e24 <_puts_r>

00801ed8 <__srefill_r>:
  801ed8:	defffd04 	addi	sp,sp,-12
  801edc:	dc400115 	stw	r17,4(sp)
  801ee0:	dc000015 	stw	r16,0(sp)
  801ee4:	dfc00215 	stw	ra,8(sp)
  801ee8:	2023883a 	mov	r17,r4
  801eec:	2821883a 	mov	r16,r5
  801ef0:	20000226 	beq	r4,zero,801efc <__srefill_r+0x24>
  801ef4:	20800e17 	ldw	r2,56(r4)
  801ef8:	10004126 	beq	r2,zero,802000 <__srefill_r+0x128>
  801efc:	80c0030b 	ldhu	r3,12(r16)
  801f00:	80000115 	stw	zero,4(r16)
  801f04:	1880080c 	andi	r2,r3,32
  801f08:	1000361e 	bne	r2,zero,801fe4 <__srefill_r+0x10c>
  801f0c:	1880010c 	andi	r2,r3,4
  801f10:	1000211e 	bne	r2,zero,801f98 <__srefill_r+0xc0>
  801f14:	1880040c 	andi	r2,r3,16
  801f18:	10005026 	beq	r2,zero,80205c <__srefill_r+0x184>
  801f1c:	1880020c 	andi	r2,r3,8
  801f20:	1000541e 	bne	r2,zero,802074 <__srefill_r+0x19c>
  801f24:	8080030b 	ldhu	r2,12(r16)
  801f28:	10800114 	ori	r2,r2,4
  801f2c:	8080030d 	sth	r2,12(r16)
  801f30:	80800417 	ldw	r2,16(r16)
  801f34:	10004526 	beq	r2,zero,80204c <__srefill_r+0x174>
  801f38:	8080030b 	ldhu	r2,12(r16)
  801f3c:	108000cc 	andi	r2,r2,3
  801f40:	1000361e 	bne	r2,zero,80201c <__srefill_r+0x144>
  801f44:	81800417 	ldw	r6,16(r16)
  801f48:	80c00817 	ldw	r3,32(r16)
  801f4c:	81400717 	ldw	r5,28(r16)
  801f50:	81c00517 	ldw	r7,20(r16)
  801f54:	8809883a 	mov	r4,r17
  801f58:	81800015 	stw	r6,0(r16)
  801f5c:	183ee83a 	callr	r3
  801f60:	80c0030b 	ldhu	r3,12(r16)
  801f64:	1009883a 	mov	r4,r2
  801f68:	80800115 	stw	r2,4(r16)
  801f6c:	00b7ffc4 	movi	r2,-8193
  801f70:	1884703a 	and	r2,r3,r2
  801f74:	8080030d 	sth	r2,12(r16)
  801f78:	0100230e 	bge	zero,r4,802008 <__srefill_r+0x130>
  801f7c:	0009883a 	mov	r4,zero
  801f80:	2005883a 	mov	r2,r4
  801f84:	dfc00217 	ldw	ra,8(sp)
  801f88:	dc400117 	ldw	r17,4(sp)
  801f8c:	dc000017 	ldw	r16,0(sp)
  801f90:	dec00304 	addi	sp,sp,12
  801f94:	f800283a 	ret
  801f98:	81400c17 	ldw	r5,48(r16)
  801f9c:	283fe426 	beq	r5,zero,801f30 <__srefill_r+0x58>
  801fa0:	80801004 	addi	r2,r16,64
  801fa4:	28800226 	beq	r5,r2,801fb0 <__srefill_r+0xd8>
  801fa8:	8809883a 	mov	r4,r17
  801fac:	08060800 	call	806080 <_free_r>
  801fb0:	80800f17 	ldw	r2,60(r16)
  801fb4:	80000c15 	stw	zero,48(r16)
  801fb8:	80800115 	stw	r2,4(r16)
  801fbc:	103fdc26 	beq	r2,zero,801f30 <__srefill_r+0x58>
  801fc0:	80800e17 	ldw	r2,56(r16)
  801fc4:	0009883a 	mov	r4,zero
  801fc8:	80800015 	stw	r2,0(r16)
  801fcc:	2005883a 	mov	r2,r4
  801fd0:	dfc00217 	ldw	ra,8(sp)
  801fd4:	dc400117 	ldw	r17,4(sp)
  801fd8:	dc000017 	ldw	r16,0(sp)
  801fdc:	dec00304 	addi	sp,sp,12
  801fe0:	f800283a 	ret
  801fe4:	013fffc4 	movi	r4,-1
  801fe8:	2005883a 	mov	r2,r4
  801fec:	dfc00217 	ldw	ra,8(sp)
  801ff0:	dc400117 	ldw	r17,4(sp)
  801ff4:	dc000017 	ldw	r16,0(sp)
  801ff8:	dec00304 	addi	sp,sp,12
  801ffc:	f800283a 	ret
  802000:	08010500 	call	801050 <__sinit>
  802004:	003fbd06 	br	801efc <__srefill_r+0x24>
  802008:	20000b1e 	bne	r4,zero,802038 <__srefill_r+0x160>
  80200c:	10800814 	ori	r2,r2,32
  802010:	013fffc4 	movi	r4,-1
  802014:	8080030d 	sth	r2,12(r16)
  802018:	003fd906 	br	801f80 <__srefill_r+0xa8>
  80201c:	00802074 	movhi	r2,129
  802020:	10be6804 	addi	r2,r2,-1632
  802024:	11000017 	ldw	r4,0(r2)
  802028:	01402034 	movhi	r5,128
  80202c:	29482704 	addi	r5,r5,8348
  802030:	08013700 	call	801370 <_fwalk>
  802034:	003fc306 	br	801f44 <__srefill_r+0x6c>
  802038:	10801014 	ori	r2,r2,64
  80203c:	013fffc4 	movi	r4,-1
  802040:	8080030d 	sth	r2,12(r16)
  802044:	80000115 	stw	zero,4(r16)
  802048:	003fcd06 	br	801f80 <__srefill_r+0xa8>
  80204c:	8809883a 	mov	r4,r17
  802050:	800b883a 	mov	r5,r16
  802054:	080696c0 	call	80696c <__smakebuf_r>
  802058:	003fb706 	br	801f38 <__srefill_r+0x60>
  80205c:	18c01014 	ori	r3,r3,64
  802060:	00800244 	movi	r2,9
  802064:	013fffc4 	movi	r4,-1
  802068:	88800015 	stw	r2,0(r17)
  80206c:	80c0030d 	sth	r3,12(r16)
  802070:	003fc306 	br	801f80 <__srefill_r+0xa8>
  802074:	8809883a 	mov	r4,r17
  802078:	800b883a 	mov	r5,r16
  80207c:	0805d240 	call	805d24 <_fflush_r>
  802080:	103fd81e 	bne	r2,zero,801fe4 <__srefill_r+0x10c>
  802084:	8080030b 	ldhu	r2,12(r16)
  802088:	80000215 	stw	zero,8(r16)
  80208c:	80000615 	stw	zero,24(r16)
  802090:	10bffdcc 	andi	r2,r2,65527
  802094:	8080030d 	sth	r2,12(r16)
  802098:	003fa206 	br	801f24 <__srefill_r+0x4c>

0080209c <lflush>:
  80209c:	20c0030b 	ldhu	r3,12(r4)
  8020a0:	01400244 	movi	r5,9
  8020a4:	0005883a 	mov	r2,zero
  8020a8:	18c0024c 	andi	r3,r3,9
  8020ac:	19400126 	beq	r3,r5,8020b4 <lflush+0x18>
  8020b0:	f800283a 	ret
  8020b4:	0805f201 	jmpi	805f20 <fflush>

008020b8 <_sbrk_r>:
  8020b8:	defffd04 	addi	sp,sp,-12
  8020bc:	dc000015 	stw	r16,0(sp)
  8020c0:	04002074 	movhi	r16,129
  8020c4:	84074f04 	addi	r16,r16,7484
  8020c8:	dc400115 	stw	r17,4(sp)
  8020cc:	80000015 	stw	zero,0(r16)
  8020d0:	2023883a 	mov	r17,r4
  8020d4:	2809883a 	mov	r4,r5
  8020d8:	dfc00215 	stw	ra,8(sp)
  8020dc:	080b08c0 	call	80b08c <sbrk>
  8020e0:	1007883a 	mov	r3,r2
  8020e4:	00bfffc4 	movi	r2,-1
  8020e8:	18800626 	beq	r3,r2,802104 <_sbrk_r+0x4c>
  8020ec:	1805883a 	mov	r2,r3
  8020f0:	dfc00217 	ldw	ra,8(sp)
  8020f4:	dc400117 	ldw	r17,4(sp)
  8020f8:	dc000017 	ldw	r16,0(sp)
  8020fc:	dec00304 	addi	sp,sp,12
  802100:	f800283a 	ret
  802104:	80800017 	ldw	r2,0(r16)
  802108:	103ff826 	beq	r2,zero,8020ec <_sbrk_r+0x34>
  80210c:	88800015 	stw	r2,0(r17)
  802110:	1805883a 	mov	r2,r3
  802114:	dfc00217 	ldw	ra,8(sp)
  802118:	dc400117 	ldw	r17,4(sp)
  80211c:	dc000017 	ldw	r16,0(sp)
  802120:	dec00304 	addi	sp,sp,12
  802124:	f800283a 	ret

00802128 <__sclose>:
  802128:	2940038f 	ldh	r5,14(r5)
  80212c:	08043c41 	jmpi	8043c4 <_close_r>

00802130 <__sseek>:
  802130:	defffe04 	addi	sp,sp,-8
  802134:	dc000015 	stw	r16,0(sp)
  802138:	2821883a 	mov	r16,r5
  80213c:	2940038f 	ldh	r5,14(r5)
  802140:	dfc00115 	stw	ra,4(sp)
  802144:	08068f40 	call	8068f4 <_lseek_r>
  802148:	1007883a 	mov	r3,r2
  80214c:	00bfffc4 	movi	r2,-1
  802150:	18800926 	beq	r3,r2,802178 <__sseek+0x48>
  802154:	8080030b 	ldhu	r2,12(r16)
  802158:	80c01415 	stw	r3,80(r16)
  80215c:	10840014 	ori	r2,r2,4096
  802160:	8080030d 	sth	r2,12(r16)
  802164:	1805883a 	mov	r2,r3
  802168:	dfc00117 	ldw	ra,4(sp)
  80216c:	dc000017 	ldw	r16,0(sp)
  802170:	dec00204 	addi	sp,sp,8
  802174:	f800283a 	ret
  802178:	8080030b 	ldhu	r2,12(r16)
  80217c:	10bbffcc 	andi	r2,r2,61439
  802180:	8080030d 	sth	r2,12(r16)
  802184:	1805883a 	mov	r2,r3
  802188:	dfc00117 	ldw	ra,4(sp)
  80218c:	dc000017 	ldw	r16,0(sp)
  802190:	dec00204 	addi	sp,sp,8
  802194:	f800283a 	ret

00802198 <__swrite>:
  802198:	2880030b 	ldhu	r2,12(r5)
  80219c:	defffb04 	addi	sp,sp,-20
  8021a0:	dcc00315 	stw	r19,12(sp)
  8021a4:	1080400c 	andi	r2,r2,256
  8021a8:	dc800215 	stw	r18,8(sp)
  8021ac:	dc400115 	stw	r17,4(sp)
  8021b0:	dc000015 	stw	r16,0(sp)
  8021b4:	3027883a 	mov	r19,r6
  8021b8:	3825883a 	mov	r18,r7
  8021bc:	dfc00415 	stw	ra,16(sp)
  8021c0:	2821883a 	mov	r16,r5
  8021c4:	000d883a 	mov	r6,zero
  8021c8:	01c00084 	movi	r7,2
  8021cc:	2023883a 	mov	r17,r4
  8021d0:	10000226 	beq	r2,zero,8021dc <__swrite+0x44>
  8021d4:	2940038f 	ldh	r5,14(r5)
  8021d8:	08068f40 	call	8068f4 <_lseek_r>
  8021dc:	8080030b 	ldhu	r2,12(r16)
  8021e0:	8140038f 	ldh	r5,14(r16)
  8021e4:	8809883a 	mov	r4,r17
  8021e8:	10bbffcc 	andi	r2,r2,61439
  8021ec:	980d883a 	mov	r6,r19
  8021f0:	900f883a 	mov	r7,r18
  8021f4:	8080030d 	sth	r2,12(r16)
  8021f8:	dfc00417 	ldw	ra,16(sp)
  8021fc:	dcc00317 	ldw	r19,12(sp)
  802200:	dc800217 	ldw	r18,8(sp)
  802204:	dc400117 	ldw	r17,4(sp)
  802208:	dc000017 	ldw	r16,0(sp)
  80220c:	dec00504 	addi	sp,sp,20
  802210:	08042101 	jmpi	804210 <_write_r>

00802214 <__sread>:
  802214:	defffe04 	addi	sp,sp,-8
  802218:	dc000015 	stw	r16,0(sp)
  80221c:	2821883a 	mov	r16,r5
  802220:	2940038f 	ldh	r5,14(r5)
  802224:	dfc00115 	stw	ra,4(sp)
  802228:	0807bd40 	call	807bd4 <_read_r>
  80222c:	1007883a 	mov	r3,r2
  802230:	10000816 	blt	r2,zero,802254 <__sread+0x40>
  802234:	80801417 	ldw	r2,80(r16)
  802238:	10c5883a 	add	r2,r2,r3
  80223c:	80801415 	stw	r2,80(r16)
  802240:	1805883a 	mov	r2,r3
  802244:	dfc00117 	ldw	ra,4(sp)
  802248:	dc000017 	ldw	r16,0(sp)
  80224c:	dec00204 	addi	sp,sp,8
  802250:	f800283a 	ret
  802254:	8080030b 	ldhu	r2,12(r16)
  802258:	10bbffcc 	andi	r2,r2,61439
  80225c:	8080030d 	sth	r2,12(r16)
  802260:	1805883a 	mov	r2,r3
  802264:	dfc00117 	ldw	ra,4(sp)
  802268:	dc000017 	ldw	r16,0(sp)
  80226c:	dec00204 	addi	sp,sp,8
  802270:	f800283a 	ret

00802274 <strlen>:
  802274:	208000cc 	andi	r2,r4,3
  802278:	2011883a 	mov	r8,r4
  80227c:	1000161e 	bne	r2,zero,8022d8 <strlen+0x64>
  802280:	20c00017 	ldw	r3,0(r4)
  802284:	017fbff4 	movhi	r5,65279
  802288:	297fbfc4 	addi	r5,r5,-257
  80228c:	01e02074 	movhi	r7,32897
  802290:	39e02004 	addi	r7,r7,-32640
  802294:	1945883a 	add	r2,r3,r5
  802298:	11c4703a 	and	r2,r2,r7
  80229c:	00c6303a 	nor	r3,zero,r3
  8022a0:	1886703a 	and	r3,r3,r2
  8022a4:	18000c1e 	bne	r3,zero,8022d8 <strlen+0x64>
  8022a8:	280d883a 	mov	r6,r5
  8022ac:	380b883a 	mov	r5,r7
  8022b0:	21000104 	addi	r4,r4,4
  8022b4:	20800017 	ldw	r2,0(r4)
  8022b8:	1187883a 	add	r3,r2,r6
  8022bc:	1946703a 	and	r3,r3,r5
  8022c0:	0084303a 	nor	r2,zero,r2
  8022c4:	10c4703a 	and	r2,r2,r3
  8022c8:	103ff926 	beq	r2,zero,8022b0 <strlen+0x3c>
  8022cc:	20800007 	ldb	r2,0(r4)
  8022d0:	10000326 	beq	r2,zero,8022e0 <strlen+0x6c>
  8022d4:	21000044 	addi	r4,r4,1
  8022d8:	20800007 	ldb	r2,0(r4)
  8022dc:	103ffd1e 	bne	r2,zero,8022d4 <strlen+0x60>
  8022e0:	2205c83a 	sub	r2,r4,r8
  8022e4:	f800283a 	ret

008022e8 <__sprint_r>:
  8022e8:	30800217 	ldw	r2,8(r6)
  8022ec:	defffe04 	addi	sp,sp,-8
  8022f0:	dc000015 	stw	r16,0(sp)
  8022f4:	dfc00115 	stw	ra,4(sp)
  8022f8:	3021883a 	mov	r16,r6
  8022fc:	0007883a 	mov	r3,zero
  802300:	1000061e 	bne	r2,zero,80231c <__sprint_r+0x34>
  802304:	1805883a 	mov	r2,r3
  802308:	30000115 	stw	zero,4(r6)
  80230c:	dfc00117 	ldw	ra,4(sp)
  802310:	dc000017 	ldw	r16,0(sp)
  802314:	dec00204 	addi	sp,sp,8
  802318:	f800283a 	ret
  80231c:	08063940 	call	806394 <__sfvwrite_r>
  802320:	1007883a 	mov	r3,r2
  802324:	1805883a 	mov	r2,r3
  802328:	80000115 	stw	zero,4(r16)
  80232c:	80000215 	stw	zero,8(r16)
  802330:	dfc00117 	ldw	ra,4(sp)
  802334:	dc000017 	ldw	r16,0(sp)
  802338:	dec00204 	addi	sp,sp,8
  80233c:	f800283a 	ret

00802340 <___vfprintf_internal_r>:
  802340:	defea404 	addi	sp,sp,-1392
  802344:	dd815815 	stw	r22,1376(sp)
  802348:	dc015215 	stw	r16,1352(sp)
  80234c:	d9c15115 	stw	r7,1348(sp)
  802350:	dfc15b15 	stw	ra,1388(sp)
  802354:	df015a15 	stw	fp,1384(sp)
  802358:	ddc15915 	stw	r23,1380(sp)
  80235c:	dd415715 	stw	r21,1372(sp)
  802360:	dd015615 	stw	r20,1368(sp)
  802364:	dcc15515 	stw	r19,1364(sp)
  802368:	dc815415 	stw	r18,1360(sp)
  80236c:	dc415315 	stw	r17,1356(sp)
  802370:	282d883a 	mov	r22,r5
  802374:	3021883a 	mov	r16,r6
  802378:	d9014f15 	stw	r4,1340(sp)
  80237c:	08068380 	call	806838 <_localeconv_r>
  802380:	10800017 	ldw	r2,0(r2)
  802384:	d9c15117 	ldw	r7,1348(sp)
  802388:	d8814915 	stw	r2,1316(sp)
  80238c:	d8814f17 	ldw	r2,1340(sp)
  802390:	10000226 	beq	r2,zero,80239c <___vfprintf_internal_r+0x5c>
  802394:	10800e17 	ldw	r2,56(r2)
  802398:	10020d26 	beq	r2,zero,802bd0 <___vfprintf_internal_r+0x890>
  80239c:	b080030b 	ldhu	r2,12(r22)
  8023a0:	1080020c 	andi	r2,r2,8
  8023a4:	10020e26 	beq	r2,zero,802be0 <___vfprintf_internal_r+0x8a0>
  8023a8:	b0800417 	ldw	r2,16(r22)
  8023ac:	10020c26 	beq	r2,zero,802be0 <___vfprintf_internal_r+0x8a0>
  8023b0:	b200030b 	ldhu	r8,12(r22)
  8023b4:	00800284 	movi	r2,10
  8023b8:	40c0068c 	andi	r3,r8,26
  8023bc:	18802f1e 	bne	r3,r2,80247c <___vfprintf_internal_r+0x13c>
  8023c0:	b080038f 	ldh	r2,14(r22)
  8023c4:	10002d16 	blt	r2,zero,80247c <___vfprintf_internal_r+0x13c>
  8023c8:	b240038b 	ldhu	r9,14(r22)
  8023cc:	b2800717 	ldw	r10,28(r22)
  8023d0:	b2c00917 	ldw	r11,36(r22)
  8023d4:	d9014f17 	ldw	r4,1340(sp)
  8023d8:	dc402904 	addi	r17,sp,164
  8023dc:	d8804004 	addi	r2,sp,256
  8023e0:	00c10004 	movi	r3,1024
  8023e4:	423fff4c 	andi	r8,r8,65533
  8023e8:	800d883a 	mov	r6,r16
  8023ec:	880b883a 	mov	r5,r17
  8023f0:	da002c0d 	sth	r8,176(sp)
  8023f4:	da402c8d 	sth	r9,178(sp)
  8023f8:	da803015 	stw	r10,192(sp)
  8023fc:	dac03215 	stw	r11,200(sp)
  802400:	d8802d15 	stw	r2,180(sp)
  802404:	d8c02e15 	stw	r3,184(sp)
  802408:	d8802915 	stw	r2,164(sp)
  80240c:	d8c02b15 	stw	r3,172(sp)
  802410:	d8002f15 	stw	zero,188(sp)
  802414:	08023400 	call	802340 <___vfprintf_internal_r>
  802418:	d8814b15 	stw	r2,1324(sp)
  80241c:	10000416 	blt	r2,zero,802430 <___vfprintf_internal_r+0xf0>
  802420:	d9014f17 	ldw	r4,1340(sp)
  802424:	880b883a 	mov	r5,r17
  802428:	0805d240 	call	805d24 <_fflush_r>
  80242c:	1002321e 	bne	r2,zero,802cf8 <___vfprintf_internal_r+0x9b8>
  802430:	d8802c0b 	ldhu	r2,176(sp)
  802434:	1080100c 	andi	r2,r2,64
  802438:	10000326 	beq	r2,zero,802448 <___vfprintf_internal_r+0x108>
  80243c:	b080030b 	ldhu	r2,12(r22)
  802440:	10801014 	ori	r2,r2,64
  802444:	b080030d 	sth	r2,12(r22)
  802448:	d8814b17 	ldw	r2,1324(sp)
  80244c:	dfc15b17 	ldw	ra,1388(sp)
  802450:	df015a17 	ldw	fp,1384(sp)
  802454:	ddc15917 	ldw	r23,1380(sp)
  802458:	dd815817 	ldw	r22,1376(sp)
  80245c:	dd415717 	ldw	r21,1372(sp)
  802460:	dd015617 	ldw	r20,1368(sp)
  802464:	dcc15517 	ldw	r19,1364(sp)
  802468:	dc815417 	ldw	r18,1360(sp)
  80246c:	dc415317 	ldw	r17,1356(sp)
  802470:	dc015217 	ldw	r16,1352(sp)
  802474:	dec15c04 	addi	sp,sp,1392
  802478:	f800283a 	ret
  80247c:	0005883a 	mov	r2,zero
  802480:	0007883a 	mov	r3,zero
  802484:	dd401904 	addi	r21,sp,100
  802488:	d8814215 	stw	r2,1288(sp)
  80248c:	802f883a 	mov	r23,r16
  802490:	d8c14315 	stw	r3,1292(sp)
  802494:	d8014b15 	stw	zero,1324(sp)
  802498:	d8014815 	stw	zero,1312(sp)
  80249c:	d8014415 	stw	zero,1296(sp)
  8024a0:	d8014715 	stw	zero,1308(sp)
  8024a4:	dd400c15 	stw	r21,48(sp)
  8024a8:	d8000e15 	stw	zero,56(sp)
  8024ac:	d8000d15 	stw	zero,52(sp)
  8024b0:	b8800007 	ldb	r2,0(r23)
  8024b4:	10001926 	beq	r2,zero,80251c <___vfprintf_internal_r+0x1dc>
  8024b8:	00c00944 	movi	r3,37
  8024bc:	10c01726 	beq	r2,r3,80251c <___vfprintf_internal_r+0x1dc>
  8024c0:	b821883a 	mov	r16,r23
  8024c4:	00000106 	br	8024cc <___vfprintf_internal_r+0x18c>
  8024c8:	10c00326 	beq	r2,r3,8024d8 <___vfprintf_internal_r+0x198>
  8024cc:	84000044 	addi	r16,r16,1
  8024d0:	80800007 	ldb	r2,0(r16)
  8024d4:	103ffc1e 	bne	r2,zero,8024c8 <___vfprintf_internal_r+0x188>
  8024d8:	85e7c83a 	sub	r19,r16,r23
  8024dc:	98000e26 	beq	r19,zero,802518 <___vfprintf_internal_r+0x1d8>
  8024e0:	dc800e17 	ldw	r18,56(sp)
  8024e4:	dc400d17 	ldw	r17,52(sp)
  8024e8:	008001c4 	movi	r2,7
  8024ec:	94e5883a 	add	r18,r18,r19
  8024f0:	8c400044 	addi	r17,r17,1
  8024f4:	adc00015 	stw	r23,0(r21)
  8024f8:	dc800e15 	stw	r18,56(sp)
  8024fc:	acc00115 	stw	r19,4(r21)
  802500:	dc400d15 	stw	r17,52(sp)
  802504:	14428b16 	blt	r2,r17,802f34 <___vfprintf_internal_r+0xbf4>
  802508:	ad400204 	addi	r21,r21,8
  80250c:	d9014b17 	ldw	r4,1324(sp)
  802510:	24c9883a 	add	r4,r4,r19
  802514:	d9014b15 	stw	r4,1324(sp)
  802518:	802f883a 	mov	r23,r16
  80251c:	b8800007 	ldb	r2,0(r23)
  802520:	10013c26 	beq	r2,zero,802a14 <___vfprintf_internal_r+0x6d4>
  802524:	bdc00044 	addi	r23,r23,1
  802528:	d8000405 	stb	zero,16(sp)
  80252c:	b8c00007 	ldb	r3,0(r23)
  802530:	04ffffc4 	movi	r19,-1
  802534:	d8014c15 	stw	zero,1328(sp)
  802538:	d8014a15 	stw	zero,1320(sp)
  80253c:	d8c14d15 	stw	r3,1332(sp)
  802540:	bdc00044 	addi	r23,r23,1
  802544:	d9414d17 	ldw	r5,1332(sp)
  802548:	00801604 	movi	r2,88
  80254c:	28fff804 	addi	r3,r5,-32
  802550:	10c06036 	bltu	r2,r3,8026d4 <___vfprintf_internal_r+0x394>
  802554:	18c5883a 	add	r2,r3,r3
  802558:	1085883a 	add	r2,r2,r2
  80255c:	00c02034 	movhi	r3,128
  802560:	18c95c04 	addi	r3,r3,9584
  802564:	10c5883a 	add	r2,r2,r3
  802568:	11000017 	ldw	r4,0(r2)
  80256c:	2000683a 	jmp	r4
  802570:	008034e4 	muli	r2,zero,211
  802574:	008026d4 	movui	r2,155
  802578:	008026d4 	movui	r2,155
  80257c:	008034d0 	cmplti	r2,zero,211
  802580:	008026d4 	movui	r2,155
  802584:	008026d4 	movui	r2,155
  802588:	008026d4 	movui	r2,155
  80258c:	008026d4 	movui	r2,155
  802590:	008026d4 	movui	r2,155
  802594:	008026d4 	movui	r2,155
  802598:	008032b0 	cmpltui	r2,zero,202
  80259c:	008034c0 	call	8034c <__alt_mem_sdram_0-0x77fcb4>
  8025a0:	008026d4 	movui	r2,155
  8025a4:	008032c8 	cmpgei	r2,zero,203
  8025a8:	0080355c 	xori	r2,zero,213
  8025ac:	008026d4 	movui	r2,155
  8025b0:	00803548 	cmpgei	r2,zero,213
  8025b4:	00803510 	cmplti	r2,zero,212
  8025b8:	00803510 	cmplti	r2,zero,212
  8025bc:	00803510 	cmplti	r2,zero,212
  8025c0:	00803510 	cmplti	r2,zero,212
  8025c4:	00803510 	cmplti	r2,zero,212
  8025c8:	00803510 	cmplti	r2,zero,212
  8025cc:	00803510 	cmplti	r2,zero,212
  8025d0:	00803510 	cmplti	r2,zero,212
  8025d4:	00803510 	cmplti	r2,zero,212
  8025d8:	008026d4 	movui	r2,155
  8025dc:	008026d4 	movui	r2,155
  8025e0:	008026d4 	movui	r2,155
  8025e4:	008026d4 	movui	r2,155
  8025e8:	008026d4 	movui	r2,155
  8025ec:	008026d4 	movui	r2,155
  8025f0:	008026d4 	movui	r2,155
  8025f4:	008026d4 	movui	r2,155
  8025f8:	008026d4 	movui	r2,155
  8025fc:	008026d4 	movui	r2,155
  802600:	00802d2c 	andhi	r2,zero,180
  802604:	00803398 	cmpnei	r2,zero,206
  802608:	008026d4 	movui	r2,155
  80260c:	00803398 	cmpnei	r2,zero,206
  802610:	008026d4 	movui	r2,155
  802614:	008026d4 	movui	r2,155
  802618:	008026d4 	movui	r2,155
  80261c:	008026d4 	movui	r2,155
  802620:	008034fc 	xorhi	r2,zero,211
  802624:	008026d4 	movui	r2,155
  802628:	008026d4 	movui	r2,155
  80262c:	00802de0 	cmpeqi	r2,zero,183
  802630:	008026d4 	movui	r2,155
  802634:	008026d4 	movui	r2,155
  802638:	008026d4 	movui	r2,155
  80263c:	008026d4 	movui	r2,155
  802640:	008026d4 	movui	r2,155
  802644:	00802e2c 	andhi	r2,zero,184
  802648:	008026d4 	movui	r2,155
  80264c:	008026d4 	movui	r2,155
  802650:	0080344c 	andi	r2,zero,209
  802654:	008026d4 	movui	r2,155
  802658:	008026d4 	movui	r2,155
  80265c:	008026d4 	movui	r2,155
  802660:	008026d4 	movui	r2,155
  802664:	008026d4 	movui	r2,155
  802668:	008026d4 	movui	r2,155
  80266c:	008026d4 	movui	r2,155
  802670:	008026d4 	movui	r2,155
  802674:	008026d4 	movui	r2,155
  802678:	008026d4 	movui	r2,155
  80267c:	00803420 	cmpeqi	r2,zero,208
  802680:	00802d38 	rdprs	r2,zero,180
  802684:	00803398 	cmpnei	r2,zero,206
  802688:	00803398 	cmpnei	r2,zero,206
  80268c:	00803398 	cmpnei	r2,zero,206
  802690:	00803384 	movi	r2,206
  802694:	00802d38 	rdprs	r2,zero,180
  802698:	008026d4 	movui	r2,155
  80269c:	008026d4 	movui	r2,155
  8026a0:	0080330c 	andi	r2,zero,204
  8026a4:	008026d4 	movui	r2,155
  8026a8:	008032dc 	xori	r2,zero,203
  8026ac:	00802dec 	andhi	r2,zero,183
  8026b0:	0080333c 	xorhi	r2,zero,204
  8026b4:	00803328 	cmpgeui	r2,zero,204
  8026b8:	008026d4 	movui	r2,155
  8026bc:	008035b8 	rdprs	r2,zero,214
  8026c0:	008026d4 	movui	r2,155
  8026c4:	00802e38 	rdprs	r2,zero,184
  8026c8:	008026d4 	movui	r2,155
  8026cc:	008026d4 	movui	r2,155
  8026d0:	008034b0 	cmpltui	r2,zero,210
  8026d4:	d9014d17 	ldw	r4,1332(sp)
  8026d8:	2000ce26 	beq	r4,zero,802a14 <___vfprintf_internal_r+0x6d4>
  8026dc:	01400044 	movi	r5,1
  8026e0:	d9800f04 	addi	r6,sp,60
  8026e4:	d9c14015 	stw	r7,1280(sp)
  8026e8:	d9414515 	stw	r5,1300(sp)
  8026ec:	d9814115 	stw	r6,1284(sp)
  8026f0:	280f883a 	mov	r7,r5
  8026f4:	d9000f05 	stb	r4,60(sp)
  8026f8:	d8000405 	stb	zero,16(sp)
  8026fc:	d8014615 	stw	zero,1304(sp)
  802700:	d8c14c17 	ldw	r3,1328(sp)
  802704:	1880008c 	andi	r2,r3,2
  802708:	1005003a 	cmpeq	r2,r2,zero
  80270c:	d8815015 	stw	r2,1344(sp)
  802710:	1000031e 	bne	r2,zero,802720 <___vfprintf_internal_r+0x3e0>
  802714:	d9014517 	ldw	r4,1300(sp)
  802718:	21000084 	addi	r4,r4,2
  80271c:	d9014515 	stw	r4,1300(sp)
  802720:	d9414c17 	ldw	r5,1328(sp)
  802724:	2940210c 	andi	r5,r5,132
  802728:	d9414e15 	stw	r5,1336(sp)
  80272c:	28002d1e 	bne	r5,zero,8027e4 <___vfprintf_internal_r+0x4a4>
  802730:	d9814a17 	ldw	r6,1320(sp)
  802734:	d8814517 	ldw	r2,1300(sp)
  802738:	30a1c83a 	sub	r16,r6,r2
  80273c:	0400290e 	bge	zero,r16,8027e4 <___vfprintf_internal_r+0x4a4>
  802740:	00800404 	movi	r2,16
  802744:	1404580e 	bge	r2,r16,8038a8 <___vfprintf_internal_r+0x1568>
  802748:	dc800e17 	ldw	r18,56(sp)
  80274c:	dc400d17 	ldw	r17,52(sp)
  802750:	1027883a 	mov	r19,r2
  802754:	07002074 	movhi	fp,129
  802758:	e734ef84 	addi	fp,fp,-11330
  80275c:	050001c4 	movi	r20,7
  802760:	00000306 	br	802770 <___vfprintf_internal_r+0x430>
  802764:	843ffc04 	addi	r16,r16,-16
  802768:	ad400204 	addi	r21,r21,8
  80276c:	9c00130e 	bge	r19,r16,8027bc <___vfprintf_internal_r+0x47c>
  802770:	94800404 	addi	r18,r18,16
  802774:	8c400044 	addi	r17,r17,1
  802778:	af000015 	stw	fp,0(r21)
  80277c:	acc00115 	stw	r19,4(r21)
  802780:	dc800e15 	stw	r18,56(sp)
  802784:	dc400d15 	stw	r17,52(sp)
  802788:	a47ff60e 	bge	r20,r17,802764 <___vfprintf_internal_r+0x424>
  80278c:	d9014f17 	ldw	r4,1340(sp)
  802790:	b00b883a 	mov	r5,r22
  802794:	d9800c04 	addi	r6,sp,48
  802798:	d9c15115 	stw	r7,1348(sp)
  80279c:	08022e80 	call	8022e8 <__sprint_r>
  8027a0:	d9c15117 	ldw	r7,1348(sp)
  8027a4:	10009e1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  8027a8:	843ffc04 	addi	r16,r16,-16
  8027ac:	dc800e17 	ldw	r18,56(sp)
  8027b0:	dc400d17 	ldw	r17,52(sp)
  8027b4:	dd401904 	addi	r21,sp,100
  8027b8:	9c3fed16 	blt	r19,r16,802770 <___vfprintf_internal_r+0x430>
  8027bc:	9425883a 	add	r18,r18,r16
  8027c0:	8c400044 	addi	r17,r17,1
  8027c4:	008001c4 	movi	r2,7
  8027c8:	af000015 	stw	fp,0(r21)
  8027cc:	ac000115 	stw	r16,4(r21)
  8027d0:	dc800e15 	stw	r18,56(sp)
  8027d4:	dc400d15 	stw	r17,52(sp)
  8027d8:	1441f516 	blt	r2,r17,802fb0 <___vfprintf_internal_r+0xc70>
  8027dc:	ad400204 	addi	r21,r21,8
  8027e0:	00000206 	br	8027ec <___vfprintf_internal_r+0x4ac>
  8027e4:	dc800e17 	ldw	r18,56(sp)
  8027e8:	dc400d17 	ldw	r17,52(sp)
  8027ec:	d8800407 	ldb	r2,16(sp)
  8027f0:	10000b26 	beq	r2,zero,802820 <___vfprintf_internal_r+0x4e0>
  8027f4:	00800044 	movi	r2,1
  8027f8:	94800044 	addi	r18,r18,1
  8027fc:	8c400044 	addi	r17,r17,1
  802800:	a8800115 	stw	r2,4(r21)
  802804:	d8c00404 	addi	r3,sp,16
  802808:	008001c4 	movi	r2,7
  80280c:	a8c00015 	stw	r3,0(r21)
  802810:	dc800e15 	stw	r18,56(sp)
  802814:	dc400d15 	stw	r17,52(sp)
  802818:	1441da16 	blt	r2,r17,802f84 <___vfprintf_internal_r+0xc44>
  80281c:	ad400204 	addi	r21,r21,8
  802820:	d9015017 	ldw	r4,1344(sp)
  802824:	20000b1e 	bne	r4,zero,802854 <___vfprintf_internal_r+0x514>
  802828:	d8800444 	addi	r2,sp,17
  80282c:	94800084 	addi	r18,r18,2
  802830:	8c400044 	addi	r17,r17,1
  802834:	a8800015 	stw	r2,0(r21)
  802838:	00c00084 	movi	r3,2
  80283c:	008001c4 	movi	r2,7
  802840:	a8c00115 	stw	r3,4(r21)
  802844:	dc800e15 	stw	r18,56(sp)
  802848:	dc400d15 	stw	r17,52(sp)
  80284c:	1441c216 	blt	r2,r17,802f58 <___vfprintf_internal_r+0xc18>
  802850:	ad400204 	addi	r21,r21,8
  802854:	d9414e17 	ldw	r5,1336(sp)
  802858:	00802004 	movi	r2,128
  80285c:	2880b126 	beq	r5,r2,802b24 <___vfprintf_internal_r+0x7e4>
  802860:	d8c14617 	ldw	r3,1304(sp)
  802864:	19e1c83a 	sub	r16,r3,r7
  802868:	0400260e 	bge	zero,r16,802904 <___vfprintf_internal_r+0x5c4>
  80286c:	00800404 	movi	r2,16
  802870:	1403c90e 	bge	r2,r16,803798 <___vfprintf_internal_r+0x1458>
  802874:	1027883a 	mov	r19,r2
  802878:	07002074 	movhi	fp,129
  80287c:	e734eb84 	addi	fp,fp,-11346
  802880:	050001c4 	movi	r20,7
  802884:	00000306 	br	802894 <___vfprintf_internal_r+0x554>
  802888:	843ffc04 	addi	r16,r16,-16
  80288c:	ad400204 	addi	r21,r21,8
  802890:	9c00130e 	bge	r19,r16,8028e0 <___vfprintf_internal_r+0x5a0>
  802894:	94800404 	addi	r18,r18,16
  802898:	8c400044 	addi	r17,r17,1
  80289c:	af000015 	stw	fp,0(r21)
  8028a0:	acc00115 	stw	r19,4(r21)
  8028a4:	dc800e15 	stw	r18,56(sp)
  8028a8:	dc400d15 	stw	r17,52(sp)
  8028ac:	a47ff60e 	bge	r20,r17,802888 <___vfprintf_internal_r+0x548>
  8028b0:	d9014f17 	ldw	r4,1340(sp)
  8028b4:	b00b883a 	mov	r5,r22
  8028b8:	d9800c04 	addi	r6,sp,48
  8028bc:	d9c15115 	stw	r7,1348(sp)
  8028c0:	08022e80 	call	8022e8 <__sprint_r>
  8028c4:	d9c15117 	ldw	r7,1348(sp)
  8028c8:	1000551e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  8028cc:	843ffc04 	addi	r16,r16,-16
  8028d0:	dc800e17 	ldw	r18,56(sp)
  8028d4:	dc400d17 	ldw	r17,52(sp)
  8028d8:	dd401904 	addi	r21,sp,100
  8028dc:	9c3fed16 	blt	r19,r16,802894 <___vfprintf_internal_r+0x554>
  8028e0:	9425883a 	add	r18,r18,r16
  8028e4:	8c400044 	addi	r17,r17,1
  8028e8:	008001c4 	movi	r2,7
  8028ec:	af000015 	stw	fp,0(r21)
  8028f0:	ac000115 	stw	r16,4(r21)
  8028f4:	dc800e15 	stw	r18,56(sp)
  8028f8:	dc400d15 	stw	r17,52(sp)
  8028fc:	14418216 	blt	r2,r17,802f08 <___vfprintf_internal_r+0xbc8>
  802900:	ad400204 	addi	r21,r21,8
  802904:	d9014c17 	ldw	r4,1328(sp)
  802908:	2080400c 	andi	r2,r4,256
  80290c:	10004a1e 	bne	r2,zero,802a38 <___vfprintf_internal_r+0x6f8>
  802910:	d9414117 	ldw	r5,1284(sp)
  802914:	91e5883a 	add	r18,r18,r7
  802918:	8c400044 	addi	r17,r17,1
  80291c:	008001c4 	movi	r2,7
  802920:	a9400015 	stw	r5,0(r21)
  802924:	a9c00115 	stw	r7,4(r21)
  802928:	dc800e15 	stw	r18,56(sp)
  80292c:	dc400d15 	stw	r17,52(sp)
  802930:	14416716 	blt	r2,r17,802ed0 <___vfprintf_internal_r+0xb90>
  802934:	a8c00204 	addi	r3,r21,8
  802938:	d9814c17 	ldw	r6,1328(sp)
  80293c:	3080010c 	andi	r2,r6,4
  802940:	10002826 	beq	r2,zero,8029e4 <___vfprintf_internal_r+0x6a4>
  802944:	d8814a17 	ldw	r2,1320(sp)
  802948:	d9014517 	ldw	r4,1300(sp)
  80294c:	1121c83a 	sub	r16,r2,r4
  802950:	0400240e 	bge	zero,r16,8029e4 <___vfprintf_internal_r+0x6a4>
  802954:	00800404 	movi	r2,16
  802958:	14044f0e 	bge	r2,r16,803a98 <___vfprintf_internal_r+0x1758>
  80295c:	dc400d17 	ldw	r17,52(sp)
  802960:	1027883a 	mov	r19,r2
  802964:	07002074 	movhi	fp,129
  802968:	e734ef84 	addi	fp,fp,-11330
  80296c:	050001c4 	movi	r20,7
  802970:	00000306 	br	802980 <___vfprintf_internal_r+0x640>
  802974:	843ffc04 	addi	r16,r16,-16
  802978:	18c00204 	addi	r3,r3,8
  80297c:	9c00110e 	bge	r19,r16,8029c4 <___vfprintf_internal_r+0x684>
  802980:	94800404 	addi	r18,r18,16
  802984:	8c400044 	addi	r17,r17,1
  802988:	1f000015 	stw	fp,0(r3)
  80298c:	1cc00115 	stw	r19,4(r3)
  802990:	dc800e15 	stw	r18,56(sp)
  802994:	dc400d15 	stw	r17,52(sp)
  802998:	a47ff60e 	bge	r20,r17,802974 <___vfprintf_internal_r+0x634>
  80299c:	d9014f17 	ldw	r4,1340(sp)
  8029a0:	b00b883a 	mov	r5,r22
  8029a4:	d9800c04 	addi	r6,sp,48
  8029a8:	08022e80 	call	8022e8 <__sprint_r>
  8029ac:	10001c1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  8029b0:	843ffc04 	addi	r16,r16,-16
  8029b4:	dc800e17 	ldw	r18,56(sp)
  8029b8:	dc400d17 	ldw	r17,52(sp)
  8029bc:	d8c01904 	addi	r3,sp,100
  8029c0:	9c3fef16 	blt	r19,r16,802980 <___vfprintf_internal_r+0x640>
  8029c4:	9425883a 	add	r18,r18,r16
  8029c8:	8c400044 	addi	r17,r17,1
  8029cc:	008001c4 	movi	r2,7
  8029d0:	1f000015 	stw	fp,0(r3)
  8029d4:	1c000115 	stw	r16,4(r3)
  8029d8:	dc800e15 	stw	r18,56(sp)
  8029dc:	dc400d15 	stw	r17,52(sp)
  8029e0:	1440cb16 	blt	r2,r17,802d10 <___vfprintf_internal_r+0x9d0>
  8029e4:	d8814a17 	ldw	r2,1320(sp)
  8029e8:	d9414517 	ldw	r5,1300(sp)
  8029ec:	1140010e 	bge	r2,r5,8029f4 <___vfprintf_internal_r+0x6b4>
  8029f0:	2805883a 	mov	r2,r5
  8029f4:	d9814b17 	ldw	r6,1324(sp)
  8029f8:	308d883a 	add	r6,r6,r2
  8029fc:	d9814b15 	stw	r6,1324(sp)
  802a00:	90013b1e 	bne	r18,zero,802ef0 <___vfprintf_internal_r+0xbb0>
  802a04:	d9c14017 	ldw	r7,1280(sp)
  802a08:	dd401904 	addi	r21,sp,100
  802a0c:	d8000d15 	stw	zero,52(sp)
  802a10:	003ea706 	br	8024b0 <___vfprintf_internal_r+0x170>
  802a14:	d8800e17 	ldw	r2,56(sp)
  802a18:	10053f1e 	bne	r2,zero,803f18 <___vfprintf_internal_r+0x1bd8>
  802a1c:	d8000d15 	stw	zero,52(sp)
  802a20:	b080030b 	ldhu	r2,12(r22)
  802a24:	1080100c 	andi	r2,r2,64
  802a28:	103e8726 	beq	r2,zero,802448 <___vfprintf_internal_r+0x108>
  802a2c:	00bfffc4 	movi	r2,-1
  802a30:	d8814b15 	stw	r2,1324(sp)
  802a34:	003e8406 	br	802448 <___vfprintf_internal_r+0x108>
  802a38:	d9814d17 	ldw	r6,1332(sp)
  802a3c:	00801944 	movi	r2,101
  802a40:	11806e16 	blt	r2,r6,802bfc <___vfprintf_internal_r+0x8bc>
  802a44:	d9414717 	ldw	r5,1308(sp)
  802a48:	00c00044 	movi	r3,1
  802a4c:	1943430e 	bge	r3,r5,80375c <___vfprintf_internal_r+0x141c>
  802a50:	d8814117 	ldw	r2,1284(sp)
  802a54:	94800044 	addi	r18,r18,1
  802a58:	8c400044 	addi	r17,r17,1
  802a5c:	a8800015 	stw	r2,0(r21)
  802a60:	008001c4 	movi	r2,7
  802a64:	a8c00115 	stw	r3,4(r21)
  802a68:	dc800e15 	stw	r18,56(sp)
  802a6c:	dc400d15 	stw	r17,52(sp)
  802a70:	1441ca16 	blt	r2,r17,80319c <___vfprintf_internal_r+0xe5c>
  802a74:	a8c00204 	addi	r3,r21,8
  802a78:	d9014917 	ldw	r4,1316(sp)
  802a7c:	00800044 	movi	r2,1
  802a80:	94800044 	addi	r18,r18,1
  802a84:	8c400044 	addi	r17,r17,1
  802a88:	18800115 	stw	r2,4(r3)
  802a8c:	008001c4 	movi	r2,7
  802a90:	19000015 	stw	r4,0(r3)
  802a94:	dc800e15 	stw	r18,56(sp)
  802a98:	dc400d15 	stw	r17,52(sp)
  802a9c:	1441b616 	blt	r2,r17,803178 <___vfprintf_internal_r+0xe38>
  802aa0:	1cc00204 	addi	r19,r3,8
  802aa4:	d9014217 	ldw	r4,1288(sp)
  802aa8:	d9414317 	ldw	r5,1292(sp)
  802aac:	000d883a 	mov	r6,zero
  802ab0:	000f883a 	mov	r7,zero
  802ab4:	0809c380 	call	809c38 <__nedf2>
  802ab8:	10017426 	beq	r2,zero,80308c <___vfprintf_internal_r+0xd4c>
  802abc:	d9414717 	ldw	r5,1308(sp)
  802ac0:	d9814117 	ldw	r6,1284(sp)
  802ac4:	8c400044 	addi	r17,r17,1
  802ac8:	2c85883a 	add	r2,r5,r18
  802acc:	14bfffc4 	addi	r18,r2,-1
  802ad0:	28bfffc4 	addi	r2,r5,-1
  802ad4:	30c00044 	addi	r3,r6,1
  802ad8:	98800115 	stw	r2,4(r19)
  802adc:	008001c4 	movi	r2,7
  802ae0:	98c00015 	stw	r3,0(r19)
  802ae4:	dc800e15 	stw	r18,56(sp)
  802ae8:	dc400d15 	stw	r17,52(sp)
  802aec:	14418e16 	blt	r2,r17,803128 <___vfprintf_internal_r+0xde8>
  802af0:	9cc00204 	addi	r19,r19,8
  802af4:	d9414817 	ldw	r5,1312(sp)
  802af8:	d8800804 	addi	r2,sp,32
  802afc:	8c400044 	addi	r17,r17,1
  802b00:	9165883a 	add	r18,r18,r5
  802b04:	98800015 	stw	r2,0(r19)
  802b08:	008001c4 	movi	r2,7
  802b0c:	99400115 	stw	r5,4(r19)
  802b10:	dc800e15 	stw	r18,56(sp)
  802b14:	dc400d15 	stw	r17,52(sp)
  802b18:	1440ed16 	blt	r2,r17,802ed0 <___vfprintf_internal_r+0xb90>
  802b1c:	98c00204 	addi	r3,r19,8
  802b20:	003f8506 	br	802938 <___vfprintf_internal_r+0x5f8>
  802b24:	d9814a17 	ldw	r6,1320(sp)
  802b28:	d8814517 	ldw	r2,1300(sp)
  802b2c:	30a1c83a 	sub	r16,r6,r2
  802b30:	043f4b0e 	bge	zero,r16,802860 <___vfprintf_internal_r+0x520>
  802b34:	00800404 	movi	r2,16
  802b38:	1404340e 	bge	r2,r16,803c0c <___vfprintf_internal_r+0x18cc>
  802b3c:	1027883a 	mov	r19,r2
  802b40:	07002074 	movhi	fp,129
  802b44:	e734eb84 	addi	fp,fp,-11346
  802b48:	050001c4 	movi	r20,7
  802b4c:	00000306 	br	802b5c <___vfprintf_internal_r+0x81c>
  802b50:	843ffc04 	addi	r16,r16,-16
  802b54:	ad400204 	addi	r21,r21,8
  802b58:	9c00130e 	bge	r19,r16,802ba8 <___vfprintf_internal_r+0x868>
  802b5c:	94800404 	addi	r18,r18,16
  802b60:	8c400044 	addi	r17,r17,1
  802b64:	af000015 	stw	fp,0(r21)
  802b68:	acc00115 	stw	r19,4(r21)
  802b6c:	dc800e15 	stw	r18,56(sp)
  802b70:	dc400d15 	stw	r17,52(sp)
  802b74:	a47ff60e 	bge	r20,r17,802b50 <___vfprintf_internal_r+0x810>
  802b78:	d9014f17 	ldw	r4,1340(sp)
  802b7c:	b00b883a 	mov	r5,r22
  802b80:	d9800c04 	addi	r6,sp,48
  802b84:	d9c15115 	stw	r7,1348(sp)
  802b88:	08022e80 	call	8022e8 <__sprint_r>
  802b8c:	d9c15117 	ldw	r7,1348(sp)
  802b90:	103fa31e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  802b94:	843ffc04 	addi	r16,r16,-16
  802b98:	dc800e17 	ldw	r18,56(sp)
  802b9c:	dc400d17 	ldw	r17,52(sp)
  802ba0:	dd401904 	addi	r21,sp,100
  802ba4:	9c3fed16 	blt	r19,r16,802b5c <___vfprintf_internal_r+0x81c>
  802ba8:	9425883a 	add	r18,r18,r16
  802bac:	8c400044 	addi	r17,r17,1
  802bb0:	008001c4 	movi	r2,7
  802bb4:	af000015 	stw	fp,0(r21)
  802bb8:	ac000115 	stw	r16,4(r21)
  802bbc:	dc800e15 	stw	r18,56(sp)
  802bc0:	dc400d15 	stw	r17,52(sp)
  802bc4:	14416116 	blt	r2,r17,80314c <___vfprintf_internal_r+0xe0c>
  802bc8:	ad400204 	addi	r21,r21,8
  802bcc:	003f2406 	br	802860 <___vfprintf_internal_r+0x520>
  802bd0:	d9014f17 	ldw	r4,1340(sp)
  802bd4:	08010500 	call	801050 <__sinit>
  802bd8:	d9c15117 	ldw	r7,1348(sp)
  802bdc:	003def06 	br	80239c <___vfprintf_internal_r+0x5c>
  802be0:	d9014f17 	ldw	r4,1340(sp)
  802be4:	b00b883a 	mov	r5,r22
  802be8:	d9c15115 	stw	r7,1348(sp)
  802bec:	08042880 	call	804288 <__swsetup_r>
  802bf0:	d9c15117 	ldw	r7,1348(sp)
  802bf4:	103dee26 	beq	r2,zero,8023b0 <___vfprintf_internal_r+0x70>
  802bf8:	003f8c06 	br	802a2c <___vfprintf_internal_r+0x6ec>
  802bfc:	d9014217 	ldw	r4,1288(sp)
  802c00:	d9414317 	ldw	r5,1292(sp)
  802c04:	000d883a 	mov	r6,zero
  802c08:	000f883a 	mov	r7,zero
  802c0c:	0809bb00 	call	809bb0 <__eqdf2>
  802c10:	1000f21e 	bne	r2,zero,802fdc <___vfprintf_internal_r+0xc9c>
  802c14:	00802074 	movhi	r2,129
  802c18:	10b4eb04 	addi	r2,r2,-11348
  802c1c:	94800044 	addi	r18,r18,1
  802c20:	8c400044 	addi	r17,r17,1
  802c24:	a8800015 	stw	r2,0(r21)
  802c28:	00c00044 	movi	r3,1
  802c2c:	008001c4 	movi	r2,7
  802c30:	a8c00115 	stw	r3,4(r21)
  802c34:	dc800e15 	stw	r18,56(sp)
  802c38:	dc400d15 	stw	r17,52(sp)
  802c3c:	1442fa16 	blt	r2,r17,803828 <___vfprintf_internal_r+0x14e8>
  802c40:	a8c00204 	addi	r3,r21,8
  802c44:	d8800517 	ldw	r2,20(sp)
  802c48:	d9014717 	ldw	r4,1308(sp)
  802c4c:	11015c0e 	bge	r2,r4,8031c0 <___vfprintf_internal_r+0xe80>
  802c50:	dc400d17 	ldw	r17,52(sp)
  802c54:	d9814917 	ldw	r6,1316(sp)
  802c58:	00800044 	movi	r2,1
  802c5c:	94800044 	addi	r18,r18,1
  802c60:	8c400044 	addi	r17,r17,1
  802c64:	18800115 	stw	r2,4(r3)
  802c68:	008001c4 	movi	r2,7
  802c6c:	19800015 	stw	r6,0(r3)
  802c70:	dc800e15 	stw	r18,56(sp)
  802c74:	dc400d15 	stw	r17,52(sp)
  802c78:	14431016 	blt	r2,r17,8038bc <___vfprintf_internal_r+0x157c>
  802c7c:	18c00204 	addi	r3,r3,8
  802c80:	d8814717 	ldw	r2,1308(sp)
  802c84:	143fffc4 	addi	r16,r2,-1
  802c88:	043f2b0e 	bge	zero,r16,802938 <___vfprintf_internal_r+0x5f8>
  802c8c:	00800404 	movi	r2,16
  802c90:	1402a20e 	bge	r2,r16,80371c <___vfprintf_internal_r+0x13dc>
  802c94:	dc400d17 	ldw	r17,52(sp)
  802c98:	1027883a 	mov	r19,r2
  802c9c:	07002074 	movhi	fp,129
  802ca0:	e734eb84 	addi	fp,fp,-11346
  802ca4:	050001c4 	movi	r20,7
  802ca8:	00000306 	br	802cb8 <___vfprintf_internal_r+0x978>
  802cac:	18c00204 	addi	r3,r3,8
  802cb0:	843ffc04 	addi	r16,r16,-16
  802cb4:	9c029c0e 	bge	r19,r16,803728 <___vfprintf_internal_r+0x13e8>
  802cb8:	94800404 	addi	r18,r18,16
  802cbc:	8c400044 	addi	r17,r17,1
  802cc0:	1f000015 	stw	fp,0(r3)
  802cc4:	1cc00115 	stw	r19,4(r3)
  802cc8:	dc800e15 	stw	r18,56(sp)
  802ccc:	dc400d15 	stw	r17,52(sp)
  802cd0:	a47ff60e 	bge	r20,r17,802cac <___vfprintf_internal_r+0x96c>
  802cd4:	d9014f17 	ldw	r4,1340(sp)
  802cd8:	b00b883a 	mov	r5,r22
  802cdc:	d9800c04 	addi	r6,sp,48
  802ce0:	08022e80 	call	8022e8 <__sprint_r>
  802ce4:	103f4e1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  802ce8:	dc800e17 	ldw	r18,56(sp)
  802cec:	dc400d17 	ldw	r17,52(sp)
  802cf0:	d8c01904 	addi	r3,sp,100
  802cf4:	003fee06 	br	802cb0 <___vfprintf_internal_r+0x970>
  802cf8:	d8802c0b 	ldhu	r2,176(sp)
  802cfc:	00ffffc4 	movi	r3,-1
  802d00:	d8c14b15 	stw	r3,1324(sp)
  802d04:	1080100c 	andi	r2,r2,64
  802d08:	103dcc1e 	bne	r2,zero,80243c <___vfprintf_internal_r+0xfc>
  802d0c:	003dce06 	br	802448 <___vfprintf_internal_r+0x108>
  802d10:	d9014f17 	ldw	r4,1340(sp)
  802d14:	b00b883a 	mov	r5,r22
  802d18:	d9800c04 	addi	r6,sp,48
  802d1c:	08022e80 	call	8022e8 <__sprint_r>
  802d20:	103f3f1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  802d24:	dc800e17 	ldw	r18,56(sp)
  802d28:	003f2e06 	br	8029e4 <___vfprintf_internal_r+0x6a4>
  802d2c:	d9414c17 	ldw	r5,1328(sp)
  802d30:	29400414 	ori	r5,r5,16
  802d34:	d9414c15 	stw	r5,1328(sp)
  802d38:	d9814c17 	ldw	r6,1328(sp)
  802d3c:	3080080c 	andi	r2,r6,32
  802d40:	10014f1e 	bne	r2,zero,803280 <___vfprintf_internal_r+0xf40>
  802d44:	d8c14c17 	ldw	r3,1328(sp)
  802d48:	1880040c 	andi	r2,r3,16
  802d4c:	1002ea1e 	bne	r2,zero,8038f8 <___vfprintf_internal_r+0x15b8>
  802d50:	d9014c17 	ldw	r4,1328(sp)
  802d54:	2080100c 	andi	r2,r4,64
  802d58:	1002e726 	beq	r2,zero,8038f8 <___vfprintf_internal_r+0x15b8>
  802d5c:	3880000f 	ldh	r2,0(r7)
  802d60:	39c00104 	addi	r7,r7,4
  802d64:	d9c14015 	stw	r7,1280(sp)
  802d68:	1023d7fa 	srai	r17,r2,31
  802d6c:	1021883a 	mov	r16,r2
  802d70:	88037216 	blt	r17,zero,803b3c <___vfprintf_internal_r+0x17fc>
  802d74:	01000044 	movi	r4,1
  802d78:	98000416 	blt	r19,zero,802d8c <___vfprintf_internal_r+0xa4c>
  802d7c:	d8c14c17 	ldw	r3,1328(sp)
  802d80:	00bfdfc4 	movi	r2,-129
  802d84:	1886703a 	and	r3,r3,r2
  802d88:	d8c14c15 	stw	r3,1328(sp)
  802d8c:	8444b03a 	or	r2,r16,r17
  802d90:	1002261e 	bne	r2,zero,80362c <___vfprintf_internal_r+0x12ec>
  802d94:	9802251e 	bne	r19,zero,80362c <___vfprintf_internal_r+0x12ec>
  802d98:	20803fcc 	andi	r2,r4,255
  802d9c:	10029b26 	beq	r2,zero,80380c <___vfprintf_internal_r+0x14cc>
  802da0:	d8c01904 	addi	r3,sp,100
  802da4:	dd000f04 	addi	r20,sp,60
  802da8:	d8c14115 	stw	r3,1284(sp)
  802dac:	d8c14117 	ldw	r3,1284(sp)
  802db0:	dcc14515 	stw	r19,1300(sp)
  802db4:	a0c5c83a 	sub	r2,r20,r3
  802db8:	11c00a04 	addi	r7,r2,40
  802dbc:	99c0010e 	bge	r19,r7,802dc4 <___vfprintf_internal_r+0xa84>
  802dc0:	d9c14515 	stw	r7,1300(sp)
  802dc4:	dcc14615 	stw	r19,1304(sp)
  802dc8:	d8800407 	ldb	r2,16(sp)
  802dcc:	103e4c26 	beq	r2,zero,802700 <___vfprintf_internal_r+0x3c0>
  802dd0:	d8814517 	ldw	r2,1300(sp)
  802dd4:	10800044 	addi	r2,r2,1
  802dd8:	d8814515 	stw	r2,1300(sp)
  802ddc:	003e4806 	br	802700 <___vfprintf_internal_r+0x3c0>
  802de0:	d9814c17 	ldw	r6,1328(sp)
  802de4:	31800414 	ori	r6,r6,16
  802de8:	d9814c15 	stw	r6,1328(sp)
  802dec:	d8c14c17 	ldw	r3,1328(sp)
  802df0:	1880080c 	andi	r2,r3,32
  802df4:	1001271e 	bne	r2,zero,803294 <___vfprintf_internal_r+0xf54>
  802df8:	d9414c17 	ldw	r5,1328(sp)
  802dfc:	2880040c 	andi	r2,r5,16
  802e00:	1002b61e 	bne	r2,zero,8038dc <___vfprintf_internal_r+0x159c>
  802e04:	d9814c17 	ldw	r6,1328(sp)
  802e08:	3080100c 	andi	r2,r6,64
  802e0c:	1002b326 	beq	r2,zero,8038dc <___vfprintf_internal_r+0x159c>
  802e10:	3c00000b 	ldhu	r16,0(r7)
  802e14:	0009883a 	mov	r4,zero
  802e18:	39c00104 	addi	r7,r7,4
  802e1c:	0023883a 	mov	r17,zero
  802e20:	d9c14015 	stw	r7,1280(sp)
  802e24:	d8000405 	stb	zero,16(sp)
  802e28:	003fd306 	br	802d78 <___vfprintf_internal_r+0xa38>
  802e2c:	d9014c17 	ldw	r4,1328(sp)
  802e30:	21000414 	ori	r4,r4,16
  802e34:	d9014c15 	stw	r4,1328(sp)
  802e38:	d9414c17 	ldw	r5,1328(sp)
  802e3c:	2880080c 	andi	r2,r5,32
  802e40:	1001081e 	bne	r2,zero,803264 <___vfprintf_internal_r+0xf24>
  802e44:	d8c14c17 	ldw	r3,1328(sp)
  802e48:	1880040c 	andi	r2,r3,16
  802e4c:	1002b01e 	bne	r2,zero,803910 <___vfprintf_internal_r+0x15d0>
  802e50:	d9014c17 	ldw	r4,1328(sp)
  802e54:	2080100c 	andi	r2,r4,64
  802e58:	1002ad26 	beq	r2,zero,803910 <___vfprintf_internal_r+0x15d0>
  802e5c:	3c00000b 	ldhu	r16,0(r7)
  802e60:	01000044 	movi	r4,1
  802e64:	39c00104 	addi	r7,r7,4
  802e68:	0023883a 	mov	r17,zero
  802e6c:	d9c14015 	stw	r7,1280(sp)
  802e70:	d8000405 	stb	zero,16(sp)
  802e74:	003fc006 	br	802d78 <___vfprintf_internal_r+0xa38>
  802e78:	d9014f17 	ldw	r4,1340(sp)
  802e7c:	b00b883a 	mov	r5,r22
  802e80:	d9800c04 	addi	r6,sp,48
  802e84:	08022e80 	call	8022e8 <__sprint_r>
  802e88:	103ee51e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  802e8c:	dc800e17 	ldw	r18,56(sp)
  802e90:	d8c01904 	addi	r3,sp,100
  802e94:	d9814c17 	ldw	r6,1328(sp)
  802e98:	3080004c 	andi	r2,r6,1
  802e9c:	1005003a 	cmpeq	r2,r2,zero
  802ea0:	103ea51e 	bne	r2,zero,802938 <___vfprintf_internal_r+0x5f8>
  802ea4:	00800044 	movi	r2,1
  802ea8:	dc400d17 	ldw	r17,52(sp)
  802eac:	18800115 	stw	r2,4(r3)
  802eb0:	d8814917 	ldw	r2,1316(sp)
  802eb4:	94800044 	addi	r18,r18,1
  802eb8:	8c400044 	addi	r17,r17,1
  802ebc:	18800015 	stw	r2,0(r3)
  802ec0:	008001c4 	movi	r2,7
  802ec4:	dc800e15 	stw	r18,56(sp)
  802ec8:	dc400d15 	stw	r17,52(sp)
  802ecc:	14421e0e 	bge	r2,r17,803748 <___vfprintf_internal_r+0x1408>
  802ed0:	d9014f17 	ldw	r4,1340(sp)
  802ed4:	b00b883a 	mov	r5,r22
  802ed8:	d9800c04 	addi	r6,sp,48
  802edc:	08022e80 	call	8022e8 <__sprint_r>
  802ee0:	103ecf1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  802ee4:	dc800e17 	ldw	r18,56(sp)
  802ee8:	d8c01904 	addi	r3,sp,100
  802eec:	003e9206 	br	802938 <___vfprintf_internal_r+0x5f8>
  802ef0:	d9014f17 	ldw	r4,1340(sp)
  802ef4:	b00b883a 	mov	r5,r22
  802ef8:	d9800c04 	addi	r6,sp,48
  802efc:	08022e80 	call	8022e8 <__sprint_r>
  802f00:	103ec026 	beq	r2,zero,802a04 <___vfprintf_internal_r+0x6c4>
  802f04:	003ec606 	br	802a20 <___vfprintf_internal_r+0x6e0>
  802f08:	d9014f17 	ldw	r4,1340(sp)
  802f0c:	b00b883a 	mov	r5,r22
  802f10:	d9800c04 	addi	r6,sp,48
  802f14:	d9c15115 	stw	r7,1348(sp)
  802f18:	08022e80 	call	8022e8 <__sprint_r>
  802f1c:	d9c15117 	ldw	r7,1348(sp)
  802f20:	103ebf1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  802f24:	dc800e17 	ldw	r18,56(sp)
  802f28:	dc400d17 	ldw	r17,52(sp)
  802f2c:	dd401904 	addi	r21,sp,100
  802f30:	003e7406 	br	802904 <___vfprintf_internal_r+0x5c4>
  802f34:	d9014f17 	ldw	r4,1340(sp)
  802f38:	b00b883a 	mov	r5,r22
  802f3c:	d9800c04 	addi	r6,sp,48
  802f40:	d9c15115 	stw	r7,1348(sp)
  802f44:	08022e80 	call	8022e8 <__sprint_r>
  802f48:	d9c15117 	ldw	r7,1348(sp)
  802f4c:	103eb41e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  802f50:	dd401904 	addi	r21,sp,100
  802f54:	003d6d06 	br	80250c <___vfprintf_internal_r+0x1cc>
  802f58:	d9014f17 	ldw	r4,1340(sp)
  802f5c:	b00b883a 	mov	r5,r22
  802f60:	d9800c04 	addi	r6,sp,48
  802f64:	d9c15115 	stw	r7,1348(sp)
  802f68:	08022e80 	call	8022e8 <__sprint_r>
  802f6c:	d9c15117 	ldw	r7,1348(sp)
  802f70:	103eab1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  802f74:	dc800e17 	ldw	r18,56(sp)
  802f78:	dc400d17 	ldw	r17,52(sp)
  802f7c:	dd401904 	addi	r21,sp,100
  802f80:	003e3406 	br	802854 <___vfprintf_internal_r+0x514>
  802f84:	d9014f17 	ldw	r4,1340(sp)
  802f88:	b00b883a 	mov	r5,r22
  802f8c:	d9800c04 	addi	r6,sp,48
  802f90:	d9c15115 	stw	r7,1348(sp)
  802f94:	08022e80 	call	8022e8 <__sprint_r>
  802f98:	d9c15117 	ldw	r7,1348(sp)
  802f9c:	103ea01e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  802fa0:	dc800e17 	ldw	r18,56(sp)
  802fa4:	dc400d17 	ldw	r17,52(sp)
  802fa8:	dd401904 	addi	r21,sp,100
  802fac:	003e1c06 	br	802820 <___vfprintf_internal_r+0x4e0>
  802fb0:	d9014f17 	ldw	r4,1340(sp)
  802fb4:	b00b883a 	mov	r5,r22
  802fb8:	d9800c04 	addi	r6,sp,48
  802fbc:	d9c15115 	stw	r7,1348(sp)
  802fc0:	08022e80 	call	8022e8 <__sprint_r>
  802fc4:	d9c15117 	ldw	r7,1348(sp)
  802fc8:	103e951e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  802fcc:	dc800e17 	ldw	r18,56(sp)
  802fd0:	dc400d17 	ldw	r17,52(sp)
  802fd4:	dd401904 	addi	r21,sp,100
  802fd8:	003e0406 	br	8027ec <___vfprintf_internal_r+0x4ac>
  802fdc:	d9000517 	ldw	r4,20(sp)
  802fe0:	0102520e 	bge	zero,r4,80392c <___vfprintf_internal_r+0x15ec>
  802fe4:	d9814717 	ldw	r6,1308(sp)
  802fe8:	21807a16 	blt	r4,r6,8031d4 <___vfprintf_internal_r+0xe94>
  802fec:	d8814117 	ldw	r2,1284(sp)
  802ff0:	91a5883a 	add	r18,r18,r6
  802ff4:	8c400044 	addi	r17,r17,1
  802ff8:	a8800015 	stw	r2,0(r21)
  802ffc:	008001c4 	movi	r2,7
  803000:	a9800115 	stw	r6,4(r21)
  803004:	dc800e15 	stw	r18,56(sp)
  803008:	dc400d15 	stw	r17,52(sp)
  80300c:	1442f616 	blt	r2,r17,803be8 <___vfprintf_internal_r+0x18a8>
  803010:	a8c00204 	addi	r3,r21,8
  803014:	d9414717 	ldw	r5,1308(sp)
  803018:	2161c83a 	sub	r16,r4,r5
  80301c:	043f9d0e 	bge	zero,r16,802e94 <___vfprintf_internal_r+0xb54>
  803020:	00800404 	movi	r2,16
  803024:	1402130e 	bge	r2,r16,803874 <___vfprintf_internal_r+0x1534>
  803028:	dc400d17 	ldw	r17,52(sp)
  80302c:	1027883a 	mov	r19,r2
  803030:	07002074 	movhi	fp,129
  803034:	e734eb84 	addi	fp,fp,-11346
  803038:	050001c4 	movi	r20,7
  80303c:	00000306 	br	80304c <___vfprintf_internal_r+0xd0c>
  803040:	18c00204 	addi	r3,r3,8
  803044:	843ffc04 	addi	r16,r16,-16
  803048:	9c020d0e 	bge	r19,r16,803880 <___vfprintf_internal_r+0x1540>
  80304c:	94800404 	addi	r18,r18,16
  803050:	8c400044 	addi	r17,r17,1
  803054:	1f000015 	stw	fp,0(r3)
  803058:	1cc00115 	stw	r19,4(r3)
  80305c:	dc800e15 	stw	r18,56(sp)
  803060:	dc400d15 	stw	r17,52(sp)
  803064:	a47ff60e 	bge	r20,r17,803040 <___vfprintf_internal_r+0xd00>
  803068:	d9014f17 	ldw	r4,1340(sp)
  80306c:	b00b883a 	mov	r5,r22
  803070:	d9800c04 	addi	r6,sp,48
  803074:	08022e80 	call	8022e8 <__sprint_r>
  803078:	103e691e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  80307c:	dc800e17 	ldw	r18,56(sp)
  803080:	dc400d17 	ldw	r17,52(sp)
  803084:	d8c01904 	addi	r3,sp,100
  803088:	003fee06 	br	803044 <___vfprintf_internal_r+0xd04>
  80308c:	d8814717 	ldw	r2,1308(sp)
  803090:	143fffc4 	addi	r16,r2,-1
  803094:	043e970e 	bge	zero,r16,802af4 <___vfprintf_internal_r+0x7b4>
  803098:	00800404 	movi	r2,16
  80309c:	1400180e 	bge	r2,r16,803100 <___vfprintf_internal_r+0xdc0>
  8030a0:	1029883a 	mov	r20,r2
  8030a4:	07002074 	movhi	fp,129
  8030a8:	e734eb84 	addi	fp,fp,-11346
  8030ac:	054001c4 	movi	r21,7
  8030b0:	00000306 	br	8030c0 <___vfprintf_internal_r+0xd80>
  8030b4:	9cc00204 	addi	r19,r19,8
  8030b8:	843ffc04 	addi	r16,r16,-16
  8030bc:	a400120e 	bge	r20,r16,803108 <___vfprintf_internal_r+0xdc8>
  8030c0:	94800404 	addi	r18,r18,16
  8030c4:	8c400044 	addi	r17,r17,1
  8030c8:	9f000015 	stw	fp,0(r19)
  8030cc:	9d000115 	stw	r20,4(r19)
  8030d0:	dc800e15 	stw	r18,56(sp)
  8030d4:	dc400d15 	stw	r17,52(sp)
  8030d8:	ac7ff60e 	bge	r21,r17,8030b4 <___vfprintf_internal_r+0xd74>
  8030dc:	d9014f17 	ldw	r4,1340(sp)
  8030e0:	b00b883a 	mov	r5,r22
  8030e4:	d9800c04 	addi	r6,sp,48
  8030e8:	08022e80 	call	8022e8 <__sprint_r>
  8030ec:	103e4c1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  8030f0:	dc800e17 	ldw	r18,56(sp)
  8030f4:	dc400d17 	ldw	r17,52(sp)
  8030f8:	dcc01904 	addi	r19,sp,100
  8030fc:	003fee06 	br	8030b8 <___vfprintf_internal_r+0xd78>
  803100:	07002074 	movhi	fp,129
  803104:	e734eb84 	addi	fp,fp,-11346
  803108:	9425883a 	add	r18,r18,r16
  80310c:	8c400044 	addi	r17,r17,1
  803110:	008001c4 	movi	r2,7
  803114:	9f000015 	stw	fp,0(r19)
  803118:	9c000115 	stw	r16,4(r19)
  80311c:	dc800e15 	stw	r18,56(sp)
  803120:	dc400d15 	stw	r17,52(sp)
  803124:	147e720e 	bge	r2,r17,802af0 <___vfprintf_internal_r+0x7b0>
  803128:	d9014f17 	ldw	r4,1340(sp)
  80312c:	b00b883a 	mov	r5,r22
  803130:	d9800c04 	addi	r6,sp,48
  803134:	08022e80 	call	8022e8 <__sprint_r>
  803138:	103e391e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  80313c:	dc800e17 	ldw	r18,56(sp)
  803140:	dc400d17 	ldw	r17,52(sp)
  803144:	dcc01904 	addi	r19,sp,100
  803148:	003e6a06 	br	802af4 <___vfprintf_internal_r+0x7b4>
  80314c:	d9014f17 	ldw	r4,1340(sp)
  803150:	b00b883a 	mov	r5,r22
  803154:	d9800c04 	addi	r6,sp,48
  803158:	d9c15115 	stw	r7,1348(sp)
  80315c:	08022e80 	call	8022e8 <__sprint_r>
  803160:	d9c15117 	ldw	r7,1348(sp)
  803164:	103e2e1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  803168:	dc800e17 	ldw	r18,56(sp)
  80316c:	dc400d17 	ldw	r17,52(sp)
  803170:	dd401904 	addi	r21,sp,100
  803174:	003dba06 	br	802860 <___vfprintf_internal_r+0x520>
  803178:	d9014f17 	ldw	r4,1340(sp)
  80317c:	b00b883a 	mov	r5,r22
  803180:	d9800c04 	addi	r6,sp,48
  803184:	08022e80 	call	8022e8 <__sprint_r>
  803188:	103e251e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  80318c:	dc800e17 	ldw	r18,56(sp)
  803190:	dc400d17 	ldw	r17,52(sp)
  803194:	dcc01904 	addi	r19,sp,100
  803198:	003e4206 	br	802aa4 <___vfprintf_internal_r+0x764>
  80319c:	d9014f17 	ldw	r4,1340(sp)
  8031a0:	b00b883a 	mov	r5,r22
  8031a4:	d9800c04 	addi	r6,sp,48
  8031a8:	08022e80 	call	8022e8 <__sprint_r>
  8031ac:	103e1c1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  8031b0:	dc800e17 	ldw	r18,56(sp)
  8031b4:	dc400d17 	ldw	r17,52(sp)
  8031b8:	d8c01904 	addi	r3,sp,100
  8031bc:	003e2e06 	br	802a78 <___vfprintf_internal_r+0x738>
  8031c0:	d9414c17 	ldw	r5,1328(sp)
  8031c4:	2880004c 	andi	r2,r5,1
  8031c8:	1005003a 	cmpeq	r2,r2,zero
  8031cc:	103dda1e 	bne	r2,zero,802938 <___vfprintf_internal_r+0x5f8>
  8031d0:	003e9f06 	br	802c50 <___vfprintf_internal_r+0x910>
  8031d4:	d8c14117 	ldw	r3,1284(sp)
  8031d8:	9125883a 	add	r18,r18,r4
  8031dc:	8c400044 	addi	r17,r17,1
  8031e0:	008001c4 	movi	r2,7
  8031e4:	a8c00015 	stw	r3,0(r21)
  8031e8:	a9000115 	stw	r4,4(r21)
  8031ec:	dc800e15 	stw	r18,56(sp)
  8031f0:	dc400d15 	stw	r17,52(sp)
  8031f4:	14426616 	blt	r2,r17,803b90 <___vfprintf_internal_r+0x1850>
  8031f8:	a8c00204 	addi	r3,r21,8
  8031fc:	d9414917 	ldw	r5,1316(sp)
  803200:	00800044 	movi	r2,1
  803204:	94800044 	addi	r18,r18,1
  803208:	8c400044 	addi	r17,r17,1
  80320c:	18800115 	stw	r2,4(r3)
  803210:	008001c4 	movi	r2,7
  803214:	19400015 	stw	r5,0(r3)
  803218:	dc800e15 	stw	r18,56(sp)
  80321c:	dc400d15 	stw	r17,52(sp)
  803220:	2021883a 	mov	r16,r4
  803224:	14425016 	blt	r2,r17,803b68 <___vfprintf_internal_r+0x1828>
  803228:	19400204 	addi	r5,r3,8
  80322c:	d9814717 	ldw	r6,1308(sp)
  803230:	8c400044 	addi	r17,r17,1
  803234:	dc400d15 	stw	r17,52(sp)
  803238:	3107c83a 	sub	r3,r6,r4
  80323c:	d9014117 	ldw	r4,1284(sp)
  803240:	90e5883a 	add	r18,r18,r3
  803244:	28c00115 	stw	r3,4(r5)
  803248:	8105883a 	add	r2,r16,r4
  80324c:	28800015 	stw	r2,0(r5)
  803250:	008001c4 	movi	r2,7
  803254:	dc800e15 	stw	r18,56(sp)
  803258:	147f1d16 	blt	r2,r17,802ed0 <___vfprintf_internal_r+0xb90>
  80325c:	28c00204 	addi	r3,r5,8
  803260:	003db506 	br	802938 <___vfprintf_internal_r+0x5f8>
  803264:	3c000017 	ldw	r16,0(r7)
  803268:	3c400117 	ldw	r17,4(r7)
  80326c:	39800204 	addi	r6,r7,8
  803270:	01000044 	movi	r4,1
  803274:	d9814015 	stw	r6,1280(sp)
  803278:	d8000405 	stb	zero,16(sp)
  80327c:	003ebe06 	br	802d78 <___vfprintf_internal_r+0xa38>
  803280:	3c000017 	ldw	r16,0(r7)
  803284:	3c400117 	ldw	r17,4(r7)
  803288:	38800204 	addi	r2,r7,8
  80328c:	d8814015 	stw	r2,1280(sp)
  803290:	003eb706 	br	802d70 <___vfprintf_internal_r+0xa30>
  803294:	3c000017 	ldw	r16,0(r7)
  803298:	3c400117 	ldw	r17,4(r7)
  80329c:	39000204 	addi	r4,r7,8
  8032a0:	d9014015 	stw	r4,1280(sp)
  8032a4:	0009883a 	mov	r4,zero
  8032a8:	d8000405 	stb	zero,16(sp)
  8032ac:	003eb206 	br	802d78 <___vfprintf_internal_r+0xa38>
  8032b0:	38c00017 	ldw	r3,0(r7)
  8032b4:	39c00104 	addi	r7,r7,4
  8032b8:	d8c14a15 	stw	r3,1320(sp)
  8032bc:	1800d10e 	bge	r3,zero,803604 <___vfprintf_internal_r+0x12c4>
  8032c0:	00c7c83a 	sub	r3,zero,r3
  8032c4:	d8c14a15 	stw	r3,1320(sp)
  8032c8:	d9014c17 	ldw	r4,1328(sp)
  8032cc:	b8c00007 	ldb	r3,0(r23)
  8032d0:	21000114 	ori	r4,r4,4
  8032d4:	d9014c15 	stw	r4,1328(sp)
  8032d8:	003c9806 	br	80253c <___vfprintf_internal_r+0x1fc>
  8032dc:	d9814c17 	ldw	r6,1328(sp)
  8032e0:	3080080c 	andi	r2,r6,32
  8032e4:	1001f026 	beq	r2,zero,803aa8 <___vfprintf_internal_r+0x1768>
  8032e8:	d9014b17 	ldw	r4,1324(sp)
  8032ec:	38800017 	ldw	r2,0(r7)
  8032f0:	39c00104 	addi	r7,r7,4
  8032f4:	d9c14015 	stw	r7,1280(sp)
  8032f8:	2007d7fa 	srai	r3,r4,31
  8032fc:	d9c14017 	ldw	r7,1280(sp)
  803300:	11000015 	stw	r4,0(r2)
  803304:	10c00115 	stw	r3,4(r2)
  803308:	003c6906 	br	8024b0 <___vfprintf_internal_r+0x170>
  80330c:	b8c00007 	ldb	r3,0(r23)
  803310:	00801b04 	movi	r2,108
  803314:	18824f26 	beq	r3,r2,803c54 <___vfprintf_internal_r+0x1914>
  803318:	d9414c17 	ldw	r5,1328(sp)
  80331c:	29400414 	ori	r5,r5,16
  803320:	d9414c15 	stw	r5,1328(sp)
  803324:	003c8506 	br	80253c <___vfprintf_internal_r+0x1fc>
  803328:	d9814c17 	ldw	r6,1328(sp)
  80332c:	b8c00007 	ldb	r3,0(r23)
  803330:	31800814 	ori	r6,r6,32
  803334:	d9814c15 	stw	r6,1328(sp)
  803338:	003c8006 	br	80253c <___vfprintf_internal_r+0x1fc>
  80333c:	d8814c17 	ldw	r2,1328(sp)
  803340:	3c000017 	ldw	r16,0(r7)
  803344:	00c01e04 	movi	r3,120
  803348:	10800094 	ori	r2,r2,2
  80334c:	d8814c15 	stw	r2,1328(sp)
  803350:	39c00104 	addi	r7,r7,4
  803354:	01402074 	movhi	r5,129
  803358:	2974d404 	addi	r5,r5,-11440
  80335c:	00800c04 	movi	r2,48
  803360:	0023883a 	mov	r17,zero
  803364:	01000084 	movi	r4,2
  803368:	d9c14015 	stw	r7,1280(sp)
  80336c:	d8c14d15 	stw	r3,1332(sp)
  803370:	d9414415 	stw	r5,1296(sp)
  803374:	d8800445 	stb	r2,17(sp)
  803378:	d8c00485 	stb	r3,18(sp)
  80337c:	d8000405 	stb	zero,16(sp)
  803380:	003e7d06 	br	802d78 <___vfprintf_internal_r+0xa38>
  803384:	d8814c17 	ldw	r2,1328(sp)
  803388:	b8c00007 	ldb	r3,0(r23)
  80338c:	10801014 	ori	r2,r2,64
  803390:	d8814c15 	stw	r2,1328(sp)
  803394:	003c6906 	br	80253c <___vfprintf_internal_r+0x1fc>
  803398:	d9414c17 	ldw	r5,1328(sp)
  80339c:	2880020c 	andi	r2,r5,8
  8033a0:	1001df26 	beq	r2,zero,803b20 <___vfprintf_internal_r+0x17e0>
  8033a4:	39800017 	ldw	r6,0(r7)
  8033a8:	38800204 	addi	r2,r7,8
  8033ac:	d8814015 	stw	r2,1280(sp)
  8033b0:	d9814215 	stw	r6,1288(sp)
  8033b4:	39c00117 	ldw	r7,4(r7)
  8033b8:	d9c14315 	stw	r7,1292(sp)
  8033bc:	d9014217 	ldw	r4,1288(sp)
  8033c0:	d9414317 	ldw	r5,1292(sp)
  8033c4:	08082400 	call	808240 <__isinfd>
  8033c8:	10021726 	beq	r2,zero,803c28 <___vfprintf_internal_r+0x18e8>
  8033cc:	d9014217 	ldw	r4,1288(sp)
  8033d0:	d9414317 	ldw	r5,1292(sp)
  8033d4:	000d883a 	mov	r6,zero
  8033d8:	000f883a 	mov	r7,zero
  8033dc:	0809dd00 	call	809dd0 <__ltdf2>
  8033e0:	1002ca16 	blt	r2,zero,803f0c <___vfprintf_internal_r+0x1bcc>
  8033e4:	d9414d17 	ldw	r5,1332(sp)
  8033e8:	008011c4 	movi	r2,71
  8033ec:	11420a16 	blt	r2,r5,803c18 <___vfprintf_internal_r+0x18d8>
  8033f0:	01802074 	movhi	r6,129
  8033f4:	31b4d904 	addi	r6,r6,-11420
  8033f8:	d9814115 	stw	r6,1284(sp)
  8033fc:	d9014c17 	ldw	r4,1328(sp)
  803400:	00c000c4 	movi	r3,3
  803404:	00bfdfc4 	movi	r2,-129
  803408:	2088703a 	and	r4,r4,r2
  80340c:	180f883a 	mov	r7,r3
  803410:	d8c14515 	stw	r3,1300(sp)
  803414:	d9014c15 	stw	r4,1328(sp)
  803418:	d8014615 	stw	zero,1304(sp)
  80341c:	003e6a06 	br	802dc8 <___vfprintf_internal_r+0xa88>
  803420:	38800017 	ldw	r2,0(r7)
  803424:	00c00044 	movi	r3,1
  803428:	39c00104 	addi	r7,r7,4
  80342c:	d9c14015 	stw	r7,1280(sp)
  803430:	d9000f04 	addi	r4,sp,60
  803434:	180f883a 	mov	r7,r3
  803438:	d8c14515 	stw	r3,1300(sp)
  80343c:	d9014115 	stw	r4,1284(sp)
  803440:	d8800f05 	stb	r2,60(sp)
  803444:	d8000405 	stb	zero,16(sp)
  803448:	003cac06 	br	8026fc <___vfprintf_internal_r+0x3bc>
  80344c:	01402074 	movhi	r5,129
  803450:	2974df04 	addi	r5,r5,-11396
  803454:	d9414415 	stw	r5,1296(sp)
  803458:	d9814c17 	ldw	r6,1328(sp)
  80345c:	3080080c 	andi	r2,r6,32
  803460:	1000f926 	beq	r2,zero,803848 <___vfprintf_internal_r+0x1508>
  803464:	3c000017 	ldw	r16,0(r7)
  803468:	3c400117 	ldw	r17,4(r7)
  80346c:	38800204 	addi	r2,r7,8
  803470:	d8814015 	stw	r2,1280(sp)
  803474:	d9414c17 	ldw	r5,1328(sp)
  803478:	2880004c 	andi	r2,r5,1
  80347c:	1005003a 	cmpeq	r2,r2,zero
  803480:	1000b31e 	bne	r2,zero,803750 <___vfprintf_internal_r+0x1410>
  803484:	8444b03a 	or	r2,r16,r17
  803488:	1000b126 	beq	r2,zero,803750 <___vfprintf_internal_r+0x1410>
  80348c:	d9814d17 	ldw	r6,1332(sp)
  803490:	29400094 	ori	r5,r5,2
  803494:	00800c04 	movi	r2,48
  803498:	01000084 	movi	r4,2
  80349c:	d9414c15 	stw	r5,1328(sp)
  8034a0:	d8800445 	stb	r2,17(sp)
  8034a4:	d9800485 	stb	r6,18(sp)
  8034a8:	d8000405 	stb	zero,16(sp)
  8034ac:	003e3206 	br	802d78 <___vfprintf_internal_r+0xa38>
  8034b0:	01802074 	movhi	r6,129
  8034b4:	31b4d404 	addi	r6,r6,-11440
  8034b8:	d9814415 	stw	r6,1296(sp)
  8034bc:	003fe606 	br	803458 <___vfprintf_internal_r+0x1118>
  8034c0:	00800ac4 	movi	r2,43
  8034c4:	d8800405 	stb	r2,16(sp)
  8034c8:	b8c00007 	ldb	r3,0(r23)
  8034cc:	003c1b06 	br	80253c <___vfprintf_internal_r+0x1fc>
  8034d0:	d8814c17 	ldw	r2,1328(sp)
  8034d4:	b8c00007 	ldb	r3,0(r23)
  8034d8:	10800054 	ori	r2,r2,1
  8034dc:	d8814c15 	stw	r2,1328(sp)
  8034e0:	003c1606 	br	80253c <___vfprintf_internal_r+0x1fc>
  8034e4:	d8800407 	ldb	r2,16(sp)
  8034e8:	1000461e 	bne	r2,zero,803604 <___vfprintf_internal_r+0x12c4>
  8034ec:	00800804 	movi	r2,32
  8034f0:	d8800405 	stb	r2,16(sp)
  8034f4:	b8c00007 	ldb	r3,0(r23)
  8034f8:	003c1006 	br	80253c <___vfprintf_internal_r+0x1fc>
  8034fc:	d9814c17 	ldw	r6,1328(sp)
  803500:	b8c00007 	ldb	r3,0(r23)
  803504:	31800214 	ori	r6,r6,8
  803508:	d9814c15 	stw	r6,1328(sp)
  80350c:	003c0b06 	br	80253c <___vfprintf_internal_r+0x1fc>
  803510:	0007883a 	mov	r3,zero
  803514:	01000244 	movi	r4,9
  803518:	188002a4 	muli	r2,r3,10
  80351c:	b8c00007 	ldb	r3,0(r23)
  803520:	d9814d17 	ldw	r6,1332(sp)
  803524:	bdc00044 	addi	r23,r23,1
  803528:	d8c14d15 	stw	r3,1332(sp)
  80352c:	d9414d17 	ldw	r5,1332(sp)
  803530:	3085883a 	add	r2,r6,r2
  803534:	10fff404 	addi	r3,r2,-48
  803538:	28bff404 	addi	r2,r5,-48
  80353c:	20bff62e 	bgeu	r4,r2,803518 <___vfprintf_internal_r+0x11d8>
  803540:	d8c14a15 	stw	r3,1320(sp)
  803544:	003bff06 	br	802544 <___vfprintf_internal_r+0x204>
  803548:	d9414c17 	ldw	r5,1328(sp)
  80354c:	b8c00007 	ldb	r3,0(r23)
  803550:	29402014 	ori	r5,r5,128
  803554:	d9414c15 	stw	r5,1328(sp)
  803558:	003bf806 	br	80253c <___vfprintf_internal_r+0x1fc>
  80355c:	b8c00007 	ldb	r3,0(r23)
  803560:	00800a84 	movi	r2,42
  803564:	bdc00044 	addi	r23,r23,1
  803568:	18831526 	beq	r3,r2,8041c0 <___vfprintf_internal_r+0x1e80>
  80356c:	d8c14d15 	stw	r3,1332(sp)
  803570:	18bff404 	addi	r2,r3,-48
  803574:	00c00244 	movi	r3,9
  803578:	18827836 	bltu	r3,r2,803f5c <___vfprintf_internal_r+0x1c1c>
  80357c:	000d883a 	mov	r6,zero
  803580:	308002a4 	muli	r2,r6,10
  803584:	b9800007 	ldb	r6,0(r23)
  803588:	d9414d17 	ldw	r5,1332(sp)
  80358c:	bdc00044 	addi	r23,r23,1
  803590:	d9814d15 	stw	r6,1332(sp)
  803594:	d9014d17 	ldw	r4,1332(sp)
  803598:	1145883a 	add	r2,r2,r5
  80359c:	11bff404 	addi	r6,r2,-48
  8035a0:	20bff404 	addi	r2,r4,-48
  8035a4:	18bff62e 	bgeu	r3,r2,803580 <___vfprintf_internal_r+0x1240>
  8035a8:	3027883a 	mov	r19,r6
  8035ac:	303be50e 	bge	r6,zero,802544 <___vfprintf_internal_r+0x204>
  8035b0:	04ffffc4 	movi	r19,-1
  8035b4:	003be306 	br	802544 <___vfprintf_internal_r+0x204>
  8035b8:	d8000405 	stb	zero,16(sp)
  8035bc:	39800017 	ldw	r6,0(r7)
  8035c0:	39c00104 	addi	r7,r7,4
  8035c4:	d9c14015 	stw	r7,1280(sp)
  8035c8:	d9814115 	stw	r6,1284(sp)
  8035cc:	3001c926 	beq	r6,zero,803cf4 <___vfprintf_internal_r+0x19b4>
  8035d0:	98000e16 	blt	r19,zero,80360c <___vfprintf_internal_r+0x12cc>
  8035d4:	d9014117 	ldw	r4,1284(sp)
  8035d8:	000b883a 	mov	r5,zero
  8035dc:	980d883a 	mov	r6,r19
  8035e0:	0801b900 	call	801b90 <memchr>
  8035e4:	10025926 	beq	r2,zero,803f4c <___vfprintf_internal_r+0x1c0c>
  8035e8:	d8c14117 	ldw	r3,1284(sp)
  8035ec:	10cfc83a 	sub	r7,r2,r3
  8035f0:	99c19e16 	blt	r19,r7,803c6c <___vfprintf_internal_r+0x192c>
  8035f4:	d9c14515 	stw	r7,1300(sp)
  8035f8:	38000916 	blt	r7,zero,803620 <___vfprintf_internal_r+0x12e0>
  8035fc:	d8014615 	stw	zero,1304(sp)
  803600:	003df106 	br	802dc8 <___vfprintf_internal_r+0xa88>
  803604:	b8c00007 	ldb	r3,0(r23)
  803608:	003bcc06 	br	80253c <___vfprintf_internal_r+0x1fc>
  80360c:	d9014117 	ldw	r4,1284(sp)
  803610:	08022740 	call	802274 <strlen>
  803614:	d8814515 	stw	r2,1300(sp)
  803618:	100f883a 	mov	r7,r2
  80361c:	103ff70e 	bge	r2,zero,8035fc <___vfprintf_internal_r+0x12bc>
  803620:	d8014515 	stw	zero,1300(sp)
  803624:	d8014615 	stw	zero,1304(sp)
  803628:	003de706 	br	802dc8 <___vfprintf_internal_r+0xa88>
  80362c:	20c03fcc 	andi	r3,r4,255
  803630:	00800044 	movi	r2,1
  803634:	18802d26 	beq	r3,r2,8036ec <___vfprintf_internal_r+0x13ac>
  803638:	18800e36 	bltu	r3,r2,803674 <___vfprintf_internal_r+0x1334>
  80363c:	00800084 	movi	r2,2
  803640:	1880fa26 	beq	r3,r2,803a2c <___vfprintf_internal_r+0x16ec>
  803644:	01002074 	movhi	r4,129
  803648:	2134e404 	addi	r4,r4,-11376
  80364c:	08022740 	call	802274 <strlen>
  803650:	100f883a 	mov	r7,r2
  803654:	dcc14515 	stw	r19,1300(sp)
  803658:	9880010e 	bge	r19,r2,803660 <___vfprintf_internal_r+0x1320>
  80365c:	d8814515 	stw	r2,1300(sp)
  803660:	00802074 	movhi	r2,129
  803664:	10b4e404 	addi	r2,r2,-11376
  803668:	dcc14615 	stw	r19,1304(sp)
  80366c:	d8814115 	stw	r2,1284(sp)
  803670:	003dd506 	br	802dc8 <___vfprintf_internal_r+0xa88>
  803674:	d9401904 	addi	r5,sp,100
  803678:	dd000f04 	addi	r20,sp,60
  80367c:	d9414115 	stw	r5,1284(sp)
  803680:	880a977a 	slli	r5,r17,29
  803684:	d9814117 	ldw	r6,1284(sp)
  803688:	8004d0fa 	srli	r2,r16,3
  80368c:	8806d0fa 	srli	r3,r17,3
  803690:	810001cc 	andi	r4,r16,7
  803694:	2884b03a 	or	r2,r5,r2
  803698:	31bfffc4 	addi	r6,r6,-1
  80369c:	21000c04 	addi	r4,r4,48
  8036a0:	d9814115 	stw	r6,1284(sp)
  8036a4:	10cab03a 	or	r5,r2,r3
  8036a8:	31000005 	stb	r4,0(r6)
  8036ac:	1021883a 	mov	r16,r2
  8036b0:	1823883a 	mov	r17,r3
  8036b4:	283ff21e 	bne	r5,zero,803680 <___vfprintf_internal_r+0x1340>
  8036b8:	d8c14c17 	ldw	r3,1328(sp)
  8036bc:	1880004c 	andi	r2,r3,1
  8036c0:	1005003a 	cmpeq	r2,r2,zero
  8036c4:	103db91e 	bne	r2,zero,802dac <___vfprintf_internal_r+0xa6c>
  8036c8:	20803fcc 	andi	r2,r4,255
  8036cc:	1080201c 	xori	r2,r2,128
  8036d0:	10bfe004 	addi	r2,r2,-128
  8036d4:	00c00c04 	movi	r3,48
  8036d8:	10fdb426 	beq	r2,r3,802dac <___vfprintf_internal_r+0xa6c>
  8036dc:	31bfffc4 	addi	r6,r6,-1
  8036e0:	d9814115 	stw	r6,1284(sp)
  8036e4:	30c00005 	stb	r3,0(r6)
  8036e8:	003db006 	br	802dac <___vfprintf_internal_r+0xa6c>
  8036ec:	88800068 	cmpgeui	r2,r17,1
  8036f0:	10002c1e 	bne	r2,zero,8037a4 <___vfprintf_internal_r+0x1464>
  8036f4:	8800021e 	bne	r17,zero,803700 <___vfprintf_internal_r+0x13c0>
  8036f8:	00800244 	movi	r2,9
  8036fc:	14002936 	bltu	r2,r16,8037a4 <___vfprintf_internal_r+0x1464>
  803700:	d90018c4 	addi	r4,sp,99
  803704:	dd000f04 	addi	r20,sp,60
  803708:	d9014115 	stw	r4,1284(sp)
  80370c:	d9014117 	ldw	r4,1284(sp)
  803710:	80800c04 	addi	r2,r16,48
  803714:	20800005 	stb	r2,0(r4)
  803718:	003da406 	br	802dac <___vfprintf_internal_r+0xa6c>
  80371c:	dc400d17 	ldw	r17,52(sp)
  803720:	07002074 	movhi	fp,129
  803724:	e734eb84 	addi	fp,fp,-11346
  803728:	9425883a 	add	r18,r18,r16
  80372c:	8c400044 	addi	r17,r17,1
  803730:	008001c4 	movi	r2,7
  803734:	1f000015 	stw	fp,0(r3)
  803738:	1c000115 	stw	r16,4(r3)
  80373c:	dc800e15 	stw	r18,56(sp)
  803740:	dc400d15 	stw	r17,52(sp)
  803744:	147de216 	blt	r2,r17,802ed0 <___vfprintf_internal_r+0xb90>
  803748:	18c00204 	addi	r3,r3,8
  80374c:	003c7a06 	br	802938 <___vfprintf_internal_r+0x5f8>
  803750:	01000084 	movi	r4,2
  803754:	d8000405 	stb	zero,16(sp)
  803758:	003d8706 	br	802d78 <___vfprintf_internal_r+0xa38>
  80375c:	d9814c17 	ldw	r6,1328(sp)
  803760:	30c4703a 	and	r2,r6,r3
  803764:	1005003a 	cmpeq	r2,r2,zero
  803768:	103cb926 	beq	r2,zero,802a50 <___vfprintf_internal_r+0x710>
  80376c:	d9014117 	ldw	r4,1284(sp)
  803770:	94800044 	addi	r18,r18,1
  803774:	8c400044 	addi	r17,r17,1
  803778:	008001c4 	movi	r2,7
  80377c:	a9000015 	stw	r4,0(r21)
  803780:	a8c00115 	stw	r3,4(r21)
  803784:	dc800e15 	stw	r18,56(sp)
  803788:	dc400d15 	stw	r17,52(sp)
  80378c:	147e6616 	blt	r2,r17,803128 <___vfprintf_internal_r+0xde8>
  803790:	acc00204 	addi	r19,r21,8
  803794:	003cd706 	br	802af4 <___vfprintf_internal_r+0x7b4>
  803798:	07002074 	movhi	fp,129
  80379c:	e734eb84 	addi	fp,fp,-11346
  8037a0:	003c4f06 	br	8028e0 <___vfprintf_internal_r+0x5a0>
  8037a4:	dd000f04 	addi	r20,sp,60
  8037a8:	dc801904 	addi	r18,sp,100
  8037ac:	8009883a 	mov	r4,r16
  8037b0:	880b883a 	mov	r5,r17
  8037b4:	01800284 	movi	r6,10
  8037b8:	000f883a 	mov	r7,zero
  8037bc:	0808ae00 	call	808ae0 <__umoddi3>
  8037c0:	12000c04 	addi	r8,r2,48
  8037c4:	94bfffc4 	addi	r18,r18,-1
  8037c8:	8009883a 	mov	r4,r16
  8037cc:	880b883a 	mov	r5,r17
  8037d0:	01800284 	movi	r6,10
  8037d4:	000f883a 	mov	r7,zero
  8037d8:	92000005 	stb	r8,0(r18)
  8037dc:	08085040 	call	808504 <__udivdi3>
  8037e0:	1009883a 	mov	r4,r2
  8037e4:	1021883a 	mov	r16,r2
  8037e8:	18800068 	cmpgeui	r2,r3,1
  8037ec:	1823883a 	mov	r17,r3
  8037f0:	103fee1e 	bne	r2,zero,8037ac <___vfprintf_internal_r+0x146c>
  8037f4:	1800021e 	bne	r3,zero,803800 <___vfprintf_internal_r+0x14c0>
  8037f8:	00800244 	movi	r2,9
  8037fc:	113feb36 	bltu	r2,r4,8037ac <___vfprintf_internal_r+0x146c>
  803800:	94bfffc4 	addi	r18,r18,-1
  803804:	dc814115 	stw	r18,1284(sp)
  803808:	003fc006 	br	80370c <___vfprintf_internal_r+0x13cc>
  80380c:	d9014c17 	ldw	r4,1328(sp)
  803810:	2080004c 	andi	r2,r4,1
  803814:	10009a1e 	bne	r2,zero,803a80 <___vfprintf_internal_r+0x1740>
  803818:	d9401904 	addi	r5,sp,100
  80381c:	dd000f04 	addi	r20,sp,60
  803820:	d9414115 	stw	r5,1284(sp)
  803824:	003d6106 	br	802dac <___vfprintf_internal_r+0xa6c>
  803828:	d9014f17 	ldw	r4,1340(sp)
  80382c:	b00b883a 	mov	r5,r22
  803830:	d9800c04 	addi	r6,sp,48
  803834:	08022e80 	call	8022e8 <__sprint_r>
  803838:	103c791e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  80383c:	dc800e17 	ldw	r18,56(sp)
  803840:	d8c01904 	addi	r3,sp,100
  803844:	003cff06 	br	802c44 <___vfprintf_internal_r+0x904>
  803848:	d8c14c17 	ldw	r3,1328(sp)
  80384c:	1880040c 	andi	r2,r3,16
  803850:	1000711e 	bne	r2,zero,803a18 <___vfprintf_internal_r+0x16d8>
  803854:	d9014c17 	ldw	r4,1328(sp)
  803858:	2080100c 	andi	r2,r4,64
  80385c:	10006e26 	beq	r2,zero,803a18 <___vfprintf_internal_r+0x16d8>
  803860:	3c00000b 	ldhu	r16,0(r7)
  803864:	0023883a 	mov	r17,zero
  803868:	39c00104 	addi	r7,r7,4
  80386c:	d9c14015 	stw	r7,1280(sp)
  803870:	003f0006 	br	803474 <___vfprintf_internal_r+0x1134>
  803874:	dc400d17 	ldw	r17,52(sp)
  803878:	07002074 	movhi	fp,129
  80387c:	e734eb84 	addi	fp,fp,-11346
  803880:	9425883a 	add	r18,r18,r16
  803884:	8c400044 	addi	r17,r17,1
  803888:	008001c4 	movi	r2,7
  80388c:	1f000015 	stw	fp,0(r3)
  803890:	1c000115 	stw	r16,4(r3)
  803894:	dc800e15 	stw	r18,56(sp)
  803898:	dc400d15 	stw	r17,52(sp)
  80389c:	147d7616 	blt	r2,r17,802e78 <___vfprintf_internal_r+0xb38>
  8038a0:	18c00204 	addi	r3,r3,8
  8038a4:	003d7b06 	br	802e94 <___vfprintf_internal_r+0xb54>
  8038a8:	dc800e17 	ldw	r18,56(sp)
  8038ac:	dc400d17 	ldw	r17,52(sp)
  8038b0:	07002074 	movhi	fp,129
  8038b4:	e734ef84 	addi	fp,fp,-11330
  8038b8:	003bc006 	br	8027bc <___vfprintf_internal_r+0x47c>
  8038bc:	d9014f17 	ldw	r4,1340(sp)
  8038c0:	b00b883a 	mov	r5,r22
  8038c4:	d9800c04 	addi	r6,sp,48
  8038c8:	08022e80 	call	8022e8 <__sprint_r>
  8038cc:	103c541e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  8038d0:	dc800e17 	ldw	r18,56(sp)
  8038d4:	d8c01904 	addi	r3,sp,100
  8038d8:	003ce906 	br	802c80 <___vfprintf_internal_r+0x940>
  8038dc:	3c000017 	ldw	r16,0(r7)
  8038e0:	0009883a 	mov	r4,zero
  8038e4:	39c00104 	addi	r7,r7,4
  8038e8:	0023883a 	mov	r17,zero
  8038ec:	d9c14015 	stw	r7,1280(sp)
  8038f0:	d8000405 	stb	zero,16(sp)
  8038f4:	003d2006 	br	802d78 <___vfprintf_internal_r+0xa38>
  8038f8:	38800017 	ldw	r2,0(r7)
  8038fc:	39c00104 	addi	r7,r7,4
  803900:	d9c14015 	stw	r7,1280(sp)
  803904:	1023d7fa 	srai	r17,r2,31
  803908:	1021883a 	mov	r16,r2
  80390c:	003d1806 	br	802d70 <___vfprintf_internal_r+0xa30>
  803910:	3c000017 	ldw	r16,0(r7)
  803914:	01000044 	movi	r4,1
  803918:	39c00104 	addi	r7,r7,4
  80391c:	0023883a 	mov	r17,zero
  803920:	d9c14015 	stw	r7,1280(sp)
  803924:	d8000405 	stb	zero,16(sp)
  803928:	003d1306 	br	802d78 <___vfprintf_internal_r+0xa38>
  80392c:	00802074 	movhi	r2,129
  803930:	10b4eb04 	addi	r2,r2,-11348
  803934:	94800044 	addi	r18,r18,1
  803938:	8c400044 	addi	r17,r17,1
  80393c:	a8800015 	stw	r2,0(r21)
  803940:	00c00044 	movi	r3,1
  803944:	008001c4 	movi	r2,7
  803948:	a8c00115 	stw	r3,4(r21)
  80394c:	dc800e15 	stw	r18,56(sp)
  803950:	dc400d15 	stw	r17,52(sp)
  803954:	1440ca16 	blt	r2,r17,803c80 <___vfprintf_internal_r+0x1940>
  803958:	a8c00204 	addi	r3,r21,8
  80395c:	2000061e 	bne	r4,zero,803978 <___vfprintf_internal_r+0x1638>
  803960:	d9414717 	ldw	r5,1308(sp)
  803964:	2800041e 	bne	r5,zero,803978 <___vfprintf_internal_r+0x1638>
  803968:	d9814c17 	ldw	r6,1328(sp)
  80396c:	3080004c 	andi	r2,r6,1
  803970:	1005003a 	cmpeq	r2,r2,zero
  803974:	103bf01e 	bne	r2,zero,802938 <___vfprintf_internal_r+0x5f8>
  803978:	00800044 	movi	r2,1
  80397c:	dc400d17 	ldw	r17,52(sp)
  803980:	18800115 	stw	r2,4(r3)
  803984:	d8814917 	ldw	r2,1316(sp)
  803988:	94800044 	addi	r18,r18,1
  80398c:	8c400044 	addi	r17,r17,1
  803990:	18800015 	stw	r2,0(r3)
  803994:	008001c4 	movi	r2,7
  803998:	dc800e15 	stw	r18,56(sp)
  80399c:	dc400d15 	stw	r17,52(sp)
  8039a0:	1440ca16 	blt	r2,r17,803ccc <___vfprintf_internal_r+0x198c>
  8039a4:	18c00204 	addi	r3,r3,8
  8039a8:	0121c83a 	sub	r16,zero,r4
  8039ac:	0400500e 	bge	zero,r16,803af0 <___vfprintf_internal_r+0x17b0>
  8039b0:	00800404 	movi	r2,16
  8039b4:	1400800e 	bge	r2,r16,803bb8 <___vfprintf_internal_r+0x1878>
  8039b8:	1027883a 	mov	r19,r2
  8039bc:	07002074 	movhi	fp,129
  8039c0:	e734eb84 	addi	fp,fp,-11346
  8039c4:	050001c4 	movi	r20,7
  8039c8:	00000306 	br	8039d8 <___vfprintf_internal_r+0x1698>
  8039cc:	18c00204 	addi	r3,r3,8
  8039d0:	843ffc04 	addi	r16,r16,-16
  8039d4:	9c007a0e 	bge	r19,r16,803bc0 <___vfprintf_internal_r+0x1880>
  8039d8:	94800404 	addi	r18,r18,16
  8039dc:	8c400044 	addi	r17,r17,1
  8039e0:	1f000015 	stw	fp,0(r3)
  8039e4:	1cc00115 	stw	r19,4(r3)
  8039e8:	dc800e15 	stw	r18,56(sp)
  8039ec:	dc400d15 	stw	r17,52(sp)
  8039f0:	a47ff60e 	bge	r20,r17,8039cc <___vfprintf_internal_r+0x168c>
  8039f4:	d9014f17 	ldw	r4,1340(sp)
  8039f8:	b00b883a 	mov	r5,r22
  8039fc:	d9800c04 	addi	r6,sp,48
  803a00:	08022e80 	call	8022e8 <__sprint_r>
  803a04:	103c061e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  803a08:	dc800e17 	ldw	r18,56(sp)
  803a0c:	dc400d17 	ldw	r17,52(sp)
  803a10:	d8c01904 	addi	r3,sp,100
  803a14:	003fee06 	br	8039d0 <___vfprintf_internal_r+0x1690>
  803a18:	3c000017 	ldw	r16,0(r7)
  803a1c:	0023883a 	mov	r17,zero
  803a20:	39c00104 	addi	r7,r7,4
  803a24:	d9c14015 	stw	r7,1280(sp)
  803a28:	003e9206 	br	803474 <___vfprintf_internal_r+0x1134>
  803a2c:	d9401904 	addi	r5,sp,100
  803a30:	dd000f04 	addi	r20,sp,60
  803a34:	d9414115 	stw	r5,1284(sp)
  803a38:	d9814417 	ldw	r6,1296(sp)
  803a3c:	880a973a 	slli	r5,r17,28
  803a40:	8004d13a 	srli	r2,r16,4
  803a44:	810003cc 	andi	r4,r16,15
  803a48:	3109883a 	add	r4,r6,r4
  803a4c:	2884b03a 	or	r2,r5,r2
  803a50:	21400003 	ldbu	r5,0(r4)
  803a54:	d9014117 	ldw	r4,1284(sp)
  803a58:	8806d13a 	srli	r3,r17,4
  803a5c:	1021883a 	mov	r16,r2
  803a60:	213fffc4 	addi	r4,r4,-1
  803a64:	d9014115 	stw	r4,1284(sp)
  803a68:	d9814117 	ldw	r6,1284(sp)
  803a6c:	10c8b03a 	or	r4,r2,r3
  803a70:	1823883a 	mov	r17,r3
  803a74:	31400005 	stb	r5,0(r6)
  803a78:	203fef1e 	bne	r4,zero,803a38 <___vfprintf_internal_r+0x16f8>
  803a7c:	003ccb06 	br	802dac <___vfprintf_internal_r+0xa6c>
  803a80:	00800c04 	movi	r2,48
  803a84:	d98018c4 	addi	r6,sp,99
  803a88:	dd000f04 	addi	r20,sp,60
  803a8c:	d88018c5 	stb	r2,99(sp)
  803a90:	d9814115 	stw	r6,1284(sp)
  803a94:	003cc506 	br	802dac <___vfprintf_internal_r+0xa6c>
  803a98:	dc400d17 	ldw	r17,52(sp)
  803a9c:	07002074 	movhi	fp,129
  803aa0:	e734ef84 	addi	fp,fp,-11330
  803aa4:	003bc706 	br	8029c4 <___vfprintf_internal_r+0x684>
  803aa8:	d9414c17 	ldw	r5,1328(sp)
  803aac:	2880040c 	andi	r2,r5,16
  803ab0:	10007c26 	beq	r2,zero,803ca4 <___vfprintf_internal_r+0x1964>
  803ab4:	38800017 	ldw	r2,0(r7)
  803ab8:	39c00104 	addi	r7,r7,4
  803abc:	d9c14015 	stw	r7,1280(sp)
  803ac0:	d9814b17 	ldw	r6,1324(sp)
  803ac4:	d9c14017 	ldw	r7,1280(sp)
  803ac8:	11800015 	stw	r6,0(r2)
  803acc:	003a7806 	br	8024b0 <___vfprintf_internal_r+0x170>
  803ad0:	d9014f17 	ldw	r4,1340(sp)
  803ad4:	b00b883a 	mov	r5,r22
  803ad8:	d9800c04 	addi	r6,sp,48
  803adc:	08022e80 	call	8022e8 <__sprint_r>
  803ae0:	103bcf1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  803ae4:	dc800e17 	ldw	r18,56(sp)
  803ae8:	dc400d17 	ldw	r17,52(sp)
  803aec:	d8c01904 	addi	r3,sp,100
  803af0:	d9014717 	ldw	r4,1308(sp)
  803af4:	d9414117 	ldw	r5,1284(sp)
  803af8:	8c400044 	addi	r17,r17,1
  803afc:	9125883a 	add	r18,r18,r4
  803b00:	008001c4 	movi	r2,7
  803b04:	19400015 	stw	r5,0(r3)
  803b08:	19000115 	stw	r4,4(r3)
  803b0c:	dc800e15 	stw	r18,56(sp)
  803b10:	dc400d15 	stw	r17,52(sp)
  803b14:	147cee16 	blt	r2,r17,802ed0 <___vfprintf_internal_r+0xb90>
  803b18:	18c00204 	addi	r3,r3,8
  803b1c:	003b8606 	br	802938 <___vfprintf_internal_r+0x5f8>
  803b20:	38c00017 	ldw	r3,0(r7)
  803b24:	39000204 	addi	r4,r7,8
  803b28:	d9014015 	stw	r4,1280(sp)
  803b2c:	d8c14215 	stw	r3,1288(sp)
  803b30:	39c00117 	ldw	r7,4(r7)
  803b34:	d9c14315 	stw	r7,1292(sp)
  803b38:	003e2006 	br	8033bc <___vfprintf_internal_r+0x107c>
  803b3c:	0005883a 	mov	r2,zero
  803b40:	1409c83a 	sub	r4,r2,r16
  803b44:	1105803a 	cmpltu	r2,r2,r4
  803b48:	044bc83a 	sub	r5,zero,r17
  803b4c:	2885c83a 	sub	r2,r5,r2
  803b50:	2021883a 	mov	r16,r4
  803b54:	1023883a 	mov	r17,r2
  803b58:	01000044 	movi	r4,1
  803b5c:	00800b44 	movi	r2,45
  803b60:	d8800405 	stb	r2,16(sp)
  803b64:	003c8406 	br	802d78 <___vfprintf_internal_r+0xa38>
  803b68:	d9014f17 	ldw	r4,1340(sp)
  803b6c:	b00b883a 	mov	r5,r22
  803b70:	d9800c04 	addi	r6,sp,48
  803b74:	08022e80 	call	8022e8 <__sprint_r>
  803b78:	103ba91e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  803b7c:	dc800e17 	ldw	r18,56(sp)
  803b80:	dc400d17 	ldw	r17,52(sp)
  803b84:	d9000517 	ldw	r4,20(sp)
  803b88:	d9401904 	addi	r5,sp,100
  803b8c:	003da706 	br	80322c <___vfprintf_internal_r+0xeec>
  803b90:	d9014f17 	ldw	r4,1340(sp)
  803b94:	b00b883a 	mov	r5,r22
  803b98:	d9800c04 	addi	r6,sp,48
  803b9c:	08022e80 	call	8022e8 <__sprint_r>
  803ba0:	103b9f1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  803ba4:	dc800e17 	ldw	r18,56(sp)
  803ba8:	dc400d17 	ldw	r17,52(sp)
  803bac:	d9000517 	ldw	r4,20(sp)
  803bb0:	d8c01904 	addi	r3,sp,100
  803bb4:	003d9106 	br	8031fc <___vfprintf_internal_r+0xebc>
  803bb8:	07002074 	movhi	fp,129
  803bbc:	e734eb84 	addi	fp,fp,-11346
  803bc0:	9425883a 	add	r18,r18,r16
  803bc4:	8c400044 	addi	r17,r17,1
  803bc8:	008001c4 	movi	r2,7
  803bcc:	1f000015 	stw	fp,0(r3)
  803bd0:	1c000115 	stw	r16,4(r3)
  803bd4:	dc800e15 	stw	r18,56(sp)
  803bd8:	dc400d15 	stw	r17,52(sp)
  803bdc:	147fbc16 	blt	r2,r17,803ad0 <___vfprintf_internal_r+0x1790>
  803be0:	18c00204 	addi	r3,r3,8
  803be4:	003fc206 	br	803af0 <___vfprintf_internal_r+0x17b0>
  803be8:	d9014f17 	ldw	r4,1340(sp)
  803bec:	b00b883a 	mov	r5,r22
  803bf0:	d9800c04 	addi	r6,sp,48
  803bf4:	08022e80 	call	8022e8 <__sprint_r>
  803bf8:	103b891e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  803bfc:	dc800e17 	ldw	r18,56(sp)
  803c00:	d9000517 	ldw	r4,20(sp)
  803c04:	d8c01904 	addi	r3,sp,100
  803c08:	003d0206 	br	803014 <___vfprintf_internal_r+0xcd4>
  803c0c:	07002074 	movhi	fp,129
  803c10:	e734eb84 	addi	fp,fp,-11346
  803c14:	003be406 	br	802ba8 <___vfprintf_internal_r+0x868>
  803c18:	00802074 	movhi	r2,129
  803c1c:	10b4da04 	addi	r2,r2,-11416
  803c20:	d8814115 	stw	r2,1284(sp)
  803c24:	003df506 	br	8033fc <___vfprintf_internal_r+0x10bc>
  803c28:	d9014217 	ldw	r4,1288(sp)
  803c2c:	d9414317 	ldw	r5,1292(sp)
  803c30:	08082800 	call	808280 <__isnand>
  803c34:	10003926 	beq	r2,zero,803d1c <___vfprintf_internal_r+0x19dc>
  803c38:	d9414d17 	ldw	r5,1332(sp)
  803c3c:	008011c4 	movi	r2,71
  803c40:	1140ce16 	blt	r2,r5,803f7c <___vfprintf_internal_r+0x1c3c>
  803c44:	01802074 	movhi	r6,129
  803c48:	31b4db04 	addi	r6,r6,-11412
  803c4c:	d9814115 	stw	r6,1284(sp)
  803c50:	003dea06 	br	8033fc <___vfprintf_internal_r+0x10bc>
  803c54:	d9014c17 	ldw	r4,1328(sp)
  803c58:	bdc00044 	addi	r23,r23,1
  803c5c:	b8c00007 	ldb	r3,0(r23)
  803c60:	21000814 	ori	r4,r4,32
  803c64:	d9014c15 	stw	r4,1328(sp)
  803c68:	003a3406 	br	80253c <___vfprintf_internal_r+0x1fc>
  803c6c:	dcc14515 	stw	r19,1300(sp)
  803c70:	98011016 	blt	r19,zero,8040b4 <___vfprintf_internal_r+0x1d74>
  803c74:	980f883a 	mov	r7,r19
  803c78:	d8014615 	stw	zero,1304(sp)
  803c7c:	003c5206 	br	802dc8 <___vfprintf_internal_r+0xa88>
  803c80:	d9014f17 	ldw	r4,1340(sp)
  803c84:	b00b883a 	mov	r5,r22
  803c88:	d9800c04 	addi	r6,sp,48
  803c8c:	08022e80 	call	8022e8 <__sprint_r>
  803c90:	103b631e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  803c94:	dc800e17 	ldw	r18,56(sp)
  803c98:	d9000517 	ldw	r4,20(sp)
  803c9c:	d8c01904 	addi	r3,sp,100
  803ca0:	003f2e06 	br	80395c <___vfprintf_internal_r+0x161c>
  803ca4:	d8c14c17 	ldw	r3,1328(sp)
  803ca8:	1880100c 	andi	r2,r3,64
  803cac:	1000a026 	beq	r2,zero,803f30 <___vfprintf_internal_r+0x1bf0>
  803cb0:	38800017 	ldw	r2,0(r7)
  803cb4:	39c00104 	addi	r7,r7,4
  803cb8:	d9c14015 	stw	r7,1280(sp)
  803cbc:	d9014b17 	ldw	r4,1324(sp)
  803cc0:	d9c14017 	ldw	r7,1280(sp)
  803cc4:	1100000d 	sth	r4,0(r2)
  803cc8:	0039f906 	br	8024b0 <___vfprintf_internal_r+0x170>
  803ccc:	d9014f17 	ldw	r4,1340(sp)
  803cd0:	b00b883a 	mov	r5,r22
  803cd4:	d9800c04 	addi	r6,sp,48
  803cd8:	08022e80 	call	8022e8 <__sprint_r>
  803cdc:	103b501e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  803ce0:	dc800e17 	ldw	r18,56(sp)
  803ce4:	dc400d17 	ldw	r17,52(sp)
  803ce8:	d9000517 	ldw	r4,20(sp)
  803cec:	d8c01904 	addi	r3,sp,100
  803cf0:	003f2d06 	br	8039a8 <___vfprintf_internal_r+0x1668>
  803cf4:	00800184 	movi	r2,6
  803cf8:	14c09a36 	bltu	r2,r19,803f64 <___vfprintf_internal_r+0x1c24>
  803cfc:	dcc14515 	stw	r19,1300(sp)
  803d00:	9800010e 	bge	r19,zero,803d08 <___vfprintf_internal_r+0x19c8>
  803d04:	d8014515 	stw	zero,1300(sp)
  803d08:	00802074 	movhi	r2,129
  803d0c:	10b4dd04 	addi	r2,r2,-11404
  803d10:	980f883a 	mov	r7,r19
  803d14:	d8814115 	stw	r2,1284(sp)
  803d18:	003a7806 	br	8026fc <___vfprintf_internal_r+0x3bc>
  803d1c:	00bfffc4 	movi	r2,-1
  803d20:	9880e226 	beq	r19,r2,8040ac <___vfprintf_internal_r+0x1d6c>
  803d24:	d9414d17 	ldw	r5,1332(sp)
  803d28:	008019c4 	movi	r2,103
  803d2c:	2880dc26 	beq	r5,r2,8040a0 <___vfprintf_internal_r+0x1d60>
  803d30:	008011c4 	movi	r2,71
  803d34:	2880da26 	beq	r5,r2,8040a0 <___vfprintf_internal_r+0x1d60>
  803d38:	d9414c17 	ldw	r5,1328(sp)
  803d3c:	d9014317 	ldw	r4,1292(sp)
  803d40:	d9814217 	ldw	r6,1288(sp)
  803d44:	29404014 	ori	r5,r5,256
  803d48:	d9414c15 	stw	r5,1328(sp)
  803d4c:	2000cc16 	blt	r4,zero,804080 <___vfprintf_internal_r+0x1d40>
  803d50:	3021883a 	mov	r16,r6
  803d54:	2023883a 	mov	r17,r4
  803d58:	0039883a 	mov	fp,zero
  803d5c:	d9414d17 	ldw	r5,1332(sp)
  803d60:	00801984 	movi	r2,102
  803d64:	2880b726 	beq	r5,r2,804044 <___vfprintf_internal_r+0x1d04>
  803d68:	00801184 	movi	r2,70
  803d6c:	2880b526 	beq	r5,r2,804044 <___vfprintf_internal_r+0x1d04>
  803d70:	00801944 	movi	r2,101
  803d74:	2880c826 	beq	r5,r2,804098 <___vfprintf_internal_r+0x1d58>
  803d78:	00801144 	movi	r2,69
  803d7c:	2880c626 	beq	r5,r2,804098 <___vfprintf_internal_r+0x1d58>
  803d80:	9829883a 	mov	r20,r19
  803d84:	d9014f17 	ldw	r4,1340(sp)
  803d88:	d8800504 	addi	r2,sp,20
  803d8c:	880d883a 	mov	r6,r17
  803d90:	d8800115 	stw	r2,4(sp)
  803d94:	d8c00604 	addi	r3,sp,24
  803d98:	d8800704 	addi	r2,sp,28
  803d9c:	800b883a 	mov	r5,r16
  803da0:	01c00084 	movi	r7,2
  803da4:	d8c00215 	stw	r3,8(sp)
  803da8:	d8800315 	stw	r2,12(sp)
  803dac:	dd000015 	stw	r20,0(sp)
  803db0:	080464c0 	call	80464c <_dtoa_r>
  803db4:	d9814d17 	ldw	r6,1332(sp)
  803db8:	d8814115 	stw	r2,1284(sp)
  803dbc:	008019c4 	movi	r2,103
  803dc0:	30809526 	beq	r6,r2,804018 <___vfprintf_internal_r+0x1cd8>
  803dc4:	d8c14d17 	ldw	r3,1332(sp)
  803dc8:	008011c4 	movi	r2,71
  803dcc:	18809226 	beq	r3,r2,804018 <___vfprintf_internal_r+0x1cd8>
  803dd0:	d9414117 	ldw	r5,1284(sp)
  803dd4:	d9814d17 	ldw	r6,1332(sp)
  803dd8:	00801984 	movi	r2,102
  803ddc:	2d25883a 	add	r18,r5,r20
  803de0:	30808626 	beq	r6,r2,803ffc <___vfprintf_internal_r+0x1cbc>
  803de4:	00801184 	movi	r2,70
  803de8:	30808426 	beq	r6,r2,803ffc <___vfprintf_internal_r+0x1cbc>
  803dec:	000d883a 	mov	r6,zero
  803df0:	000f883a 	mov	r7,zero
  803df4:	880b883a 	mov	r5,r17
  803df8:	8009883a 	mov	r4,r16
  803dfc:	0809bb00 	call	809bb0 <__eqdf2>
  803e00:	1000751e 	bne	r2,zero,803fd8 <___vfprintf_internal_r+0x1c98>
  803e04:	9005883a 	mov	r2,r18
  803e08:	dc800715 	stw	r18,28(sp)
  803e0c:	d9014117 	ldw	r4,1284(sp)
  803e10:	d9414d17 	ldw	r5,1332(sp)
  803e14:	00c019c4 	movi	r3,103
  803e18:	1125c83a 	sub	r18,r2,r4
  803e1c:	28c06826 	beq	r5,r3,803fc0 <___vfprintf_internal_r+0x1c80>
  803e20:	008011c4 	movi	r2,71
  803e24:	28806626 	beq	r5,r2,803fc0 <___vfprintf_internal_r+0x1c80>
  803e28:	d9000517 	ldw	r4,20(sp)
  803e2c:	d8c14d17 	ldw	r3,1332(sp)
  803e30:	00801944 	movi	r2,101
  803e34:	10c05516 	blt	r2,r3,803f8c <___vfprintf_internal_r+0x1c4c>
  803e38:	213fffc4 	addi	r4,r4,-1
  803e3c:	d9000515 	stw	r4,20(sp)
  803e40:	d8c00805 	stb	r3,32(sp)
  803e44:	2021883a 	mov	r16,r4
  803e48:	2000c116 	blt	r4,zero,804150 <___vfprintf_internal_r+0x1e10>
  803e4c:	00800ac4 	movi	r2,43
  803e50:	d8800845 	stb	r2,33(sp)
  803e54:	00800244 	movi	r2,9
  803e58:	1400af0e 	bge	r2,r16,804118 <___vfprintf_internal_r+0x1dd8>
  803e5c:	1027883a 	mov	r19,r2
  803e60:	dc400b84 	addi	r17,sp,46
  803e64:	8009883a 	mov	r4,r16
  803e68:	01400284 	movi	r5,10
  803e6c:	0800e0c0 	call	800e0c <__modsi3>
  803e70:	10800c04 	addi	r2,r2,48
  803e74:	8c7fffc4 	addi	r17,r17,-1
  803e78:	8009883a 	mov	r4,r16
  803e7c:	01400284 	movi	r5,10
  803e80:	88800005 	stb	r2,0(r17)
  803e84:	0800dac0 	call	800dac <__divsi3>
  803e88:	1021883a 	mov	r16,r2
  803e8c:	98bff516 	blt	r19,r2,803e64 <___vfprintf_internal_r+0x1b24>
  803e90:	10c00c04 	addi	r3,r2,48
  803e94:	d88009c4 	addi	r2,sp,39
  803e98:	108001c4 	addi	r2,r2,7
  803e9c:	897fffc4 	addi	r5,r17,-1
  803ea0:	88ffffc5 	stb	r3,-1(r17)
  803ea4:	2880a72e 	bgeu	r5,r2,804144 <___vfprintf_internal_r+0x1e04>
  803ea8:	1009883a 	mov	r4,r2
  803eac:	d9800804 	addi	r6,sp,32
  803eb0:	d8c00884 	addi	r3,sp,34
  803eb4:	28800003 	ldbu	r2,0(r5)
  803eb8:	29400044 	addi	r5,r5,1
  803ebc:	18800005 	stb	r2,0(r3)
  803ec0:	18c00044 	addi	r3,r3,1
  803ec4:	293ffb36 	bltu	r5,r4,803eb4 <___vfprintf_internal_r+0x1b74>
  803ec8:	1987c83a 	sub	r3,r3,r6
  803ecc:	00800044 	movi	r2,1
  803ed0:	d8c14815 	stw	r3,1312(sp)
  803ed4:	90cf883a 	add	r7,r18,r3
  803ed8:	1480960e 	bge	r2,r18,804134 <___vfprintf_internal_r+0x1df4>
  803edc:	39c00044 	addi	r7,r7,1
  803ee0:	d9c14515 	stw	r7,1300(sp)
  803ee4:	38003416 	blt	r7,zero,803fb8 <___vfprintf_internal_r+0x1c78>
  803ee8:	e0803fcc 	andi	r2,fp,255
  803eec:	1080201c 	xori	r2,r2,128
  803ef0:	10bfe004 	addi	r2,r2,-128
  803ef4:	10004e26 	beq	r2,zero,804030 <___vfprintf_internal_r+0x1cf0>
  803ef8:	00800b44 	movi	r2,45
  803efc:	dc814715 	stw	r18,1308(sp)
  803f00:	d8014615 	stw	zero,1304(sp)
  803f04:	d8800405 	stb	r2,16(sp)
  803f08:	003bb106 	br	802dd0 <___vfprintf_internal_r+0xa90>
  803f0c:	00800b44 	movi	r2,45
  803f10:	d8800405 	stb	r2,16(sp)
  803f14:	003d3306 	br	8033e4 <___vfprintf_internal_r+0x10a4>
  803f18:	d9014f17 	ldw	r4,1340(sp)
  803f1c:	b00b883a 	mov	r5,r22
  803f20:	d9800c04 	addi	r6,sp,48
  803f24:	08022e80 	call	8022e8 <__sprint_r>
  803f28:	103abd1e 	bne	r2,zero,802a20 <___vfprintf_internal_r+0x6e0>
  803f2c:	003abb06 	br	802a1c <___vfprintf_internal_r+0x6dc>
  803f30:	38800017 	ldw	r2,0(r7)
  803f34:	39c00104 	addi	r7,r7,4
  803f38:	d9c14015 	stw	r7,1280(sp)
  803f3c:	d9414b17 	ldw	r5,1324(sp)
  803f40:	d9c14017 	ldw	r7,1280(sp)
  803f44:	11400015 	stw	r5,0(r2)
  803f48:	00395906 	br	8024b0 <___vfprintf_internal_r+0x170>
  803f4c:	980f883a 	mov	r7,r19
  803f50:	dcc14515 	stw	r19,1300(sp)
  803f54:	d8014615 	stw	zero,1304(sp)
  803f58:	003b9b06 	br	802dc8 <___vfprintf_internal_r+0xa88>
  803f5c:	0027883a 	mov	r19,zero
  803f60:	00397806 	br	802544 <___vfprintf_internal_r+0x204>
  803f64:	00c02074 	movhi	r3,129
  803f68:	18f4dd04 	addi	r3,r3,-11404
  803f6c:	100f883a 	mov	r7,r2
  803f70:	d8814515 	stw	r2,1300(sp)
  803f74:	d8c14115 	stw	r3,1284(sp)
  803f78:	0039e006 	br	8026fc <___vfprintf_internal_r+0x3bc>
  803f7c:	00802074 	movhi	r2,129
  803f80:	10b4dc04 	addi	r2,r2,-11408
  803f84:	d8814115 	stw	r2,1284(sp)
  803f88:	003d1c06 	br	8033fc <___vfprintf_internal_r+0x10bc>
  803f8c:	d9414d17 	ldw	r5,1332(sp)
  803f90:	00801984 	movi	r2,102
  803f94:	28804926 	beq	r5,r2,8040bc <___vfprintf_internal_r+0x1d7c>
  803f98:	200f883a 	mov	r7,r4
  803f9c:	24805716 	blt	r4,r18,8040fc <___vfprintf_internal_r+0x1dbc>
  803fa0:	d9414c17 	ldw	r5,1328(sp)
  803fa4:	2880004c 	andi	r2,r5,1
  803fa8:	10000126 	beq	r2,zero,803fb0 <___vfprintf_internal_r+0x1c70>
  803fac:	21c00044 	addi	r7,r4,1
  803fb0:	d9c14515 	stw	r7,1300(sp)
  803fb4:	383fcc0e 	bge	r7,zero,803ee8 <___vfprintf_internal_r+0x1ba8>
  803fb8:	d8014515 	stw	zero,1300(sp)
  803fbc:	003fca06 	br	803ee8 <___vfprintf_internal_r+0x1ba8>
  803fc0:	d9000517 	ldw	r4,20(sp)
  803fc4:	00bfff04 	movi	r2,-4
  803fc8:	1100480e 	bge	r2,r4,8040ec <___vfprintf_internal_r+0x1dac>
  803fcc:	99004716 	blt	r19,r4,8040ec <___vfprintf_internal_r+0x1dac>
  803fd0:	d8c14d15 	stw	r3,1332(sp)
  803fd4:	003ff006 	br	803f98 <___vfprintf_internal_r+0x1c58>
  803fd8:	d8800717 	ldw	r2,28(sp)
  803fdc:	14bf8b2e 	bgeu	r2,r18,803e0c <___vfprintf_internal_r+0x1acc>
  803fe0:	9007883a 	mov	r3,r18
  803fe4:	01000c04 	movi	r4,48
  803fe8:	11000005 	stb	r4,0(r2)
  803fec:	10800044 	addi	r2,r2,1
  803ff0:	d8800715 	stw	r2,28(sp)
  803ff4:	18bffc1e 	bne	r3,r2,803fe8 <___vfprintf_internal_r+0x1ca8>
  803ff8:	003f8406 	br	803e0c <___vfprintf_internal_r+0x1acc>
  803ffc:	d8814117 	ldw	r2,1284(sp)
  804000:	10c00007 	ldb	r3,0(r2)
  804004:	00800c04 	movi	r2,48
  804008:	18805b26 	beq	r3,r2,804178 <___vfprintf_internal_r+0x1e38>
  80400c:	d9000517 	ldw	r4,20(sp)
  804010:	9125883a 	add	r18,r18,r4
  804014:	003f7506 	br	803dec <___vfprintf_internal_r+0x1aac>
  804018:	d9014c17 	ldw	r4,1328(sp)
  80401c:	2080004c 	andi	r2,r4,1
  804020:	1005003a 	cmpeq	r2,r2,zero
  804024:	103f6a26 	beq	r2,zero,803dd0 <___vfprintf_internal_r+0x1a90>
  804028:	d8800717 	ldw	r2,28(sp)
  80402c:	003f7706 	br	803e0c <___vfprintf_internal_r+0x1acc>
  804030:	d9c14515 	stw	r7,1300(sp)
  804034:	38004d16 	blt	r7,zero,80416c <___vfprintf_internal_r+0x1e2c>
  804038:	dc814715 	stw	r18,1308(sp)
  80403c:	d8014615 	stw	zero,1304(sp)
  804040:	003b6106 	br	802dc8 <___vfprintf_internal_r+0xa88>
  804044:	d9014f17 	ldw	r4,1340(sp)
  804048:	d8800504 	addi	r2,sp,20
  80404c:	d8800115 	stw	r2,4(sp)
  804050:	d8c00604 	addi	r3,sp,24
  804054:	d8800704 	addi	r2,sp,28
  804058:	800b883a 	mov	r5,r16
  80405c:	880d883a 	mov	r6,r17
  804060:	01c000c4 	movi	r7,3
  804064:	d8c00215 	stw	r3,8(sp)
  804068:	d8800315 	stw	r2,12(sp)
  80406c:	dcc00015 	stw	r19,0(sp)
  804070:	9829883a 	mov	r20,r19
  804074:	080464c0 	call	80464c <_dtoa_r>
  804078:	d8814115 	stw	r2,1284(sp)
  80407c:	003f5106 	br	803dc4 <___vfprintf_internal_r+0x1a84>
  804080:	d8c14217 	ldw	r3,1288(sp)
  804084:	d9014317 	ldw	r4,1292(sp)
  804088:	07000b44 	movi	fp,45
  80408c:	1821883a 	mov	r16,r3
  804090:	2460003c 	xorhi	r17,r4,32768
  804094:	003f3106 	br	803d5c <___vfprintf_internal_r+0x1a1c>
  804098:	9d000044 	addi	r20,r19,1
  80409c:	003f3906 	br	803d84 <___vfprintf_internal_r+0x1a44>
  8040a0:	983f251e 	bne	r19,zero,803d38 <___vfprintf_internal_r+0x19f8>
  8040a4:	04c00044 	movi	r19,1
  8040a8:	003f2306 	br	803d38 <___vfprintf_internal_r+0x19f8>
  8040ac:	04c00184 	movi	r19,6
  8040b0:	003f2106 	br	803d38 <___vfprintf_internal_r+0x19f8>
  8040b4:	d8014515 	stw	zero,1300(sp)
  8040b8:	003eee06 	br	803c74 <___vfprintf_internal_r+0x1934>
  8040bc:	200f883a 	mov	r7,r4
  8040c0:	0100370e 	bge	zero,r4,8041a0 <___vfprintf_internal_r+0x1e60>
  8040c4:	9800031e 	bne	r19,zero,8040d4 <___vfprintf_internal_r+0x1d94>
  8040c8:	d9814c17 	ldw	r6,1328(sp)
  8040cc:	3080004c 	andi	r2,r6,1
  8040d0:	103fb726 	beq	r2,zero,803fb0 <___vfprintf_internal_r+0x1c70>
  8040d4:	20800044 	addi	r2,r4,1
  8040d8:	98a7883a 	add	r19,r19,r2
  8040dc:	dcc14515 	stw	r19,1300(sp)
  8040e0:	980f883a 	mov	r7,r19
  8040e4:	983f800e 	bge	r19,zero,803ee8 <___vfprintf_internal_r+0x1ba8>
  8040e8:	003fb306 	br	803fb8 <___vfprintf_internal_r+0x1c78>
  8040ec:	d9814d17 	ldw	r6,1332(sp)
  8040f0:	31bfff84 	addi	r6,r6,-2
  8040f4:	d9814d15 	stw	r6,1332(sp)
  8040f8:	003f4c06 	br	803e2c <___vfprintf_internal_r+0x1aec>
  8040fc:	0100180e 	bge	zero,r4,804160 <___vfprintf_internal_r+0x1e20>
  804100:	00800044 	movi	r2,1
  804104:	1485883a 	add	r2,r2,r18
  804108:	d8814515 	stw	r2,1300(sp)
  80410c:	100f883a 	mov	r7,r2
  804110:	103f750e 	bge	r2,zero,803ee8 <___vfprintf_internal_r+0x1ba8>
  804114:	003fa806 	br	803fb8 <___vfprintf_internal_r+0x1c78>
  804118:	80c00c04 	addi	r3,r16,48
  80411c:	00800c04 	movi	r2,48
  804120:	d8c008c5 	stb	r3,35(sp)
  804124:	d9800804 	addi	r6,sp,32
  804128:	d8c00904 	addi	r3,sp,36
  80412c:	d8800885 	stb	r2,34(sp)
  804130:	003f6506 	br	803ec8 <___vfprintf_internal_r+0x1b88>
  804134:	d9014c17 	ldw	r4,1328(sp)
  804138:	2084703a 	and	r2,r4,r2
  80413c:	103f9c26 	beq	r2,zero,803fb0 <___vfprintf_internal_r+0x1c70>
  804140:	003f6606 	br	803edc <___vfprintf_internal_r+0x1b9c>
  804144:	d9800804 	addi	r6,sp,32
  804148:	d8c00884 	addi	r3,sp,34
  80414c:	003f5e06 	br	803ec8 <___vfprintf_internal_r+0x1b88>
  804150:	00800b44 	movi	r2,45
  804154:	0121c83a 	sub	r16,zero,r4
  804158:	d8800845 	stb	r2,33(sp)
  80415c:	003f3d06 	br	803e54 <___vfprintf_internal_r+0x1b14>
  804160:	00800084 	movi	r2,2
  804164:	1105c83a 	sub	r2,r2,r4
  804168:	003fe606 	br	804104 <___vfprintf_internal_r+0x1dc4>
  80416c:	d8014515 	stw	zero,1300(sp)
  804170:	dc814715 	stw	r18,1308(sp)
  804174:	003fb106 	br	80403c <___vfprintf_internal_r+0x1cfc>
  804178:	000d883a 	mov	r6,zero
  80417c:	000f883a 	mov	r7,zero
  804180:	8009883a 	mov	r4,r16
  804184:	880b883a 	mov	r5,r17
  804188:	0809c380 	call	809c38 <__nedf2>
  80418c:	103f9f26 	beq	r2,zero,80400c <___vfprintf_internal_r+0x1ccc>
  804190:	00800044 	movi	r2,1
  804194:	1509c83a 	sub	r4,r2,r20
  804198:	d9000515 	stw	r4,20(sp)
  80419c:	003f9b06 	br	80400c <___vfprintf_internal_r+0x1ccc>
  8041a0:	98000d1e 	bne	r19,zero,8041d8 <___vfprintf_internal_r+0x1e98>
  8041a4:	d8c14c17 	ldw	r3,1328(sp)
  8041a8:	1880004c 	andi	r2,r3,1
  8041ac:	10000a1e 	bne	r2,zero,8041d8 <___vfprintf_internal_r+0x1e98>
  8041b0:	01000044 	movi	r4,1
  8041b4:	200f883a 	mov	r7,r4
  8041b8:	d9014515 	stw	r4,1300(sp)
  8041bc:	003f4a06 	br	803ee8 <___vfprintf_internal_r+0x1ba8>
  8041c0:	3cc00017 	ldw	r19,0(r7)
  8041c4:	39c00104 	addi	r7,r7,4
  8041c8:	983d0e0e 	bge	r19,zero,803604 <___vfprintf_internal_r+0x12c4>
  8041cc:	b8c00007 	ldb	r3,0(r23)
  8041d0:	04ffffc4 	movi	r19,-1
  8041d4:	0038d906 	br	80253c <___vfprintf_internal_r+0x1fc>
  8041d8:	9cc00084 	addi	r19,r19,2
  8041dc:	dcc14515 	stw	r19,1300(sp)
  8041e0:	980f883a 	mov	r7,r19
  8041e4:	983f400e 	bge	r19,zero,803ee8 <___vfprintf_internal_r+0x1ba8>
  8041e8:	003f7306 	br	803fb8 <___vfprintf_internal_r+0x1c78>

008041ec <__vfprintf_internal>:
  8041ec:	00802074 	movhi	r2,129
  8041f0:	10be6704 	addi	r2,r2,-1636
  8041f4:	2013883a 	mov	r9,r4
  8041f8:	11000017 	ldw	r4,0(r2)
  8041fc:	2805883a 	mov	r2,r5
  804200:	300f883a 	mov	r7,r6
  804204:	480b883a 	mov	r5,r9
  804208:	100d883a 	mov	r6,r2
  80420c:	08023401 	jmpi	802340 <___vfprintf_internal_r>

00804210 <_write_r>:
  804210:	defffd04 	addi	sp,sp,-12
  804214:	dc000015 	stw	r16,0(sp)
  804218:	04002074 	movhi	r16,129
  80421c:	84074f04 	addi	r16,r16,7484
  804220:	dc400115 	stw	r17,4(sp)
  804224:	80000015 	stw	zero,0(r16)
  804228:	2023883a 	mov	r17,r4
  80422c:	2809883a 	mov	r4,r5
  804230:	300b883a 	mov	r5,r6
  804234:	380d883a 	mov	r6,r7
  804238:	dfc00215 	stw	ra,8(sp)
  80423c:	080b1480 	call	80b148 <write>
  804240:	1007883a 	mov	r3,r2
  804244:	00bfffc4 	movi	r2,-1
  804248:	18800626 	beq	r3,r2,804264 <_write_r+0x54>
  80424c:	1805883a 	mov	r2,r3
  804250:	dfc00217 	ldw	ra,8(sp)
  804254:	dc400117 	ldw	r17,4(sp)
  804258:	dc000017 	ldw	r16,0(sp)
  80425c:	dec00304 	addi	sp,sp,12
  804260:	f800283a 	ret
  804264:	80800017 	ldw	r2,0(r16)
  804268:	103ff826 	beq	r2,zero,80424c <_write_r+0x3c>
  80426c:	88800015 	stw	r2,0(r17)
  804270:	1805883a 	mov	r2,r3
  804274:	dfc00217 	ldw	ra,8(sp)
  804278:	dc400117 	ldw	r17,4(sp)
  80427c:	dc000017 	ldw	r16,0(sp)
  804280:	dec00304 	addi	sp,sp,12
  804284:	f800283a 	ret

00804288 <__swsetup_r>:
  804288:	00802074 	movhi	r2,129
  80428c:	10be6704 	addi	r2,r2,-1636
  804290:	10c00017 	ldw	r3,0(r2)
  804294:	defffd04 	addi	sp,sp,-12
  804298:	dc400115 	stw	r17,4(sp)
  80429c:	dc000015 	stw	r16,0(sp)
  8042a0:	dfc00215 	stw	ra,8(sp)
  8042a4:	2023883a 	mov	r17,r4
  8042a8:	2821883a 	mov	r16,r5
  8042ac:	18000226 	beq	r3,zero,8042b8 <__swsetup_r+0x30>
  8042b0:	18800e17 	ldw	r2,56(r3)
  8042b4:	10001f26 	beq	r2,zero,804334 <__swsetup_r+0xac>
  8042b8:	8100030b 	ldhu	r4,12(r16)
  8042bc:	2080020c 	andi	r2,r4,8
  8042c0:	10002826 	beq	r2,zero,804364 <__swsetup_r+0xdc>
  8042c4:	81400417 	ldw	r5,16(r16)
  8042c8:	28001d26 	beq	r5,zero,804340 <__swsetup_r+0xb8>
  8042cc:	2080004c 	andi	r2,r4,1
  8042d0:	1005003a 	cmpeq	r2,r2,zero
  8042d4:	10000b26 	beq	r2,zero,804304 <__swsetup_r+0x7c>
  8042d8:	2080008c 	andi	r2,r4,2
  8042dc:	10001226 	beq	r2,zero,804328 <__swsetup_r+0xa0>
  8042e0:	0005883a 	mov	r2,zero
  8042e4:	80800215 	stw	r2,8(r16)
  8042e8:	28000b26 	beq	r5,zero,804318 <__swsetup_r+0x90>
  8042ec:	0005883a 	mov	r2,zero
  8042f0:	dfc00217 	ldw	ra,8(sp)
  8042f4:	dc400117 	ldw	r17,4(sp)
  8042f8:	dc000017 	ldw	r16,0(sp)
  8042fc:	dec00304 	addi	sp,sp,12
  804300:	f800283a 	ret
  804304:	80800517 	ldw	r2,20(r16)
  804308:	80000215 	stw	zero,8(r16)
  80430c:	0085c83a 	sub	r2,zero,r2
  804310:	80800615 	stw	r2,24(r16)
  804314:	283ff51e 	bne	r5,zero,8042ec <__swsetup_r+0x64>
  804318:	2080200c 	andi	r2,r4,128
  80431c:	103ff326 	beq	r2,zero,8042ec <__swsetup_r+0x64>
  804320:	00bfffc4 	movi	r2,-1
  804324:	003ff206 	br	8042f0 <__swsetup_r+0x68>
  804328:	80800517 	ldw	r2,20(r16)
  80432c:	80800215 	stw	r2,8(r16)
  804330:	003fed06 	br	8042e8 <__swsetup_r+0x60>
  804334:	1809883a 	mov	r4,r3
  804338:	08010500 	call	801050 <__sinit>
  80433c:	003fde06 	br	8042b8 <__swsetup_r+0x30>
  804340:	20c0a00c 	andi	r3,r4,640
  804344:	00808004 	movi	r2,512
  804348:	18bfe026 	beq	r3,r2,8042cc <__swsetup_r+0x44>
  80434c:	8809883a 	mov	r4,r17
  804350:	800b883a 	mov	r5,r16
  804354:	080696c0 	call	80696c <__smakebuf_r>
  804358:	8100030b 	ldhu	r4,12(r16)
  80435c:	81400417 	ldw	r5,16(r16)
  804360:	003fda06 	br	8042cc <__swsetup_r+0x44>
  804364:	2080040c 	andi	r2,r4,16
  804368:	103fed26 	beq	r2,zero,804320 <__swsetup_r+0x98>
  80436c:	2080010c 	andi	r2,r4,4
  804370:	10001226 	beq	r2,zero,8043bc <__swsetup_r+0x134>
  804374:	81400c17 	ldw	r5,48(r16)
  804378:	28000526 	beq	r5,zero,804390 <__swsetup_r+0x108>
  80437c:	80801004 	addi	r2,r16,64
  804380:	28800226 	beq	r5,r2,80438c <__swsetup_r+0x104>
  804384:	8809883a 	mov	r4,r17
  804388:	08060800 	call	806080 <_free_r>
  80438c:	80000c15 	stw	zero,48(r16)
  804390:	8080030b 	ldhu	r2,12(r16)
  804394:	81400417 	ldw	r5,16(r16)
  804398:	80000115 	stw	zero,4(r16)
  80439c:	10bff6cc 	andi	r2,r2,65499
  8043a0:	8080030d 	sth	r2,12(r16)
  8043a4:	81400015 	stw	r5,0(r16)
  8043a8:	8080030b 	ldhu	r2,12(r16)
  8043ac:	10800214 	ori	r2,r2,8
  8043b0:	113fffcc 	andi	r4,r2,65535
  8043b4:	8080030d 	sth	r2,12(r16)
  8043b8:	003fc306 	br	8042c8 <__swsetup_r+0x40>
  8043bc:	81400417 	ldw	r5,16(r16)
  8043c0:	003ff906 	br	8043a8 <__swsetup_r+0x120>

008043c4 <_close_r>:
  8043c4:	defffd04 	addi	sp,sp,-12
  8043c8:	dc000015 	stw	r16,0(sp)
  8043cc:	04002074 	movhi	r16,129
  8043d0:	84074f04 	addi	r16,r16,7484
  8043d4:	dc400115 	stw	r17,4(sp)
  8043d8:	80000015 	stw	zero,0(r16)
  8043dc:	2023883a 	mov	r17,r4
  8043e0:	2809883a 	mov	r4,r5
  8043e4:	dfc00215 	stw	ra,8(sp)
  8043e8:	080a7e80 	call	80a7e8 <close>
  8043ec:	1007883a 	mov	r3,r2
  8043f0:	00bfffc4 	movi	r2,-1
  8043f4:	18800626 	beq	r3,r2,804410 <_close_r+0x4c>
  8043f8:	1805883a 	mov	r2,r3
  8043fc:	dfc00217 	ldw	ra,8(sp)
  804400:	dc400117 	ldw	r17,4(sp)
  804404:	dc000017 	ldw	r16,0(sp)
  804408:	dec00304 	addi	sp,sp,12
  80440c:	f800283a 	ret
  804410:	80800017 	ldw	r2,0(r16)
  804414:	103ff826 	beq	r2,zero,8043f8 <_close_r+0x34>
  804418:	88800015 	stw	r2,0(r17)
  80441c:	1805883a 	mov	r2,r3
  804420:	dfc00217 	ldw	ra,8(sp)
  804424:	dc400117 	ldw	r17,4(sp)
  804428:	dc000017 	ldw	r16,0(sp)
  80442c:	dec00304 	addi	sp,sp,12
  804430:	f800283a 	ret

00804434 <quorem>:
  804434:	28c00417 	ldw	r3,16(r5)
  804438:	20800417 	ldw	r2,16(r4)
  80443c:	defff604 	addi	sp,sp,-40
  804440:	ddc00715 	stw	r23,28(sp)
  804444:	dd400515 	stw	r21,20(sp)
  804448:	dfc00915 	stw	ra,36(sp)
  80444c:	df000815 	stw	fp,32(sp)
  804450:	dd800615 	stw	r22,24(sp)
  804454:	dd000415 	stw	r20,16(sp)
  804458:	dcc00315 	stw	r19,12(sp)
  80445c:	dc800215 	stw	r18,8(sp)
  804460:	dc400115 	stw	r17,4(sp)
  804464:	dc000015 	stw	r16,0(sp)
  804468:	202f883a 	mov	r23,r4
  80446c:	282b883a 	mov	r21,r5
  804470:	10c07416 	blt	r2,r3,804644 <quorem+0x210>
  804474:	1c7fffc4 	addi	r17,r3,-1
  804478:	8c45883a 	add	r2,r17,r17
  80447c:	1085883a 	add	r2,r2,r2
  804480:	2c000504 	addi	r16,r5,20
  804484:	24c00504 	addi	r19,r4,20
  804488:	14ed883a 	add	r22,r2,r19
  80448c:	80a5883a 	add	r18,r16,r2
  804490:	b7000017 	ldw	fp,0(r22)
  804494:	91400017 	ldw	r5,0(r18)
  804498:	e009883a 	mov	r4,fp
  80449c:	29400044 	addi	r5,r5,1
  8044a0:	0800e6c0 	call	800e6c <__udivsi3>
  8044a4:	1029883a 	mov	r20,r2
  8044a8:	10003c1e 	bne	r2,zero,80459c <quorem+0x168>
  8044ac:	a80b883a 	mov	r5,r21
  8044b0:	b809883a 	mov	r4,r23
  8044b4:	0806d3c0 	call	806d3c <__mcmp>
  8044b8:	10002b16 	blt	r2,zero,804568 <quorem+0x134>
  8044bc:	a5000044 	addi	r20,r20,1
  8044c0:	980f883a 	mov	r7,r19
  8044c4:	0011883a 	mov	r8,zero
  8044c8:	0009883a 	mov	r4,zero
  8044cc:	81400017 	ldw	r5,0(r16)
  8044d0:	38c00017 	ldw	r3,0(r7)
  8044d4:	84000104 	addi	r16,r16,4
  8044d8:	28bfffcc 	andi	r2,r5,65535
  8044dc:	2085883a 	add	r2,r4,r2
  8044e0:	11bfffcc 	andi	r6,r2,65535
  8044e4:	193fffcc 	andi	r4,r3,65535
  8044e8:	1004d43a 	srli	r2,r2,16
  8044ec:	280ad43a 	srli	r5,r5,16
  8044f0:	2189c83a 	sub	r4,r4,r6
  8044f4:	2209883a 	add	r4,r4,r8
  8044f8:	1806d43a 	srli	r3,r3,16
  8044fc:	288b883a 	add	r5,r5,r2
  804500:	200dd43a 	srai	r6,r4,16
  804504:	28bfffcc 	andi	r2,r5,65535
  804508:	1887c83a 	sub	r3,r3,r2
  80450c:	1987883a 	add	r3,r3,r6
  804510:	3900000d 	sth	r4,0(r7)
  804514:	38c0008d 	sth	r3,2(r7)
  804518:	2808d43a 	srli	r4,r5,16
  80451c:	39c00104 	addi	r7,r7,4
  804520:	1811d43a 	srai	r8,r3,16
  804524:	943fe92e 	bgeu	r18,r16,8044cc <quorem+0x98>
  804528:	8c45883a 	add	r2,r17,r17
  80452c:	1085883a 	add	r2,r2,r2
  804530:	9885883a 	add	r2,r19,r2
  804534:	10c00017 	ldw	r3,0(r2)
  804538:	18000b1e 	bne	r3,zero,804568 <quorem+0x134>
  80453c:	113fff04 	addi	r4,r2,-4
  804540:	9900082e 	bgeu	r19,r4,804564 <quorem+0x130>
  804544:	10bfff17 	ldw	r2,-4(r2)
  804548:	10000326 	beq	r2,zero,804558 <quorem+0x124>
  80454c:	00000506 	br	804564 <quorem+0x130>
  804550:	20800017 	ldw	r2,0(r4)
  804554:	1000031e 	bne	r2,zero,804564 <quorem+0x130>
  804558:	213fff04 	addi	r4,r4,-4
  80455c:	8c7fffc4 	addi	r17,r17,-1
  804560:	993ffb36 	bltu	r19,r4,804550 <quorem+0x11c>
  804564:	bc400415 	stw	r17,16(r23)
  804568:	a005883a 	mov	r2,r20
  80456c:	dfc00917 	ldw	ra,36(sp)
  804570:	df000817 	ldw	fp,32(sp)
  804574:	ddc00717 	ldw	r23,28(sp)
  804578:	dd800617 	ldw	r22,24(sp)
  80457c:	dd400517 	ldw	r21,20(sp)
  804580:	dd000417 	ldw	r20,16(sp)
  804584:	dcc00317 	ldw	r19,12(sp)
  804588:	dc800217 	ldw	r18,8(sp)
  80458c:	dc400117 	ldw	r17,4(sp)
  804590:	dc000017 	ldw	r16,0(sp)
  804594:	dec00a04 	addi	sp,sp,40
  804598:	f800283a 	ret
  80459c:	980f883a 	mov	r7,r19
  8045a0:	8011883a 	mov	r8,r16
  8045a4:	0013883a 	mov	r9,zero
  8045a8:	000d883a 	mov	r6,zero
  8045ac:	40c00017 	ldw	r3,0(r8)
  8045b0:	39000017 	ldw	r4,0(r7)
  8045b4:	42000104 	addi	r8,r8,4
  8045b8:	18bfffcc 	andi	r2,r3,65535
  8045bc:	a085383a 	mul	r2,r20,r2
  8045c0:	1806d43a 	srli	r3,r3,16
  8045c4:	217fffcc 	andi	r5,r4,65535
  8045c8:	3085883a 	add	r2,r6,r2
  8045cc:	11bfffcc 	andi	r6,r2,65535
  8045d0:	a0c7383a 	mul	r3,r20,r3
  8045d4:	1004d43a 	srli	r2,r2,16
  8045d8:	298bc83a 	sub	r5,r5,r6
  8045dc:	2a4b883a 	add	r5,r5,r9
  8045e0:	2008d43a 	srli	r4,r4,16
  8045e4:	1887883a 	add	r3,r3,r2
  8045e8:	280dd43a 	srai	r6,r5,16
  8045ec:	18bfffcc 	andi	r2,r3,65535
  8045f0:	2089c83a 	sub	r4,r4,r2
  8045f4:	2189883a 	add	r4,r4,r6
  8045f8:	3900008d 	sth	r4,2(r7)
  8045fc:	3940000d 	sth	r5,0(r7)
  804600:	180cd43a 	srli	r6,r3,16
  804604:	39c00104 	addi	r7,r7,4
  804608:	2013d43a 	srai	r9,r4,16
  80460c:	923fe72e 	bgeu	r18,r8,8045ac <quorem+0x178>
  804610:	e03fa61e 	bne	fp,zero,8044ac <quorem+0x78>
  804614:	b0ffff04 	addi	r3,r22,-4
  804618:	98c0082e 	bgeu	r19,r3,80463c <quorem+0x208>
  80461c:	b0bfff17 	ldw	r2,-4(r22)
  804620:	10000326 	beq	r2,zero,804630 <quorem+0x1fc>
  804624:	00000506 	br	80463c <quorem+0x208>
  804628:	18800017 	ldw	r2,0(r3)
  80462c:	1000031e 	bne	r2,zero,80463c <quorem+0x208>
  804630:	18ffff04 	addi	r3,r3,-4
  804634:	8c7fffc4 	addi	r17,r17,-1
  804638:	98fffb36 	bltu	r19,r3,804628 <quorem+0x1f4>
  80463c:	bc400415 	stw	r17,16(r23)
  804640:	003f9a06 	br	8044ac <quorem+0x78>
  804644:	0005883a 	mov	r2,zero
  804648:	003fc806 	br	80456c <quorem+0x138>

0080464c <_dtoa_r>:
  80464c:	22001017 	ldw	r8,64(r4)
  804650:	deffda04 	addi	sp,sp,-152
  804654:	dd402115 	stw	r21,132(sp)
  804658:	dd002015 	stw	r20,128(sp)
  80465c:	dc801e15 	stw	r18,120(sp)
  804660:	dc401d15 	stw	r17,116(sp)
  804664:	dfc02515 	stw	ra,148(sp)
  804668:	df002415 	stw	fp,144(sp)
  80466c:	ddc02315 	stw	r23,140(sp)
  804670:	dd802215 	stw	r22,136(sp)
  804674:	dcc01f15 	stw	r19,124(sp)
  804678:	dc001c15 	stw	r16,112(sp)
  80467c:	d9001615 	stw	r4,88(sp)
  804680:	3023883a 	mov	r17,r6
  804684:	2829883a 	mov	r20,r5
  804688:	d9c01715 	stw	r7,92(sp)
  80468c:	dc802817 	ldw	r18,160(sp)
  804690:	302b883a 	mov	r21,r6
  804694:	40000a26 	beq	r8,zero,8046c0 <_dtoa_r+0x74>
  804698:	20801117 	ldw	r2,68(r4)
  80469c:	400b883a 	mov	r5,r8
  8046a0:	40800115 	stw	r2,4(r8)
  8046a4:	20c01117 	ldw	r3,68(r4)
  8046a8:	00800044 	movi	r2,1
  8046ac:	10c4983a 	sll	r2,r2,r3
  8046b0:	40800215 	stw	r2,8(r8)
  8046b4:	0806be00 	call	806be0 <_Bfree>
  8046b8:	d8c01617 	ldw	r3,88(sp)
  8046bc:	18001015 	stw	zero,64(r3)
  8046c0:	8800a316 	blt	r17,zero,804950 <_dtoa_r+0x304>
  8046c4:	90000015 	stw	zero,0(r18)
  8046c8:	a8dffc2c 	andhi	r3,r21,32752
  8046cc:	009ffc34 	movhi	r2,32752
  8046d0:	18809126 	beq	r3,r2,804918 <_dtoa_r+0x2cc>
  8046d4:	000d883a 	mov	r6,zero
  8046d8:	000f883a 	mov	r7,zero
  8046dc:	a009883a 	mov	r4,r20
  8046e0:	a80b883a 	mov	r5,r21
  8046e4:	dd001215 	stw	r20,72(sp)
  8046e8:	dd401315 	stw	r21,76(sp)
  8046ec:	0809c380 	call	809c38 <__nedf2>
  8046f0:	1000171e 	bne	r2,zero,804750 <_dtoa_r+0x104>
  8046f4:	d9802717 	ldw	r6,156(sp)
  8046f8:	00800044 	movi	r2,1
  8046fc:	30800015 	stw	r2,0(r6)
  804700:	d8802917 	ldw	r2,164(sp)
  804704:	10029b26 	beq	r2,zero,805174 <_dtoa_r+0xb28>
  804708:	d9002917 	ldw	r4,164(sp)
  80470c:	00802074 	movhi	r2,129
  804710:	10b4eb44 	addi	r2,r2,-11347
  804714:	10ffffc4 	addi	r3,r2,-1
  804718:	20800015 	stw	r2,0(r4)
  80471c:	1805883a 	mov	r2,r3
  804720:	dfc02517 	ldw	ra,148(sp)
  804724:	df002417 	ldw	fp,144(sp)
  804728:	ddc02317 	ldw	r23,140(sp)
  80472c:	dd802217 	ldw	r22,136(sp)
  804730:	dd402117 	ldw	r21,132(sp)
  804734:	dd002017 	ldw	r20,128(sp)
  804738:	dcc01f17 	ldw	r19,124(sp)
  80473c:	dc801e17 	ldw	r18,120(sp)
  804740:	dc401d17 	ldw	r17,116(sp)
  804744:	dc001c17 	ldw	r16,112(sp)
  804748:	dec02604 	addi	sp,sp,152
  80474c:	f800283a 	ret
  804750:	d9001617 	ldw	r4,88(sp)
  804754:	d9401217 	ldw	r5,72(sp)
  804758:	d8800104 	addi	r2,sp,4
  80475c:	a80d883a 	mov	r6,r21
  804760:	d9c00204 	addi	r7,sp,8
  804764:	d8800015 	stw	r2,0(sp)
  804768:	080721c0 	call	80721c <__d2b>
  80476c:	d8800715 	stw	r2,28(sp)
  804770:	a804d53a 	srli	r2,r21,20
  804774:	1101ffcc 	andi	r4,r2,2047
  804778:	20008626 	beq	r4,zero,804994 <_dtoa_r+0x348>
  80477c:	d8c01217 	ldw	r3,72(sp)
  804780:	00800434 	movhi	r2,16
  804784:	10bfffc4 	addi	r2,r2,-1
  804788:	ddc00117 	ldw	r23,4(sp)
  80478c:	a884703a 	and	r2,r21,r2
  804790:	1811883a 	mov	r8,r3
  804794:	124ffc34 	orhi	r9,r2,16368
  804798:	25bf0044 	addi	r22,r4,-1023
  80479c:	d8000815 	stw	zero,32(sp)
  8047a0:	0005883a 	mov	r2,zero
  8047a4:	00cffe34 	movhi	r3,16376
  8047a8:	480b883a 	mov	r5,r9
  8047ac:	4009883a 	mov	r4,r8
  8047b0:	180f883a 	mov	r7,r3
  8047b4:	100d883a 	mov	r6,r2
  8047b8:	08094a00 	call	8094a0 <__subdf3>
  8047bc:	0218dbf4 	movhi	r8,25455
  8047c0:	4210d844 	addi	r8,r8,17249
  8047c4:	024ff4f4 	movhi	r9,16339
  8047c8:	4a61e9c4 	addi	r9,r9,-30809
  8047cc:	480f883a 	mov	r7,r9
  8047d0:	400d883a 	mov	r6,r8
  8047d4:	180b883a 	mov	r5,r3
  8047d8:	1009883a 	mov	r4,r2
  8047dc:	08095940 	call	809594 <__muldf3>
  8047e0:	0222d874 	movhi	r8,35681
  8047e4:	42322cc4 	addi	r8,r8,-14157
  8047e8:	024ff1f4 	movhi	r9,16327
  8047ec:	4a628a04 	addi	r9,r9,-30168
  8047f0:	480f883a 	mov	r7,r9
  8047f4:	400d883a 	mov	r6,r8
  8047f8:	180b883a 	mov	r5,r3
  8047fc:	1009883a 	mov	r4,r2
  804800:	08095200 	call	809520 <__adddf3>
  804804:	b009883a 	mov	r4,r22
  804808:	1021883a 	mov	r16,r2
  80480c:	1823883a 	mov	r17,r3
  804810:	0809e580 	call	809e58 <__floatsidf>
  804814:	021427f4 	movhi	r8,20639
  804818:	421e7ec4 	addi	r8,r8,31227
  80481c:	024ff4f4 	movhi	r9,16339
  804820:	4a5104c4 	addi	r9,r9,17427
  804824:	480f883a 	mov	r7,r9
  804828:	400d883a 	mov	r6,r8
  80482c:	180b883a 	mov	r5,r3
  804830:	1009883a 	mov	r4,r2
  804834:	08095940 	call	809594 <__muldf3>
  804838:	180f883a 	mov	r7,r3
  80483c:	880b883a 	mov	r5,r17
  804840:	100d883a 	mov	r6,r2
  804844:	8009883a 	mov	r4,r16
  804848:	08095200 	call	809520 <__adddf3>
  80484c:	1009883a 	mov	r4,r2
  804850:	180b883a 	mov	r5,r3
  804854:	1021883a 	mov	r16,r2
  804858:	1823883a 	mov	r17,r3
  80485c:	0809f500 	call	809f50 <__fixdfsi>
  804860:	000d883a 	mov	r6,zero
  804864:	000f883a 	mov	r7,zero
  804868:	8009883a 	mov	r4,r16
  80486c:	880b883a 	mov	r5,r17
  804870:	d8800d15 	stw	r2,52(sp)
  804874:	0809dd00 	call	809dd0 <__ltdf2>
  804878:	10031716 	blt	r2,zero,8054d8 <_dtoa_r+0xe8c>
  80487c:	d8c00d17 	ldw	r3,52(sp)
  804880:	00800584 	movi	r2,22
  804884:	10c1482e 	bgeu	r2,r3,804da8 <_dtoa_r+0x75c>
  804888:	01000044 	movi	r4,1
  80488c:	d9000c15 	stw	r4,48(sp)
  804890:	bd85c83a 	sub	r2,r23,r22
  804894:	11bfffc4 	addi	r6,r2,-1
  804898:	30030b16 	blt	r6,zero,8054c8 <_dtoa_r+0xe7c>
  80489c:	d9800a15 	stw	r6,40(sp)
  8048a0:	d8001115 	stw	zero,68(sp)
  8048a4:	d8c00d17 	ldw	r3,52(sp)
  8048a8:	1802ff16 	blt	r3,zero,8054a8 <_dtoa_r+0xe5c>
  8048ac:	d9000a17 	ldw	r4,40(sp)
  8048b0:	d8c00915 	stw	r3,36(sp)
  8048b4:	d8001015 	stw	zero,64(sp)
  8048b8:	20c9883a 	add	r4,r4,r3
  8048bc:	d9000a15 	stw	r4,40(sp)
  8048c0:	d9001717 	ldw	r4,92(sp)
  8048c4:	00800244 	movi	r2,9
  8048c8:	11004636 	bltu	r2,r4,8049e4 <_dtoa_r+0x398>
  8048cc:	00800144 	movi	r2,5
  8048d0:	11020416 	blt	r2,r4,8050e4 <_dtoa_r+0xa98>
  8048d4:	04400044 	movi	r17,1
  8048d8:	d8c01717 	ldw	r3,92(sp)
  8048dc:	00800144 	movi	r2,5
  8048e0:	10c1ed36 	bltu	r2,r3,805098 <_dtoa_r+0xa4c>
  8048e4:	18c5883a 	add	r2,r3,r3
  8048e8:	1085883a 	add	r2,r2,r2
  8048ec:	00c02034 	movhi	r3,128
  8048f0:	18d24004 	addi	r3,r3,18688
  8048f4:	10c5883a 	add	r2,r2,r3
  8048f8:	11000017 	ldw	r4,0(r2)
  8048fc:	2000683a 	jmp	r4
  804900:	008049ec 	andhi	r2,zero,295
  804904:	008049ec 	andhi	r2,zero,295
  804908:	008053ec 	andhi	r2,zero,335
  80490c:	008053c4 	movi	r2,335
  804910:	00805408 	cmpgei	r2,zero,336
  804914:	00805414 	movui	r2,336
  804918:	d9002717 	ldw	r4,156(sp)
  80491c:	0089c3c4 	movi	r2,9999
  804920:	20800015 	stw	r2,0(r4)
  804924:	a0001026 	beq	r20,zero,804968 <_dtoa_r+0x31c>
  804928:	00c02074 	movhi	r3,129
  80492c:	18f4f704 	addi	r3,r3,-11300
  804930:	d9802917 	ldw	r6,164(sp)
  804934:	303f7926 	beq	r6,zero,80471c <_dtoa_r+0xd0>
  804938:	188000c7 	ldb	r2,3(r3)
  80493c:	190000c4 	addi	r4,r3,3
  804940:	1000101e 	bne	r2,zero,804984 <_dtoa_r+0x338>
  804944:	d8802917 	ldw	r2,164(sp)
  804948:	11000015 	stw	r4,0(r2)
  80494c:	003f7306 	br	80471c <_dtoa_r+0xd0>
  804950:	00a00034 	movhi	r2,32768
  804954:	10bfffc4 	addi	r2,r2,-1
  804958:	00c00044 	movi	r3,1
  80495c:	88aa703a 	and	r21,r17,r2
  804960:	90c00015 	stw	r3,0(r18)
  804964:	003f5806 	br	8046c8 <_dtoa_r+0x7c>
  804968:	00800434 	movhi	r2,16
  80496c:	10bfffc4 	addi	r2,r2,-1
  804970:	a884703a 	and	r2,r21,r2
  804974:	103fec1e 	bne	r2,zero,804928 <_dtoa_r+0x2dc>
  804978:	00c02074 	movhi	r3,129
  80497c:	18f4f404 	addi	r3,r3,-11312
  804980:	003feb06 	br	804930 <_dtoa_r+0x2e4>
  804984:	d8802917 	ldw	r2,164(sp)
  804988:	19000204 	addi	r4,r3,8
  80498c:	11000015 	stw	r4,0(r2)
  804990:	003f6206 	br	80471c <_dtoa_r+0xd0>
  804994:	ddc00117 	ldw	r23,4(sp)
  804998:	d8800217 	ldw	r2,8(sp)
  80499c:	01000804 	movi	r4,32
  8049a0:	b8c10c84 	addi	r3,r23,1074
  8049a4:	18a3883a 	add	r17,r3,r2
  8049a8:	2441b80e 	bge	r4,r17,80508c <_dtoa_r+0xa40>
  8049ac:	00c01004 	movi	r3,64
  8049b0:	1c47c83a 	sub	r3,r3,r17
  8049b4:	88bff804 	addi	r2,r17,-32
  8049b8:	a8c6983a 	sll	r3,r21,r3
  8049bc:	a084d83a 	srl	r2,r20,r2
  8049c0:	1888b03a 	or	r4,r3,r2
  8049c4:	080a0280 	call	80a028 <__floatunsidf>
  8049c8:	1011883a 	mov	r8,r2
  8049cc:	00bf8434 	movhi	r2,65040
  8049d0:	01000044 	movi	r4,1
  8049d4:	10d3883a 	add	r9,r2,r3
  8049d8:	8dbef344 	addi	r22,r17,-1075
  8049dc:	d9000815 	stw	r4,32(sp)
  8049e0:	003f6f06 	br	8047a0 <_dtoa_r+0x154>
  8049e4:	d8001715 	stw	zero,92(sp)
  8049e8:	04400044 	movi	r17,1
  8049ec:	00bfffc4 	movi	r2,-1
  8049f0:	00c00044 	movi	r3,1
  8049f4:	d8800e15 	stw	r2,56(sp)
  8049f8:	d8002615 	stw	zero,152(sp)
  8049fc:	d8800f15 	stw	r2,60(sp)
  804a00:	d8c00b15 	stw	r3,44(sp)
  804a04:	1021883a 	mov	r16,r2
  804a08:	d8801617 	ldw	r2,88(sp)
  804a0c:	10001115 	stw	zero,68(r2)
  804a10:	d8801617 	ldw	r2,88(sp)
  804a14:	11401117 	ldw	r5,68(r2)
  804a18:	1009883a 	mov	r4,r2
  804a1c:	08071600 	call	807160 <_Balloc>
  804a20:	d8c01617 	ldw	r3,88(sp)
  804a24:	d8800515 	stw	r2,20(sp)
  804a28:	18801015 	stw	r2,64(r3)
  804a2c:	00800384 	movi	r2,14
  804a30:	14006836 	bltu	r2,r16,804bd4 <_dtoa_r+0x588>
  804a34:	8805003a 	cmpeq	r2,r17,zero
  804a38:	1000661e 	bne	r2,zero,804bd4 <_dtoa_r+0x588>
  804a3c:	d9000d17 	ldw	r4,52(sp)
  804a40:	0102300e 	bge	zero,r4,805304 <_dtoa_r+0xcb8>
  804a44:	208003cc 	andi	r2,r4,15
  804a48:	100490fa 	slli	r2,r2,3
  804a4c:	2025d13a 	srai	r18,r4,4
  804a50:	00c02074 	movhi	r3,129
  804a54:	18f50804 	addi	r3,r3,-11232
  804a58:	10c5883a 	add	r2,r2,r3
  804a5c:	90c0040c 	andi	r3,r18,16
  804a60:	14000017 	ldw	r16,0(r2)
  804a64:	14400117 	ldw	r17,4(r2)
  804a68:	18036a1e 	bne	r3,zero,805814 <_dtoa_r+0x11c8>
  804a6c:	05800084 	movi	r22,2
  804a70:	90001026 	beq	r18,zero,804ab4 <_dtoa_r+0x468>
  804a74:	04c02074 	movhi	r19,129
  804a78:	9cf53a04 	addi	r19,r19,-11032
  804a7c:	9080004c 	andi	r2,r18,1
  804a80:	1005003a 	cmpeq	r2,r2,zero
  804a84:	1000081e 	bne	r2,zero,804aa8 <_dtoa_r+0x45c>
  804a88:	99800017 	ldw	r6,0(r19)
  804a8c:	99c00117 	ldw	r7,4(r19)
  804a90:	880b883a 	mov	r5,r17
  804a94:	8009883a 	mov	r4,r16
  804a98:	08095940 	call	809594 <__muldf3>
  804a9c:	1021883a 	mov	r16,r2
  804aa0:	b5800044 	addi	r22,r22,1
  804aa4:	1823883a 	mov	r17,r3
  804aa8:	9025d07a 	srai	r18,r18,1
  804aac:	9cc00204 	addi	r19,r19,8
  804ab0:	903ff21e 	bne	r18,zero,804a7c <_dtoa_r+0x430>
  804ab4:	a80b883a 	mov	r5,r21
  804ab8:	a009883a 	mov	r4,r20
  804abc:	880f883a 	mov	r7,r17
  804ac0:	800d883a 	mov	r6,r16
  804ac4:	08099580 	call	809958 <__divdf3>
  804ac8:	1029883a 	mov	r20,r2
  804acc:	182b883a 	mov	r21,r3
  804ad0:	d8c00c17 	ldw	r3,48(sp)
  804ad4:	1805003a 	cmpeq	r2,r3,zero
  804ad8:	1000081e 	bne	r2,zero,804afc <_dtoa_r+0x4b0>
  804adc:	0005883a 	mov	r2,zero
  804ae0:	00cffc34 	movhi	r3,16368
  804ae4:	180f883a 	mov	r7,r3
  804ae8:	a009883a 	mov	r4,r20
  804aec:	a80b883a 	mov	r5,r21
  804af0:	100d883a 	mov	r6,r2
  804af4:	0809dd00 	call	809dd0 <__ltdf2>
  804af8:	1003fe16 	blt	r2,zero,805af4 <_dtoa_r+0x14a8>
  804afc:	b009883a 	mov	r4,r22
  804b00:	0809e580 	call	809e58 <__floatsidf>
  804b04:	180b883a 	mov	r5,r3
  804b08:	1009883a 	mov	r4,r2
  804b0c:	a00d883a 	mov	r6,r20
  804b10:	a80f883a 	mov	r7,r21
  804b14:	08095940 	call	809594 <__muldf3>
  804b18:	0011883a 	mov	r8,zero
  804b1c:	02500734 	movhi	r9,16412
  804b20:	1009883a 	mov	r4,r2
  804b24:	180b883a 	mov	r5,r3
  804b28:	480f883a 	mov	r7,r9
  804b2c:	400d883a 	mov	r6,r8
  804b30:	08095200 	call	809520 <__adddf3>
  804b34:	d9000f17 	ldw	r4,60(sp)
  804b38:	102d883a 	mov	r22,r2
  804b3c:	00bf3034 	movhi	r2,64704
  804b40:	18b9883a 	add	fp,r3,r2
  804b44:	e02f883a 	mov	r23,fp
  804b48:	20028f1e 	bne	r4,zero,805588 <_dtoa_r+0xf3c>
  804b4c:	0005883a 	mov	r2,zero
  804b50:	00d00534 	movhi	r3,16404
  804b54:	a009883a 	mov	r4,r20
  804b58:	a80b883a 	mov	r5,r21
  804b5c:	180f883a 	mov	r7,r3
  804b60:	100d883a 	mov	r6,r2
  804b64:	08094a00 	call	8094a0 <__subdf3>
  804b68:	1009883a 	mov	r4,r2
  804b6c:	e00f883a 	mov	r7,fp
  804b70:	180b883a 	mov	r5,r3
  804b74:	b00d883a 	mov	r6,r22
  804b78:	1025883a 	mov	r18,r2
  804b7c:	1827883a 	mov	r19,r3
  804b80:	0809cc00 	call	809cc0 <__gtdf2>
  804b84:	00834f16 	blt	zero,r2,8058c4 <_dtoa_r+0x1278>
  804b88:	e0e0003c 	xorhi	r3,fp,32768
  804b8c:	9009883a 	mov	r4,r18
  804b90:	980b883a 	mov	r5,r19
  804b94:	180f883a 	mov	r7,r3
  804b98:	b00d883a 	mov	r6,r22
  804b9c:	0809dd00 	call	809dd0 <__ltdf2>
  804ba0:	1000080e 	bge	r2,zero,804bc4 <_dtoa_r+0x578>
  804ba4:	0027883a 	mov	r19,zero
  804ba8:	0025883a 	mov	r18,zero
  804bac:	d8802617 	ldw	r2,152(sp)
  804bb0:	df000517 	ldw	fp,20(sp)
  804bb4:	d8000615 	stw	zero,24(sp)
  804bb8:	0084303a 	nor	r2,zero,r2
  804bbc:	d8800d15 	stw	r2,52(sp)
  804bc0:	00019b06 	br	805230 <_dtoa_r+0xbe4>
  804bc4:	d9801217 	ldw	r6,72(sp)
  804bc8:	d8801317 	ldw	r2,76(sp)
  804bcc:	3029883a 	mov	r20,r6
  804bd0:	102b883a 	mov	r21,r2
  804bd4:	d8c00217 	ldw	r3,8(sp)
  804bd8:	18008516 	blt	r3,zero,804df0 <_dtoa_r+0x7a4>
  804bdc:	d9000d17 	ldw	r4,52(sp)
  804be0:	00800384 	movi	r2,14
  804be4:	11008216 	blt	r2,r4,804df0 <_dtoa_r+0x7a4>
  804be8:	200490fa 	slli	r2,r4,3
  804bec:	d9802617 	ldw	r6,152(sp)
  804bf0:	00c02074 	movhi	r3,129
  804bf4:	18f50804 	addi	r3,r3,-11232
  804bf8:	10c5883a 	add	r2,r2,r3
  804bfc:	14800017 	ldw	r18,0(r2)
  804c00:	14c00117 	ldw	r19,4(r2)
  804c04:	30031e16 	blt	r6,zero,805880 <_dtoa_r+0x1234>
  804c08:	d9000517 	ldw	r4,20(sp)
  804c0c:	d8c00f17 	ldw	r3,60(sp)
  804c10:	a823883a 	mov	r17,r21
  804c14:	a021883a 	mov	r16,r20
  804c18:	192b883a 	add	r21,r3,r4
  804c1c:	2039883a 	mov	fp,r4
  804c20:	00000f06 	br	804c60 <_dtoa_r+0x614>
  804c24:	0005883a 	mov	r2,zero
  804c28:	00d00934 	movhi	r3,16420
  804c2c:	5009883a 	mov	r4,r10
  804c30:	580b883a 	mov	r5,r11
  804c34:	180f883a 	mov	r7,r3
  804c38:	100d883a 	mov	r6,r2
  804c3c:	08095940 	call	809594 <__muldf3>
  804c40:	180b883a 	mov	r5,r3
  804c44:	000d883a 	mov	r6,zero
  804c48:	000f883a 	mov	r7,zero
  804c4c:	1009883a 	mov	r4,r2
  804c50:	1021883a 	mov	r16,r2
  804c54:	1823883a 	mov	r17,r3
  804c58:	0809c380 	call	809c38 <__nedf2>
  804c5c:	10004526 	beq	r2,zero,804d74 <_dtoa_r+0x728>
  804c60:	900d883a 	mov	r6,r18
  804c64:	980f883a 	mov	r7,r19
  804c68:	8009883a 	mov	r4,r16
  804c6c:	880b883a 	mov	r5,r17
  804c70:	08099580 	call	809958 <__divdf3>
  804c74:	180b883a 	mov	r5,r3
  804c78:	1009883a 	mov	r4,r2
  804c7c:	0809f500 	call	809f50 <__fixdfsi>
  804c80:	1009883a 	mov	r4,r2
  804c84:	1029883a 	mov	r20,r2
  804c88:	0809e580 	call	809e58 <__floatsidf>
  804c8c:	180f883a 	mov	r7,r3
  804c90:	9009883a 	mov	r4,r18
  804c94:	980b883a 	mov	r5,r19
  804c98:	100d883a 	mov	r6,r2
  804c9c:	08095940 	call	809594 <__muldf3>
  804ca0:	180f883a 	mov	r7,r3
  804ca4:	880b883a 	mov	r5,r17
  804ca8:	8009883a 	mov	r4,r16
  804cac:	100d883a 	mov	r6,r2
  804cb0:	08094a00 	call	8094a0 <__subdf3>
  804cb4:	1015883a 	mov	r10,r2
  804cb8:	a0800c04 	addi	r2,r20,48
  804cbc:	e0800005 	stb	r2,0(fp)
  804cc0:	e7000044 	addi	fp,fp,1
  804cc4:	1817883a 	mov	r11,r3
  804cc8:	e57fd61e 	bne	fp,r21,804c24 <_dtoa_r+0x5d8>
  804ccc:	500d883a 	mov	r6,r10
  804cd0:	180f883a 	mov	r7,r3
  804cd4:	5009883a 	mov	r4,r10
  804cd8:	180b883a 	mov	r5,r3
  804cdc:	08095200 	call	809520 <__adddf3>
  804ce0:	100d883a 	mov	r6,r2
  804ce4:	9009883a 	mov	r4,r18
  804ce8:	980b883a 	mov	r5,r19
  804cec:	180f883a 	mov	r7,r3
  804cf0:	1021883a 	mov	r16,r2
  804cf4:	1823883a 	mov	r17,r3
  804cf8:	0809dd00 	call	809dd0 <__ltdf2>
  804cfc:	10000816 	blt	r2,zero,804d20 <_dtoa_r+0x6d4>
  804d00:	980b883a 	mov	r5,r19
  804d04:	800d883a 	mov	r6,r16
  804d08:	880f883a 	mov	r7,r17
  804d0c:	9009883a 	mov	r4,r18
  804d10:	0809bb00 	call	809bb0 <__eqdf2>
  804d14:	1000171e 	bne	r2,zero,804d74 <_dtoa_r+0x728>
  804d18:	a080004c 	andi	r2,r20,1
  804d1c:	10001526 	beq	r2,zero,804d74 <_dtoa_r+0x728>
  804d20:	d8800d17 	ldw	r2,52(sp)
  804d24:	d8800415 	stw	r2,16(sp)
  804d28:	e009883a 	mov	r4,fp
  804d2c:	213fffc4 	addi	r4,r4,-1
  804d30:	20c00007 	ldb	r3,0(r4)
  804d34:	00800e44 	movi	r2,57
  804d38:	1880081e 	bne	r3,r2,804d5c <_dtoa_r+0x710>
  804d3c:	d8800517 	ldw	r2,20(sp)
  804d40:	113ffa1e 	bne	r2,r4,804d2c <_dtoa_r+0x6e0>
  804d44:	d8c00417 	ldw	r3,16(sp)
  804d48:	d9800517 	ldw	r6,20(sp)
  804d4c:	00800c04 	movi	r2,48
  804d50:	18c00044 	addi	r3,r3,1
  804d54:	d8c00415 	stw	r3,16(sp)
  804d58:	30800005 	stb	r2,0(r6)
  804d5c:	20800003 	ldbu	r2,0(r4)
  804d60:	d8c00417 	ldw	r3,16(sp)
  804d64:	27000044 	addi	fp,r4,1
  804d68:	10800044 	addi	r2,r2,1
  804d6c:	d8c00d15 	stw	r3,52(sp)
  804d70:	20800005 	stb	r2,0(r4)
  804d74:	d9001617 	ldw	r4,88(sp)
  804d78:	d9400717 	ldw	r5,28(sp)
  804d7c:	0806be00 	call	806be0 <_Bfree>
  804d80:	e0000005 	stb	zero,0(fp)
  804d84:	d9800d17 	ldw	r6,52(sp)
  804d88:	d8c02717 	ldw	r3,156(sp)
  804d8c:	d9002917 	ldw	r4,164(sp)
  804d90:	30800044 	addi	r2,r6,1
  804d94:	18800015 	stw	r2,0(r3)
  804d98:	20029c26 	beq	r4,zero,80580c <_dtoa_r+0x11c0>
  804d9c:	d8c00517 	ldw	r3,20(sp)
  804da0:	27000015 	stw	fp,0(r4)
  804da4:	003e5d06 	br	80471c <_dtoa_r+0xd0>
  804da8:	d9800d17 	ldw	r6,52(sp)
  804dac:	00c02074 	movhi	r3,129
  804db0:	18f50804 	addi	r3,r3,-11232
  804db4:	d9001217 	ldw	r4,72(sp)
  804db8:	300490fa 	slli	r2,r6,3
  804dbc:	d9401317 	ldw	r5,76(sp)
  804dc0:	10c5883a 	add	r2,r2,r3
  804dc4:	12000017 	ldw	r8,0(r2)
  804dc8:	12400117 	ldw	r9,4(r2)
  804dcc:	400d883a 	mov	r6,r8
  804dd0:	480f883a 	mov	r7,r9
  804dd4:	0809dd00 	call	809dd0 <__ltdf2>
  804dd8:	1000030e 	bge	r2,zero,804de8 <_dtoa_r+0x79c>
  804ddc:	d8800d17 	ldw	r2,52(sp)
  804de0:	10bfffc4 	addi	r2,r2,-1
  804de4:	d8800d15 	stw	r2,52(sp)
  804de8:	d8000c15 	stw	zero,48(sp)
  804dec:	003ea806 	br	804890 <_dtoa_r+0x244>
  804df0:	d9000b17 	ldw	r4,44(sp)
  804df4:	202cc03a 	cmpne	r22,r4,zero
  804df8:	b000c71e 	bne	r22,zero,805118 <_dtoa_r+0xacc>
  804dfc:	dc001117 	ldw	r16,68(sp)
  804e00:	dc801017 	ldw	r18,64(sp)
  804e04:	0027883a 	mov	r19,zero
  804e08:	04000b0e 	bge	zero,r16,804e38 <_dtoa_r+0x7ec>
  804e0c:	d8c00a17 	ldw	r3,40(sp)
  804e10:	00c0090e 	bge	zero,r3,804e38 <_dtoa_r+0x7ec>
  804e14:	8005883a 	mov	r2,r16
  804e18:	1c011316 	blt	r3,r16,805268 <_dtoa_r+0xc1c>
  804e1c:	d9000a17 	ldw	r4,40(sp)
  804e20:	d9801117 	ldw	r6,68(sp)
  804e24:	80a1c83a 	sub	r16,r16,r2
  804e28:	2089c83a 	sub	r4,r4,r2
  804e2c:	308dc83a 	sub	r6,r6,r2
  804e30:	d9000a15 	stw	r4,40(sp)
  804e34:	d9801115 	stw	r6,68(sp)
  804e38:	d8801017 	ldw	r2,64(sp)
  804e3c:	0080150e 	bge	zero,r2,804e94 <_dtoa_r+0x848>
  804e40:	d8c00b17 	ldw	r3,44(sp)
  804e44:	1805003a 	cmpeq	r2,r3,zero
  804e48:	1001c91e 	bne	r2,zero,805570 <_dtoa_r+0xf24>
  804e4c:	04800e0e 	bge	zero,r18,804e88 <_dtoa_r+0x83c>
  804e50:	d9001617 	ldw	r4,88(sp)
  804e54:	980b883a 	mov	r5,r19
  804e58:	900d883a 	mov	r6,r18
  804e5c:	08079940 	call	807994 <__pow5mult>
  804e60:	d9001617 	ldw	r4,88(sp)
  804e64:	d9800717 	ldw	r6,28(sp)
  804e68:	100b883a 	mov	r5,r2
  804e6c:	1027883a 	mov	r19,r2
  804e70:	08076700 	call	807670 <__multiply>
  804e74:	d9001617 	ldw	r4,88(sp)
  804e78:	d9400717 	ldw	r5,28(sp)
  804e7c:	1023883a 	mov	r17,r2
  804e80:	0806be00 	call	806be0 <_Bfree>
  804e84:	dc400715 	stw	r17,28(sp)
  804e88:	d9001017 	ldw	r4,64(sp)
  804e8c:	248dc83a 	sub	r6,r4,r18
  804e90:	30010e1e 	bne	r6,zero,8052cc <_dtoa_r+0xc80>
  804e94:	d9001617 	ldw	r4,88(sp)
  804e98:	04400044 	movi	r17,1
  804e9c:	880b883a 	mov	r5,r17
  804ea0:	08078580 	call	807858 <__i2b>
  804ea4:	d9800917 	ldw	r6,36(sp)
  804ea8:	1025883a 	mov	r18,r2
  804eac:	0180040e 	bge	zero,r6,804ec0 <_dtoa_r+0x874>
  804eb0:	d9001617 	ldw	r4,88(sp)
  804eb4:	100b883a 	mov	r5,r2
  804eb8:	08079940 	call	807994 <__pow5mult>
  804ebc:	1025883a 	mov	r18,r2
  804ec0:	d8801717 	ldw	r2,92(sp)
  804ec4:	8880f30e 	bge	r17,r2,805294 <_dtoa_r+0xc48>
  804ec8:	0023883a 	mov	r17,zero
  804ecc:	d9800917 	ldw	r6,36(sp)
  804ed0:	30019e1e 	bne	r6,zero,80554c <_dtoa_r+0xf00>
  804ed4:	00c00044 	movi	r3,1
  804ed8:	d9000a17 	ldw	r4,40(sp)
  804edc:	20c5883a 	add	r2,r4,r3
  804ee0:	10c007cc 	andi	r3,r2,31
  804ee4:	1800841e 	bne	r3,zero,8050f8 <_dtoa_r+0xaac>
  804ee8:	00800704 	movi	r2,28
  804eec:	d9000a17 	ldw	r4,40(sp)
  804ef0:	d9801117 	ldw	r6,68(sp)
  804ef4:	80a1883a 	add	r16,r16,r2
  804ef8:	2089883a 	add	r4,r4,r2
  804efc:	308d883a 	add	r6,r6,r2
  804f00:	d9000a15 	stw	r4,40(sp)
  804f04:	d9801115 	stw	r6,68(sp)
  804f08:	d8801117 	ldw	r2,68(sp)
  804f0c:	0080050e 	bge	zero,r2,804f24 <_dtoa_r+0x8d8>
  804f10:	d9400717 	ldw	r5,28(sp)
  804f14:	d9001617 	ldw	r4,88(sp)
  804f18:	100d883a 	mov	r6,r2
  804f1c:	08075240 	call	807524 <__lshift>
  804f20:	d8800715 	stw	r2,28(sp)
  804f24:	d8c00a17 	ldw	r3,40(sp)
  804f28:	00c0050e 	bge	zero,r3,804f40 <_dtoa_r+0x8f4>
  804f2c:	d9001617 	ldw	r4,88(sp)
  804f30:	900b883a 	mov	r5,r18
  804f34:	180d883a 	mov	r6,r3
  804f38:	08075240 	call	807524 <__lshift>
  804f3c:	1025883a 	mov	r18,r2
  804f40:	d9000c17 	ldw	r4,48(sp)
  804f44:	2005003a 	cmpeq	r2,r4,zero
  804f48:	10016f26 	beq	r2,zero,805508 <_dtoa_r+0xebc>
  804f4c:	d9000f17 	ldw	r4,60(sp)
  804f50:	0102170e 	bge	zero,r4,8057b0 <_dtoa_r+0x1164>
  804f54:	d9800b17 	ldw	r6,44(sp)
  804f58:	3005003a 	cmpeq	r2,r6,zero
  804f5c:	1000881e 	bne	r2,zero,805180 <_dtoa_r+0xb34>
  804f60:	0400050e 	bge	zero,r16,804f78 <_dtoa_r+0x92c>
  804f64:	d9001617 	ldw	r4,88(sp)
  804f68:	980b883a 	mov	r5,r19
  804f6c:	800d883a 	mov	r6,r16
  804f70:	08075240 	call	807524 <__lshift>
  804f74:	1027883a 	mov	r19,r2
  804f78:	8804c03a 	cmpne	r2,r17,zero
  804f7c:	1002541e 	bne	r2,zero,8058d0 <_dtoa_r+0x1284>
  804f80:	980b883a 	mov	r5,r19
  804f84:	dd800517 	ldw	r22,20(sp)
  804f88:	dcc00615 	stw	r19,24(sp)
  804f8c:	a700004c 	andi	fp,r20,1
  804f90:	2827883a 	mov	r19,r5
  804f94:	d9000717 	ldw	r4,28(sp)
  804f98:	900b883a 	mov	r5,r18
  804f9c:	08044340 	call	804434 <quorem>
  804fa0:	d9000717 	ldw	r4,28(sp)
  804fa4:	d9400617 	ldw	r5,24(sp)
  804fa8:	1023883a 	mov	r17,r2
  804fac:	8dc00c04 	addi	r23,r17,48
  804fb0:	0806d3c0 	call	806d3c <__mcmp>
  804fb4:	d9001617 	ldw	r4,88(sp)
  804fb8:	900b883a 	mov	r5,r18
  804fbc:	980d883a 	mov	r6,r19
  804fc0:	1029883a 	mov	r20,r2
  804fc4:	08073980 	call	807398 <__mdiff>
  804fc8:	102b883a 	mov	r21,r2
  804fcc:	10800317 	ldw	r2,12(r2)
  804fd0:	1001281e 	bne	r2,zero,805474 <_dtoa_r+0xe28>
  804fd4:	d9000717 	ldw	r4,28(sp)
  804fd8:	a80b883a 	mov	r5,r21
  804fdc:	0806d3c0 	call	806d3c <__mcmp>
  804fe0:	d9001617 	ldw	r4,88(sp)
  804fe4:	1021883a 	mov	r16,r2
  804fe8:	a80b883a 	mov	r5,r21
  804fec:	0806be00 	call	806be0 <_Bfree>
  804ff0:	8000041e 	bne	r16,zero,805004 <_dtoa_r+0x9b8>
  804ff4:	d8801717 	ldw	r2,92(sp)
  804ff8:	1000021e 	bne	r2,zero,805004 <_dtoa_r+0x9b8>
  804ffc:	e004c03a 	cmpne	r2,fp,zero
  805000:	10011726 	beq	r2,zero,805460 <_dtoa_r+0xe14>
  805004:	a0010616 	blt	r20,zero,805420 <_dtoa_r+0xdd4>
  805008:	a000041e 	bne	r20,zero,80501c <_dtoa_r+0x9d0>
  80500c:	d8c01717 	ldw	r3,92(sp)
  805010:	1800021e 	bne	r3,zero,80501c <_dtoa_r+0x9d0>
  805014:	e004c03a 	cmpne	r2,fp,zero
  805018:	10010126 	beq	r2,zero,805420 <_dtoa_r+0xdd4>
  80501c:	04023d16 	blt	zero,r16,805914 <_dtoa_r+0x12c8>
  805020:	b5c00005 	stb	r23,0(r22)
  805024:	d9800517 	ldw	r6,20(sp)
  805028:	d9000f17 	ldw	r4,60(sp)
  80502c:	b5800044 	addi	r22,r22,1
  805030:	3105883a 	add	r2,r6,r4
  805034:	b0806526 	beq	r22,r2,8051cc <_dtoa_r+0xb80>
  805038:	d9400717 	ldw	r5,28(sp)
  80503c:	d9001617 	ldw	r4,88(sp)
  805040:	01800284 	movi	r6,10
  805044:	000f883a 	mov	r7,zero
  805048:	08078940 	call	807894 <__multadd>
  80504c:	d8800715 	stw	r2,28(sp)
  805050:	d8800617 	ldw	r2,24(sp)
  805054:	14c10c26 	beq	r2,r19,805488 <_dtoa_r+0xe3c>
  805058:	d9400617 	ldw	r5,24(sp)
  80505c:	d9001617 	ldw	r4,88(sp)
  805060:	01800284 	movi	r6,10
  805064:	000f883a 	mov	r7,zero
  805068:	08078940 	call	807894 <__multadd>
  80506c:	d9001617 	ldw	r4,88(sp)
  805070:	980b883a 	mov	r5,r19
  805074:	01800284 	movi	r6,10
  805078:	000f883a 	mov	r7,zero
  80507c:	d8800615 	stw	r2,24(sp)
  805080:	08078940 	call	807894 <__multadd>
  805084:	1027883a 	mov	r19,r2
  805088:	003fc206 	br	804f94 <_dtoa_r+0x948>
  80508c:	2445c83a 	sub	r2,r4,r17
  805090:	a088983a 	sll	r4,r20,r2
  805094:	003e4b06 	br	8049c4 <_dtoa_r+0x378>
  805098:	01bfffc4 	movi	r6,-1
  80509c:	00800044 	movi	r2,1
  8050a0:	d9800e15 	stw	r6,56(sp)
  8050a4:	d9800f15 	stw	r6,60(sp)
  8050a8:	d8800b15 	stw	r2,44(sp)
  8050ac:	d8c01617 	ldw	r3,88(sp)
  8050b0:	008005c4 	movi	r2,23
  8050b4:	18001115 	stw	zero,68(r3)
  8050b8:	1580082e 	bgeu	r2,r22,8050dc <_dtoa_r+0xa90>
  8050bc:	00c00104 	movi	r3,4
  8050c0:	0009883a 	mov	r4,zero
  8050c4:	18c7883a 	add	r3,r3,r3
  8050c8:	18800504 	addi	r2,r3,20
  8050cc:	21000044 	addi	r4,r4,1
  8050d0:	b0bffc2e 	bgeu	r22,r2,8050c4 <_dtoa_r+0xa78>
  8050d4:	d9801617 	ldw	r6,88(sp)
  8050d8:	31001115 	stw	r4,68(r6)
  8050dc:	dc000f17 	ldw	r16,60(sp)
  8050e0:	003e4b06 	br	804a10 <_dtoa_r+0x3c4>
  8050e4:	d9801717 	ldw	r6,92(sp)
  8050e8:	0023883a 	mov	r17,zero
  8050ec:	31bfff04 	addi	r6,r6,-4
  8050f0:	d9801715 	stw	r6,92(sp)
  8050f4:	003df806 	br	8048d8 <_dtoa_r+0x28c>
  8050f8:	00800804 	movi	r2,32
  8050fc:	10c9c83a 	sub	r4,r2,r3
  805100:	00c00104 	movi	r3,4
  805104:	19005a16 	blt	r3,r4,805270 <_dtoa_r+0xc24>
  805108:	008000c4 	movi	r2,3
  80510c:	113f7e16 	blt	r2,r4,804f08 <_dtoa_r+0x8bc>
  805110:	20800704 	addi	r2,r4,28
  805114:	003f7506 	br	804eec <_dtoa_r+0x8a0>
  805118:	d9801717 	ldw	r6,92(sp)
  80511c:	00800044 	movi	r2,1
  805120:	1180a10e 	bge	r2,r6,8053a8 <_dtoa_r+0xd5c>
  805124:	d9800f17 	ldw	r6,60(sp)
  805128:	d8c01017 	ldw	r3,64(sp)
  80512c:	30bfffc4 	addi	r2,r6,-1
  805130:	1881c616 	blt	r3,r2,80584c <_dtoa_r+0x1200>
  805134:	18a5c83a 	sub	r18,r3,r2
  805138:	d8800f17 	ldw	r2,60(sp)
  80513c:	10026216 	blt	r2,zero,805ac8 <_dtoa_r+0x147c>
  805140:	dc001117 	ldw	r16,68(sp)
  805144:	1007883a 	mov	r3,r2
  805148:	d9800a17 	ldw	r6,40(sp)
  80514c:	d8801117 	ldw	r2,68(sp)
  805150:	d9001617 	ldw	r4,88(sp)
  805154:	30cd883a 	add	r6,r6,r3
  805158:	10c5883a 	add	r2,r2,r3
  80515c:	01400044 	movi	r5,1
  805160:	d9800a15 	stw	r6,40(sp)
  805164:	d8801115 	stw	r2,68(sp)
  805168:	08078580 	call	807858 <__i2b>
  80516c:	1027883a 	mov	r19,r2
  805170:	003f2506 	br	804e08 <_dtoa_r+0x7bc>
  805174:	00c02074 	movhi	r3,129
  805178:	18f4eb04 	addi	r3,r3,-11348
  80517c:	003d6706 	br	80471c <_dtoa_r+0xd0>
  805180:	dd800517 	ldw	r22,20(sp)
  805184:	04000044 	movi	r16,1
  805188:	00000706 	br	8051a8 <_dtoa_r+0xb5c>
  80518c:	d9400717 	ldw	r5,28(sp)
  805190:	d9001617 	ldw	r4,88(sp)
  805194:	01800284 	movi	r6,10
  805198:	000f883a 	mov	r7,zero
  80519c:	08078940 	call	807894 <__multadd>
  8051a0:	d8800715 	stw	r2,28(sp)
  8051a4:	84000044 	addi	r16,r16,1
  8051a8:	d9000717 	ldw	r4,28(sp)
  8051ac:	900b883a 	mov	r5,r18
  8051b0:	08044340 	call	804434 <quorem>
  8051b4:	15c00c04 	addi	r23,r2,48
  8051b8:	b5c00005 	stb	r23,0(r22)
  8051bc:	d8c00f17 	ldw	r3,60(sp)
  8051c0:	b5800044 	addi	r22,r22,1
  8051c4:	80fff116 	blt	r16,r3,80518c <_dtoa_r+0xb40>
  8051c8:	d8000615 	stw	zero,24(sp)
  8051cc:	d9400717 	ldw	r5,28(sp)
  8051d0:	d9001617 	ldw	r4,88(sp)
  8051d4:	01800044 	movi	r6,1
  8051d8:	08075240 	call	807524 <__lshift>
  8051dc:	1009883a 	mov	r4,r2
  8051e0:	900b883a 	mov	r5,r18
  8051e4:	d8800715 	stw	r2,28(sp)
  8051e8:	0806d3c0 	call	806d3c <__mcmp>
  8051ec:	00803c0e 	bge	zero,r2,8052e0 <_dtoa_r+0xc94>
  8051f0:	b009883a 	mov	r4,r22
  8051f4:	213fffc4 	addi	r4,r4,-1
  8051f8:	21400003 	ldbu	r5,0(r4)
  8051fc:	00800e44 	movi	r2,57
  805200:	28c03fcc 	andi	r3,r5,255
  805204:	18c0201c 	xori	r3,r3,128
  805208:	18ffe004 	addi	r3,r3,-128
  80520c:	1881981e 	bne	r3,r2,805870 <_dtoa_r+0x1224>
  805210:	d9800517 	ldw	r6,20(sp)
  805214:	21bff71e 	bne	r4,r6,8051f4 <_dtoa_r+0xba8>
  805218:	d8800d17 	ldw	r2,52(sp)
  80521c:	37000044 	addi	fp,r6,1
  805220:	10800044 	addi	r2,r2,1
  805224:	d8800d15 	stw	r2,52(sp)
  805228:	00800c44 	movi	r2,49
  80522c:	30800005 	stb	r2,0(r6)
  805230:	d9001617 	ldw	r4,88(sp)
  805234:	900b883a 	mov	r5,r18
  805238:	0806be00 	call	806be0 <_Bfree>
  80523c:	983ecd26 	beq	r19,zero,804d74 <_dtoa_r+0x728>
  805240:	d8c00617 	ldw	r3,24(sp)
  805244:	18000426 	beq	r3,zero,805258 <_dtoa_r+0xc0c>
  805248:	1cc00326 	beq	r3,r19,805258 <_dtoa_r+0xc0c>
  80524c:	d9001617 	ldw	r4,88(sp)
  805250:	180b883a 	mov	r5,r3
  805254:	0806be00 	call	806be0 <_Bfree>
  805258:	d9001617 	ldw	r4,88(sp)
  80525c:	980b883a 	mov	r5,r19
  805260:	0806be00 	call	806be0 <_Bfree>
  805264:	003ec306 	br	804d74 <_dtoa_r+0x728>
  805268:	1805883a 	mov	r2,r3
  80526c:	003eeb06 	br	804e1c <_dtoa_r+0x7d0>
  805270:	d9800a17 	ldw	r6,40(sp)
  805274:	d8c01117 	ldw	r3,68(sp)
  805278:	20bfff04 	addi	r2,r4,-4
  80527c:	308d883a 	add	r6,r6,r2
  805280:	1887883a 	add	r3,r3,r2
  805284:	80a1883a 	add	r16,r16,r2
  805288:	d9800a15 	stw	r6,40(sp)
  80528c:	d8c01115 	stw	r3,68(sp)
  805290:	003f1d06 	br	804f08 <_dtoa_r+0x8bc>
  805294:	a03f0c1e 	bne	r20,zero,804ec8 <_dtoa_r+0x87c>
  805298:	00800434 	movhi	r2,16
  80529c:	10bfffc4 	addi	r2,r2,-1
  8052a0:	a884703a 	and	r2,r21,r2
  8052a4:	103f081e 	bne	r2,zero,804ec8 <_dtoa_r+0x87c>
  8052a8:	a89ffc2c 	andhi	r2,r21,32752
  8052ac:	103f0626 	beq	r2,zero,804ec8 <_dtoa_r+0x87c>
  8052b0:	d8c01117 	ldw	r3,68(sp)
  8052b4:	d9000a17 	ldw	r4,40(sp)
  8052b8:	18c00044 	addi	r3,r3,1
  8052bc:	21000044 	addi	r4,r4,1
  8052c0:	d8c01115 	stw	r3,68(sp)
  8052c4:	d9000a15 	stw	r4,40(sp)
  8052c8:	003f0006 	br	804ecc <_dtoa_r+0x880>
  8052cc:	d9400717 	ldw	r5,28(sp)
  8052d0:	d9001617 	ldw	r4,88(sp)
  8052d4:	08079940 	call	807994 <__pow5mult>
  8052d8:	d8800715 	stw	r2,28(sp)
  8052dc:	003eed06 	br	804e94 <_dtoa_r+0x848>
  8052e0:	1000021e 	bne	r2,zero,8052ec <_dtoa_r+0xca0>
  8052e4:	b880004c 	andi	r2,r23,1
  8052e8:	103fc11e 	bne	r2,zero,8051f0 <_dtoa_r+0xba4>
  8052ec:	b5bfffc4 	addi	r22,r22,-1
  8052f0:	b0c00007 	ldb	r3,0(r22)
  8052f4:	00800c04 	movi	r2,48
  8052f8:	18bffc26 	beq	r3,r2,8052ec <_dtoa_r+0xca0>
  8052fc:	b7000044 	addi	fp,r22,1
  805300:	003fcb06 	br	805230 <_dtoa_r+0xbe4>
  805304:	d9800d17 	ldw	r6,52(sp)
  805308:	018fc83a 	sub	r7,zero,r6
  80530c:	3801f726 	beq	r7,zero,805aec <_dtoa_r+0x14a0>
  805310:	398003cc 	andi	r6,r7,15
  805314:	300c90fa 	slli	r6,r6,3
  805318:	01402074 	movhi	r5,129
  80531c:	29750804 	addi	r5,r5,-11232
  805320:	d9001217 	ldw	r4,72(sp)
  805324:	314d883a 	add	r6,r6,r5
  805328:	30c00117 	ldw	r3,4(r6)
  80532c:	30800017 	ldw	r2,0(r6)
  805330:	d9401317 	ldw	r5,76(sp)
  805334:	3821d13a 	srai	r16,r7,4
  805338:	100d883a 	mov	r6,r2
  80533c:	180f883a 	mov	r7,r3
  805340:	08095940 	call	809594 <__muldf3>
  805344:	1011883a 	mov	r8,r2
  805348:	1813883a 	mov	r9,r3
  80534c:	1029883a 	mov	r20,r2
  805350:	182b883a 	mov	r21,r3
  805354:	8001e526 	beq	r16,zero,805aec <_dtoa_r+0x14a0>
  805358:	05800084 	movi	r22,2
  80535c:	04402074 	movhi	r17,129
  805360:	8c753a04 	addi	r17,r17,-11032
  805364:	8080004c 	andi	r2,r16,1
  805368:	1005003a 	cmpeq	r2,r2,zero
  80536c:	1000081e 	bne	r2,zero,805390 <_dtoa_r+0xd44>
  805370:	89800017 	ldw	r6,0(r17)
  805374:	89c00117 	ldw	r7,4(r17)
  805378:	480b883a 	mov	r5,r9
  80537c:	4009883a 	mov	r4,r8
  805380:	08095940 	call	809594 <__muldf3>
  805384:	1011883a 	mov	r8,r2
  805388:	b5800044 	addi	r22,r22,1
  80538c:	1813883a 	mov	r9,r3
  805390:	8021d07a 	srai	r16,r16,1
  805394:	8c400204 	addi	r17,r17,8
  805398:	803ff21e 	bne	r16,zero,805364 <_dtoa_r+0xd18>
  80539c:	4029883a 	mov	r20,r8
  8053a0:	482b883a 	mov	r21,r9
  8053a4:	003dca06 	br	804ad0 <_dtoa_r+0x484>
  8053a8:	d9000817 	ldw	r4,32(sp)
  8053ac:	2005003a 	cmpeq	r2,r4,zero
  8053b0:	1001f61e 	bne	r2,zero,805b8c <_dtoa_r+0x1540>
  8053b4:	dc001117 	ldw	r16,68(sp)
  8053b8:	dc801017 	ldw	r18,64(sp)
  8053bc:	18c10cc4 	addi	r3,r3,1075
  8053c0:	003f6106 	br	805148 <_dtoa_r+0xafc>
  8053c4:	d8000b15 	stw	zero,44(sp)
  8053c8:	d9802617 	ldw	r6,152(sp)
  8053cc:	d8c00d17 	ldw	r3,52(sp)
  8053d0:	30800044 	addi	r2,r6,1
  8053d4:	18ad883a 	add	r22,r3,r2
  8053d8:	b13fffc4 	addi	r4,r22,-1
  8053dc:	d9000e15 	stw	r4,56(sp)
  8053e0:	0581f60e 	bge	zero,r22,805bbc <_dtoa_r+0x1570>
  8053e4:	dd800f15 	stw	r22,60(sp)
  8053e8:	003f3006 	br	8050ac <_dtoa_r+0xa60>
  8053ec:	d8000b15 	stw	zero,44(sp)
  8053f0:	d9002617 	ldw	r4,152(sp)
  8053f4:	0101eb0e 	bge	zero,r4,805ba4 <_dtoa_r+0x1558>
  8053f8:	202d883a 	mov	r22,r4
  8053fc:	d9000e15 	stw	r4,56(sp)
  805400:	d9000f15 	stw	r4,60(sp)
  805404:	003f2906 	br	8050ac <_dtoa_r+0xa60>
  805408:	01800044 	movi	r6,1
  80540c:	d9800b15 	stw	r6,44(sp)
  805410:	003ff706 	br	8053f0 <_dtoa_r+0xda4>
  805414:	01000044 	movi	r4,1
  805418:	d9000b15 	stw	r4,44(sp)
  80541c:	003fea06 	br	8053c8 <_dtoa_r+0xd7c>
  805420:	04000c0e 	bge	zero,r16,805454 <_dtoa_r+0xe08>
  805424:	d9400717 	ldw	r5,28(sp)
  805428:	d9001617 	ldw	r4,88(sp)
  80542c:	01800044 	movi	r6,1
  805430:	08075240 	call	807524 <__lshift>
  805434:	1009883a 	mov	r4,r2
  805438:	900b883a 	mov	r5,r18
  80543c:	d8800715 	stw	r2,28(sp)
  805440:	0806d3c0 	call	806d3c <__mcmp>
  805444:	0081e00e 	bge	zero,r2,805bc8 <_dtoa_r+0x157c>
  805448:	bdc00044 	addi	r23,r23,1
  80544c:	00800e84 	movi	r2,58
  805450:	b881a226 	beq	r23,r2,805adc <_dtoa_r+0x1490>
  805454:	b7000044 	addi	fp,r22,1
  805458:	b5c00005 	stb	r23,0(r22)
  80545c:	003f7406 	br	805230 <_dtoa_r+0xbe4>
  805460:	00800e44 	movi	r2,57
  805464:	b8819d26 	beq	r23,r2,805adc <_dtoa_r+0x1490>
  805468:	053ffa0e 	bge	zero,r20,805454 <_dtoa_r+0xe08>
  80546c:	8dc00c44 	addi	r23,r17,49
  805470:	003ff806 	br	805454 <_dtoa_r+0xe08>
  805474:	d9001617 	ldw	r4,88(sp)
  805478:	a80b883a 	mov	r5,r21
  80547c:	04000044 	movi	r16,1
  805480:	0806be00 	call	806be0 <_Bfree>
  805484:	003edf06 	br	805004 <_dtoa_r+0x9b8>
  805488:	d9001617 	ldw	r4,88(sp)
  80548c:	980b883a 	mov	r5,r19
  805490:	01800284 	movi	r6,10
  805494:	000f883a 	mov	r7,zero
  805498:	08078940 	call	807894 <__multadd>
  80549c:	1027883a 	mov	r19,r2
  8054a0:	d8800615 	stw	r2,24(sp)
  8054a4:	003ebb06 	br	804f94 <_dtoa_r+0x948>
  8054a8:	d9801117 	ldw	r6,68(sp)
  8054ac:	d8800d17 	ldw	r2,52(sp)
  8054b0:	d8000915 	stw	zero,36(sp)
  8054b4:	308dc83a 	sub	r6,r6,r2
  8054b8:	0087c83a 	sub	r3,zero,r2
  8054bc:	d9801115 	stw	r6,68(sp)
  8054c0:	d8c01015 	stw	r3,64(sp)
  8054c4:	003cfe06 	br	8048c0 <_dtoa_r+0x274>
  8054c8:	018dc83a 	sub	r6,zero,r6
  8054cc:	d9801115 	stw	r6,68(sp)
  8054d0:	d8000a15 	stw	zero,40(sp)
  8054d4:	003cf306 	br	8048a4 <_dtoa_r+0x258>
  8054d8:	d9000d17 	ldw	r4,52(sp)
  8054dc:	0809e580 	call	809e58 <__floatsidf>
  8054e0:	880b883a 	mov	r5,r17
  8054e4:	8009883a 	mov	r4,r16
  8054e8:	180f883a 	mov	r7,r3
  8054ec:	100d883a 	mov	r6,r2
  8054f0:	0809c380 	call	809c38 <__nedf2>
  8054f4:	103ce126 	beq	r2,zero,80487c <_dtoa_r+0x230>
  8054f8:	d9800d17 	ldw	r6,52(sp)
  8054fc:	31bfffc4 	addi	r6,r6,-1
  805500:	d9800d15 	stw	r6,52(sp)
  805504:	003cdd06 	br	80487c <_dtoa_r+0x230>
  805508:	d9000717 	ldw	r4,28(sp)
  80550c:	900b883a 	mov	r5,r18
  805510:	0806d3c0 	call	806d3c <__mcmp>
  805514:	103e8d0e 	bge	r2,zero,804f4c <_dtoa_r+0x900>
  805518:	d9400717 	ldw	r5,28(sp)
  80551c:	d9001617 	ldw	r4,88(sp)
  805520:	01800284 	movi	r6,10
  805524:	000f883a 	mov	r7,zero
  805528:	08078940 	call	807894 <__multadd>
  80552c:	d9800d17 	ldw	r6,52(sp)
  805530:	d8800715 	stw	r2,28(sp)
  805534:	31bfffc4 	addi	r6,r6,-1
  805538:	d9800d15 	stw	r6,52(sp)
  80553c:	b001a71e 	bne	r22,zero,805bdc <_dtoa_r+0x1590>
  805540:	d8800e17 	ldw	r2,56(sp)
  805544:	d8800f15 	stw	r2,60(sp)
  805548:	003e8006 	br	804f4c <_dtoa_r+0x900>
  80554c:	90800417 	ldw	r2,16(r18)
  805550:	1085883a 	add	r2,r2,r2
  805554:	1085883a 	add	r2,r2,r2
  805558:	1485883a 	add	r2,r2,r18
  80555c:	11000417 	ldw	r4,16(r2)
  805560:	0806c080 	call	806c08 <__hi0bits>
  805564:	00c00804 	movi	r3,32
  805568:	1887c83a 	sub	r3,r3,r2
  80556c:	003e5a06 	br	804ed8 <_dtoa_r+0x88c>
  805570:	d9400717 	ldw	r5,28(sp)
  805574:	d9801017 	ldw	r6,64(sp)
  805578:	d9001617 	ldw	r4,88(sp)
  80557c:	08079940 	call	807994 <__pow5mult>
  805580:	d8800715 	stw	r2,28(sp)
  805584:	003e4306 	br	804e94 <_dtoa_r+0x848>
  805588:	d9800f17 	ldw	r6,60(sp)
  80558c:	d8800d17 	ldw	r2,52(sp)
  805590:	d9800315 	stw	r6,12(sp)
  805594:	d8800415 	stw	r2,16(sp)
  805598:	d8c00b17 	ldw	r3,44(sp)
  80559c:	1805003a 	cmpeq	r2,r3,zero
  8055a0:	1000e21e 	bne	r2,zero,80592c <_dtoa_r+0x12e0>
  8055a4:	d9000317 	ldw	r4,12(sp)
  8055a8:	0005883a 	mov	r2,zero
  8055ac:	00cff834 	movhi	r3,16352
  8055b0:	200c90fa 	slli	r6,r4,3
  8055b4:	01002074 	movhi	r4,129
  8055b8:	21350804 	addi	r4,r4,-11232
  8055bc:	180b883a 	mov	r5,r3
  8055c0:	310d883a 	add	r6,r6,r4
  8055c4:	327fff17 	ldw	r9,-4(r6)
  8055c8:	323ffe17 	ldw	r8,-8(r6)
  8055cc:	1009883a 	mov	r4,r2
  8055d0:	480f883a 	mov	r7,r9
  8055d4:	400d883a 	mov	r6,r8
  8055d8:	08099580 	call	809958 <__divdf3>
  8055dc:	180b883a 	mov	r5,r3
  8055e0:	b00d883a 	mov	r6,r22
  8055e4:	b80f883a 	mov	r7,r23
  8055e8:	1009883a 	mov	r4,r2
  8055ec:	08094a00 	call	8094a0 <__subdf3>
  8055f0:	a80b883a 	mov	r5,r21
  8055f4:	a009883a 	mov	r4,r20
  8055f8:	d8c01915 	stw	r3,100(sp)
  8055fc:	d8801815 	stw	r2,96(sp)
  805600:	0809f500 	call	809f50 <__fixdfsi>
  805604:	1009883a 	mov	r4,r2
  805608:	1027883a 	mov	r19,r2
  80560c:	0809e580 	call	809e58 <__floatsidf>
  805610:	a80b883a 	mov	r5,r21
  805614:	a009883a 	mov	r4,r20
  805618:	180f883a 	mov	r7,r3
  80561c:	100d883a 	mov	r6,r2
  805620:	08094a00 	call	8094a0 <__subdf3>
  805624:	d9801817 	ldw	r6,96(sp)
  805628:	1823883a 	mov	r17,r3
  80562c:	d8801415 	stw	r2,80(sp)
  805630:	302d883a 	mov	r22,r6
  805634:	d9800517 	ldw	r6,20(sp)
  805638:	9cc00c04 	addi	r19,r19,48
  80563c:	dc401515 	stw	r17,84(sp)
  805640:	d8c01917 	ldw	r3,100(sp)
  805644:	34c00005 	stb	r19,0(r6)
  805648:	d8800517 	ldw	r2,20(sp)
  80564c:	d9401917 	ldw	r5,100(sp)
  805650:	d9801417 	ldw	r6,80(sp)
  805654:	b009883a 	mov	r4,r22
  805658:	880f883a 	mov	r7,r17
  80565c:	182f883a 	mov	r23,r3
  805660:	17000044 	addi	fp,r2,1
  805664:	0809cc00 	call	809cc0 <__gtdf2>
  805668:	00804e16 	blt	zero,r2,8057a4 <_dtoa_r+0x1158>
  80566c:	d9801417 	ldw	r6,80(sp)
  805670:	0005883a 	mov	r2,zero
  805674:	00cffc34 	movhi	r3,16368
  805678:	180b883a 	mov	r5,r3
  80567c:	880f883a 	mov	r7,r17
  805680:	1009883a 	mov	r4,r2
  805684:	08094a00 	call	8094a0 <__subdf3>
  805688:	d9401917 	ldw	r5,100(sp)
  80568c:	180f883a 	mov	r7,r3
  805690:	b009883a 	mov	r4,r22
  805694:	100d883a 	mov	r6,r2
  805698:	0809cc00 	call	809cc0 <__gtdf2>
  80569c:	00bda216 	blt	zero,r2,804d28 <_dtoa_r+0x6dc>
  8056a0:	d8c00317 	ldw	r3,12(sp)
  8056a4:	00800044 	movi	r2,1
  8056a8:	10c01216 	blt	r2,r3,8056f4 <_dtoa_r+0x10a8>
  8056ac:	003d4506 	br	804bc4 <_dtoa_r+0x578>
  8056b0:	d9801417 	ldw	r6,80(sp)
  8056b4:	0005883a 	mov	r2,zero
  8056b8:	00cffc34 	movhi	r3,16368
  8056bc:	180b883a 	mov	r5,r3
  8056c0:	880f883a 	mov	r7,r17
  8056c4:	1009883a 	mov	r4,r2
  8056c8:	08094a00 	call	8094a0 <__subdf3>
  8056cc:	d9c01b17 	ldw	r7,108(sp)
  8056d0:	180b883a 	mov	r5,r3
  8056d4:	1009883a 	mov	r4,r2
  8056d8:	b00d883a 	mov	r6,r22
  8056dc:	0809dd00 	call	809dd0 <__ltdf2>
  8056e0:	103d9116 	blt	r2,zero,804d28 <_dtoa_r+0x6dc>
  8056e4:	d9800517 	ldw	r6,20(sp)
  8056e8:	d9000317 	ldw	r4,12(sp)
  8056ec:	3105883a 	add	r2,r6,r4
  8056f0:	e0bd3426 	beq	fp,r2,804bc4 <_dtoa_r+0x578>
  8056f4:	04500934 	movhi	r17,16420
  8056f8:	0021883a 	mov	r16,zero
  8056fc:	b80b883a 	mov	r5,r23
  805700:	b009883a 	mov	r4,r22
  805704:	800d883a 	mov	r6,r16
  805708:	880f883a 	mov	r7,r17
  80570c:	08095940 	call	809594 <__muldf3>
  805710:	d9401517 	ldw	r5,84(sp)
  805714:	d9001417 	ldw	r4,80(sp)
  805718:	880f883a 	mov	r7,r17
  80571c:	000d883a 	mov	r6,zero
  805720:	d8801a15 	stw	r2,104(sp)
  805724:	d8c01b15 	stw	r3,108(sp)
  805728:	08095940 	call	809594 <__muldf3>
  80572c:	180b883a 	mov	r5,r3
  805730:	1009883a 	mov	r4,r2
  805734:	1823883a 	mov	r17,r3
  805738:	1021883a 	mov	r16,r2
  80573c:	0809f500 	call	809f50 <__fixdfsi>
  805740:	1009883a 	mov	r4,r2
  805744:	102b883a 	mov	r21,r2
  805748:	0809e580 	call	809e58 <__floatsidf>
  80574c:	880b883a 	mov	r5,r17
  805750:	8009883a 	mov	r4,r16
  805754:	180f883a 	mov	r7,r3
  805758:	100d883a 	mov	r6,r2
  80575c:	08094a00 	call	8094a0 <__subdf3>
  805760:	1021883a 	mov	r16,r2
  805764:	d9001b17 	ldw	r4,108(sp)
  805768:	1823883a 	mov	r17,r3
  80576c:	dc001415 	stw	r16,80(sp)
  805770:	ad400c04 	addi	r21,r21,48
  805774:	dc401515 	stw	r17,84(sp)
  805778:	d8801a17 	ldw	r2,104(sp)
  80577c:	e5400005 	stb	r21,0(fp)
  805780:	202f883a 	mov	r23,r4
  805784:	d9c01b17 	ldw	r7,108(sp)
  805788:	d9001417 	ldw	r4,80(sp)
  80578c:	880b883a 	mov	r5,r17
  805790:	100d883a 	mov	r6,r2
  805794:	102d883a 	mov	r22,r2
  805798:	e7000044 	addi	fp,fp,1
  80579c:	0809dd00 	call	809dd0 <__ltdf2>
  8057a0:	103fc30e 	bge	r2,zero,8056b0 <_dtoa_r+0x1064>
  8057a4:	d9000417 	ldw	r4,16(sp)
  8057a8:	d9000d15 	stw	r4,52(sp)
  8057ac:	003d7106 	br	804d74 <_dtoa_r+0x728>
  8057b0:	d9801717 	ldw	r6,92(sp)
  8057b4:	00800084 	movi	r2,2
  8057b8:	11bde60e 	bge	r2,r6,804f54 <_dtoa_r+0x908>
  8057bc:	203cfb1e 	bne	r4,zero,804bac <_dtoa_r+0x560>
  8057c0:	d9001617 	ldw	r4,88(sp)
  8057c4:	900b883a 	mov	r5,r18
  8057c8:	01800144 	movi	r6,5
  8057cc:	000f883a 	mov	r7,zero
  8057d0:	08078940 	call	807894 <__multadd>
  8057d4:	d9000717 	ldw	r4,28(sp)
  8057d8:	100b883a 	mov	r5,r2
  8057dc:	1025883a 	mov	r18,r2
  8057e0:	0806d3c0 	call	806d3c <__mcmp>
  8057e4:	00bcf10e 	bge	zero,r2,804bac <_dtoa_r+0x560>
  8057e8:	d8c00d17 	ldw	r3,52(sp)
  8057ec:	d9000517 	ldw	r4,20(sp)
  8057f0:	d8000615 	stw	zero,24(sp)
  8057f4:	18c00044 	addi	r3,r3,1
  8057f8:	d8c00d15 	stw	r3,52(sp)
  8057fc:	00800c44 	movi	r2,49
  805800:	27000044 	addi	fp,r4,1
  805804:	20800005 	stb	r2,0(r4)
  805808:	003e8906 	br	805230 <_dtoa_r+0xbe4>
  80580c:	d8c00517 	ldw	r3,20(sp)
  805810:	003bc206 	br	80471c <_dtoa_r+0xd0>
  805814:	01802074 	movhi	r6,129
  805818:	31b53a04 	addi	r6,r6,-11032
  80581c:	30c00917 	ldw	r3,36(r6)
  805820:	30800817 	ldw	r2,32(r6)
  805824:	d9001217 	ldw	r4,72(sp)
  805828:	d9401317 	ldw	r5,76(sp)
  80582c:	180f883a 	mov	r7,r3
  805830:	100d883a 	mov	r6,r2
  805834:	08099580 	call	809958 <__divdf3>
  805838:	948003cc 	andi	r18,r18,15
  80583c:	058000c4 	movi	r22,3
  805840:	1029883a 	mov	r20,r2
  805844:	182b883a 	mov	r21,r3
  805848:	003c8906 	br	804a70 <_dtoa_r+0x424>
  80584c:	d9001017 	ldw	r4,64(sp)
  805850:	d9800917 	ldw	r6,36(sp)
  805854:	0025883a 	mov	r18,zero
  805858:	1105c83a 	sub	r2,r2,r4
  80585c:	2089883a 	add	r4,r4,r2
  805860:	308d883a 	add	r6,r6,r2
  805864:	d9001015 	stw	r4,64(sp)
  805868:	d9800915 	stw	r6,36(sp)
  80586c:	003e3206 	br	805138 <_dtoa_r+0xaec>
  805870:	28800044 	addi	r2,r5,1
  805874:	27000044 	addi	fp,r4,1
  805878:	20800005 	stb	r2,0(r4)
  80587c:	003e6c06 	br	805230 <_dtoa_r+0xbe4>
  805880:	d8800f17 	ldw	r2,60(sp)
  805884:	00bce016 	blt	zero,r2,804c08 <_dtoa_r+0x5bc>
  805888:	d9800f17 	ldw	r6,60(sp)
  80588c:	303cc51e 	bne	r6,zero,804ba4 <_dtoa_r+0x558>
  805890:	0005883a 	mov	r2,zero
  805894:	00d00534 	movhi	r3,16404
  805898:	980b883a 	mov	r5,r19
  80589c:	180f883a 	mov	r7,r3
  8058a0:	9009883a 	mov	r4,r18
  8058a4:	100d883a 	mov	r6,r2
  8058a8:	08095940 	call	809594 <__muldf3>
  8058ac:	180b883a 	mov	r5,r3
  8058b0:	a80f883a 	mov	r7,r21
  8058b4:	1009883a 	mov	r4,r2
  8058b8:	a00d883a 	mov	r6,r20
  8058bc:	0809d480 	call	809d48 <__gedf2>
  8058c0:	103cb80e 	bge	r2,zero,804ba4 <_dtoa_r+0x558>
  8058c4:	0027883a 	mov	r19,zero
  8058c8:	0025883a 	mov	r18,zero
  8058cc:	003fc606 	br	8057e8 <_dtoa_r+0x119c>
  8058d0:	99400117 	ldw	r5,4(r19)
  8058d4:	d9001617 	ldw	r4,88(sp)
  8058d8:	08071600 	call	807160 <_Balloc>
  8058dc:	99800417 	ldw	r6,16(r19)
  8058e0:	11000304 	addi	r4,r2,12
  8058e4:	99400304 	addi	r5,r19,12
  8058e8:	318d883a 	add	r6,r6,r6
  8058ec:	318d883a 	add	r6,r6,r6
  8058f0:	31800204 	addi	r6,r6,8
  8058f4:	1023883a 	mov	r17,r2
  8058f8:	0801c740 	call	801c74 <memcpy>
  8058fc:	d9001617 	ldw	r4,88(sp)
  805900:	880b883a 	mov	r5,r17
  805904:	01800044 	movi	r6,1
  805908:	08075240 	call	807524 <__lshift>
  80590c:	100b883a 	mov	r5,r2
  805910:	003d9c06 	br	804f84 <_dtoa_r+0x938>
  805914:	00800e44 	movi	r2,57
  805918:	b8807026 	beq	r23,r2,805adc <_dtoa_r+0x1490>
  80591c:	b8800044 	addi	r2,r23,1
  805920:	b7000044 	addi	fp,r22,1
  805924:	b0800005 	stb	r2,0(r22)
  805928:	003e4106 	br	805230 <_dtoa_r+0xbe4>
  80592c:	d8800317 	ldw	r2,12(sp)
  805930:	01802074 	movhi	r6,129
  805934:	31b50804 	addi	r6,r6,-11232
  805938:	b009883a 	mov	r4,r22
  80593c:	100e90fa 	slli	r7,r2,3
  805940:	b80b883a 	mov	r5,r23
  805944:	398f883a 	add	r7,r7,r6
  805948:	38bffe17 	ldw	r2,-8(r7)
  80594c:	d9800517 	ldw	r6,20(sp)
  805950:	38ffff17 	ldw	r3,-4(r7)
  805954:	37000044 	addi	fp,r6,1
  805958:	180f883a 	mov	r7,r3
  80595c:	100d883a 	mov	r6,r2
  805960:	08095940 	call	809594 <__muldf3>
  805964:	a80b883a 	mov	r5,r21
  805968:	a009883a 	mov	r4,r20
  80596c:	182f883a 	mov	r23,r3
  805970:	102d883a 	mov	r22,r2
  805974:	0809f500 	call	809f50 <__fixdfsi>
  805978:	1009883a 	mov	r4,r2
  80597c:	1027883a 	mov	r19,r2
  805980:	0809e580 	call	809e58 <__floatsidf>
  805984:	a80b883a 	mov	r5,r21
  805988:	a009883a 	mov	r4,r20
  80598c:	180f883a 	mov	r7,r3
  805990:	100d883a 	mov	r6,r2
  805994:	08094a00 	call	8094a0 <__subdf3>
  805998:	180b883a 	mov	r5,r3
  80599c:	d8c00517 	ldw	r3,20(sp)
  8059a0:	9cc00c04 	addi	r19,r19,48
  8059a4:	1009883a 	mov	r4,r2
  8059a8:	1cc00005 	stb	r19,0(r3)
  8059ac:	2021883a 	mov	r16,r4
  8059b0:	d9000317 	ldw	r4,12(sp)
  8059b4:	00800044 	movi	r2,1
  8059b8:	2823883a 	mov	r17,r5
  8059bc:	20802226 	beq	r4,r2,805a48 <_dtoa_r+0x13fc>
  8059c0:	1029883a 	mov	r20,r2
  8059c4:	0005883a 	mov	r2,zero
  8059c8:	00d00934 	movhi	r3,16420
  8059cc:	180f883a 	mov	r7,r3
  8059d0:	100d883a 	mov	r6,r2
  8059d4:	880b883a 	mov	r5,r17
  8059d8:	8009883a 	mov	r4,r16
  8059dc:	08095940 	call	809594 <__muldf3>
  8059e0:	180b883a 	mov	r5,r3
  8059e4:	1009883a 	mov	r4,r2
  8059e8:	1823883a 	mov	r17,r3
  8059ec:	1021883a 	mov	r16,r2
  8059f0:	0809f500 	call	809f50 <__fixdfsi>
  8059f4:	1009883a 	mov	r4,r2
  8059f8:	102b883a 	mov	r21,r2
  8059fc:	0809e580 	call	809e58 <__floatsidf>
  805a00:	880b883a 	mov	r5,r17
  805a04:	8009883a 	mov	r4,r16
  805a08:	180f883a 	mov	r7,r3
  805a0c:	100d883a 	mov	r6,r2
  805a10:	08094a00 	call	8094a0 <__subdf3>
  805a14:	180b883a 	mov	r5,r3
  805a18:	d8c00517 	ldw	r3,20(sp)
  805a1c:	1009883a 	mov	r4,r2
  805a20:	ad400c04 	addi	r21,r21,48
  805a24:	1d05883a 	add	r2,r3,r20
  805a28:	15400005 	stb	r21,0(r2)
  805a2c:	2021883a 	mov	r16,r4
  805a30:	d9000317 	ldw	r4,12(sp)
  805a34:	a5000044 	addi	r20,r20,1
  805a38:	2823883a 	mov	r17,r5
  805a3c:	a13fe11e 	bne	r20,r4,8059c4 <_dtoa_r+0x1378>
  805a40:	e505883a 	add	r2,fp,r20
  805a44:	173fffc4 	addi	fp,r2,-1
  805a48:	0025883a 	mov	r18,zero
  805a4c:	04cff834 	movhi	r19,16352
  805a50:	b009883a 	mov	r4,r22
  805a54:	b80b883a 	mov	r5,r23
  805a58:	900d883a 	mov	r6,r18
  805a5c:	980f883a 	mov	r7,r19
  805a60:	08095200 	call	809520 <__adddf3>
  805a64:	180b883a 	mov	r5,r3
  805a68:	1009883a 	mov	r4,r2
  805a6c:	800d883a 	mov	r6,r16
  805a70:	880f883a 	mov	r7,r17
  805a74:	0809dd00 	call	809dd0 <__ltdf2>
  805a78:	103cab16 	blt	r2,zero,804d28 <_dtoa_r+0x6dc>
  805a7c:	0009883a 	mov	r4,zero
  805a80:	980b883a 	mov	r5,r19
  805a84:	b80f883a 	mov	r7,r23
  805a88:	b00d883a 	mov	r6,r22
  805a8c:	08094a00 	call	8094a0 <__subdf3>
  805a90:	180b883a 	mov	r5,r3
  805a94:	880f883a 	mov	r7,r17
  805a98:	1009883a 	mov	r4,r2
  805a9c:	800d883a 	mov	r6,r16
  805aa0:	0809cc00 	call	809cc0 <__gtdf2>
  805aa4:	00bc470e 	bge	zero,r2,804bc4 <_dtoa_r+0x578>
  805aa8:	00c00c04 	movi	r3,48
  805aac:	e73fffc4 	addi	fp,fp,-1
  805ab0:	e0800007 	ldb	r2,0(fp)
  805ab4:	10fffd26 	beq	r2,r3,805aac <_dtoa_r+0x1460>
  805ab8:	d9800417 	ldw	r6,16(sp)
  805abc:	e7000044 	addi	fp,fp,1
  805ac0:	d9800d15 	stw	r6,52(sp)
  805ac4:	003cab06 	br	804d74 <_dtoa_r+0x728>
  805ac8:	d8c00f17 	ldw	r3,60(sp)
  805acc:	d9001117 	ldw	r4,68(sp)
  805ad0:	20e1c83a 	sub	r16,r4,r3
  805ad4:	0007883a 	mov	r3,zero
  805ad8:	003d9b06 	br	805148 <_dtoa_r+0xafc>
  805adc:	00800e44 	movi	r2,57
  805ae0:	b0800005 	stb	r2,0(r22)
  805ae4:	b5800044 	addi	r22,r22,1
  805ae8:	003dc106 	br	8051f0 <_dtoa_r+0xba4>
  805aec:	05800084 	movi	r22,2
  805af0:	003bf706 	br	804ad0 <_dtoa_r+0x484>
  805af4:	d9000f17 	ldw	r4,60(sp)
  805af8:	013c000e 	bge	zero,r4,804afc <_dtoa_r+0x4b0>
  805afc:	d9800e17 	ldw	r6,56(sp)
  805b00:	01bc300e 	bge	zero,r6,804bc4 <_dtoa_r+0x578>
  805b04:	0005883a 	mov	r2,zero
  805b08:	00d00934 	movhi	r3,16420
  805b0c:	a80b883a 	mov	r5,r21
  805b10:	180f883a 	mov	r7,r3
  805b14:	a009883a 	mov	r4,r20
  805b18:	100d883a 	mov	r6,r2
  805b1c:	08095940 	call	809594 <__muldf3>
  805b20:	b1000044 	addi	r4,r22,1
  805b24:	1021883a 	mov	r16,r2
  805b28:	1823883a 	mov	r17,r3
  805b2c:	0809e580 	call	809e58 <__floatsidf>
  805b30:	880b883a 	mov	r5,r17
  805b34:	8009883a 	mov	r4,r16
  805b38:	180f883a 	mov	r7,r3
  805b3c:	100d883a 	mov	r6,r2
  805b40:	08095940 	call	809594 <__muldf3>
  805b44:	0011883a 	mov	r8,zero
  805b48:	02500734 	movhi	r9,16412
  805b4c:	180b883a 	mov	r5,r3
  805b50:	480f883a 	mov	r7,r9
  805b54:	1009883a 	mov	r4,r2
  805b58:	400d883a 	mov	r6,r8
  805b5c:	08095200 	call	809520 <__adddf3>
  805b60:	102d883a 	mov	r22,r2
  805b64:	00bf3034 	movhi	r2,64704
  805b68:	10ef883a 	add	r23,r2,r3
  805b6c:	d8800d17 	ldw	r2,52(sp)
  805b70:	d8c00e17 	ldw	r3,56(sp)
  805b74:	8029883a 	mov	r20,r16
  805b78:	10bfffc4 	addi	r2,r2,-1
  805b7c:	882b883a 	mov	r21,r17
  805b80:	d8800415 	stw	r2,16(sp)
  805b84:	d8c00315 	stw	r3,12(sp)
  805b88:	003e8306 	br	805598 <_dtoa_r+0xf4c>
  805b8c:	d8800117 	ldw	r2,4(sp)
  805b90:	dc001117 	ldw	r16,68(sp)
  805b94:	dc801017 	ldw	r18,64(sp)
  805b98:	00c00d84 	movi	r3,54
  805b9c:	1887c83a 	sub	r3,r3,r2
  805ba0:	003d6906 	br	805148 <_dtoa_r+0xafc>
  805ba4:	01800044 	movi	r6,1
  805ba8:	3021883a 	mov	r16,r6
  805bac:	d9800f15 	stw	r6,60(sp)
  805bb0:	d9802615 	stw	r6,152(sp)
  805bb4:	d9800e15 	stw	r6,56(sp)
  805bb8:	003b9306 	br	804a08 <_dtoa_r+0x3bc>
  805bbc:	b021883a 	mov	r16,r22
  805bc0:	dd800f15 	stw	r22,60(sp)
  805bc4:	003b9006 	br	804a08 <_dtoa_r+0x3bc>
  805bc8:	103e221e 	bne	r2,zero,805454 <_dtoa_r+0xe08>
  805bcc:	b880004c 	andi	r2,r23,1
  805bd0:	1005003a 	cmpeq	r2,r2,zero
  805bd4:	103e1f1e 	bne	r2,zero,805454 <_dtoa_r+0xe08>
  805bd8:	003e1b06 	br	805448 <_dtoa_r+0xdfc>
  805bdc:	d9001617 	ldw	r4,88(sp)
  805be0:	980b883a 	mov	r5,r19
  805be4:	01800284 	movi	r6,10
  805be8:	000f883a 	mov	r7,zero
  805bec:	08078940 	call	807894 <__multadd>
  805bf0:	d8c00e17 	ldw	r3,56(sp)
  805bf4:	1027883a 	mov	r19,r2
  805bf8:	d8c00f15 	stw	r3,60(sp)
  805bfc:	003cd306 	br	804f4c <_dtoa_r+0x900>

00805c00 <_fclose_r>:
  805c00:	defffc04 	addi	sp,sp,-16
  805c04:	dc400115 	stw	r17,4(sp)
  805c08:	dc000015 	stw	r16,0(sp)
  805c0c:	dfc00315 	stw	ra,12(sp)
  805c10:	dc800215 	stw	r18,8(sp)
  805c14:	2821883a 	mov	r16,r5
  805c18:	2023883a 	mov	r17,r4
  805c1c:	28002926 	beq	r5,zero,805cc4 <_fclose_r+0xc4>
  805c20:	08010400 	call	801040 <__sfp_lock_acquire>
  805c24:	88000226 	beq	r17,zero,805c30 <_fclose_r+0x30>
  805c28:	88800e17 	ldw	r2,56(r17)
  805c2c:	10002d26 	beq	r2,zero,805ce4 <_fclose_r+0xe4>
  805c30:	8080030f 	ldh	r2,12(r16)
  805c34:	10002226 	beq	r2,zero,805cc0 <_fclose_r+0xc0>
  805c38:	8809883a 	mov	r4,r17
  805c3c:	800b883a 	mov	r5,r16
  805c40:	0805d240 	call	805d24 <_fflush_r>
  805c44:	1025883a 	mov	r18,r2
  805c48:	80800b17 	ldw	r2,44(r16)
  805c4c:	10000426 	beq	r2,zero,805c60 <_fclose_r+0x60>
  805c50:	81400717 	ldw	r5,28(r16)
  805c54:	8809883a 	mov	r4,r17
  805c58:	103ee83a 	callr	r2
  805c5c:	10002a16 	blt	r2,zero,805d08 <_fclose_r+0x108>
  805c60:	8080030b 	ldhu	r2,12(r16)
  805c64:	1080200c 	andi	r2,r2,128
  805c68:	1000231e 	bne	r2,zero,805cf8 <_fclose_r+0xf8>
  805c6c:	81400c17 	ldw	r5,48(r16)
  805c70:	28000526 	beq	r5,zero,805c88 <_fclose_r+0x88>
  805c74:	80801004 	addi	r2,r16,64
  805c78:	28800226 	beq	r5,r2,805c84 <_fclose_r+0x84>
  805c7c:	8809883a 	mov	r4,r17
  805c80:	08060800 	call	806080 <_free_r>
  805c84:	80000c15 	stw	zero,48(r16)
  805c88:	81401117 	ldw	r5,68(r16)
  805c8c:	28000326 	beq	r5,zero,805c9c <_fclose_r+0x9c>
  805c90:	8809883a 	mov	r4,r17
  805c94:	08060800 	call	806080 <_free_r>
  805c98:	80001115 	stw	zero,68(r16)
  805c9c:	8000030d 	sth	zero,12(r16)
  805ca0:	08010440 	call	801044 <__sfp_lock_release>
  805ca4:	9005883a 	mov	r2,r18
  805ca8:	dfc00317 	ldw	ra,12(sp)
  805cac:	dc800217 	ldw	r18,8(sp)
  805cb0:	dc400117 	ldw	r17,4(sp)
  805cb4:	dc000017 	ldw	r16,0(sp)
  805cb8:	dec00404 	addi	sp,sp,16
  805cbc:	f800283a 	ret
  805cc0:	08010440 	call	801044 <__sfp_lock_release>
  805cc4:	0025883a 	mov	r18,zero
  805cc8:	9005883a 	mov	r2,r18
  805ccc:	dfc00317 	ldw	ra,12(sp)
  805cd0:	dc800217 	ldw	r18,8(sp)
  805cd4:	dc400117 	ldw	r17,4(sp)
  805cd8:	dc000017 	ldw	r16,0(sp)
  805cdc:	dec00404 	addi	sp,sp,16
  805ce0:	f800283a 	ret
  805ce4:	8809883a 	mov	r4,r17
  805ce8:	08010500 	call	801050 <__sinit>
  805cec:	8080030f 	ldh	r2,12(r16)
  805cf0:	103fd11e 	bne	r2,zero,805c38 <_fclose_r+0x38>
  805cf4:	003ff206 	br	805cc0 <_fclose_r+0xc0>
  805cf8:	81400417 	ldw	r5,16(r16)
  805cfc:	8809883a 	mov	r4,r17
  805d00:	08060800 	call	806080 <_free_r>
  805d04:	003fd906 	br	805c6c <_fclose_r+0x6c>
  805d08:	04bfffc4 	movi	r18,-1
  805d0c:	003fd406 	br	805c60 <_fclose_r+0x60>

00805d10 <fclose>:
  805d10:	00802074 	movhi	r2,129
  805d14:	10be6704 	addi	r2,r2,-1636
  805d18:	200b883a 	mov	r5,r4
  805d1c:	11000017 	ldw	r4,0(r2)
  805d20:	0805c001 	jmpi	805c00 <_fclose_r>

00805d24 <_fflush_r>:
  805d24:	defffb04 	addi	sp,sp,-20
  805d28:	dcc00315 	stw	r19,12(sp)
  805d2c:	dc800215 	stw	r18,8(sp)
  805d30:	dfc00415 	stw	ra,16(sp)
  805d34:	dc400115 	stw	r17,4(sp)
  805d38:	dc000015 	stw	r16,0(sp)
  805d3c:	2027883a 	mov	r19,r4
  805d40:	2825883a 	mov	r18,r5
  805d44:	20000226 	beq	r4,zero,805d50 <_fflush_r+0x2c>
  805d48:	20800e17 	ldw	r2,56(r4)
  805d4c:	10005626 	beq	r2,zero,805ea8 <_fflush_r+0x184>
  805d50:	9100030b 	ldhu	r4,12(r18)
  805d54:	20ffffcc 	andi	r3,r4,65535
  805d58:	18e0001c 	xori	r3,r3,32768
  805d5c:	18e00004 	addi	r3,r3,-32768
  805d60:	1880020c 	andi	r2,r3,8
  805d64:	1000261e 	bne	r2,zero,805e00 <_fflush_r+0xdc>
  805d68:	90c00117 	ldw	r3,4(r18)
  805d6c:	20820014 	ori	r2,r4,2048
  805d70:	9080030d 	sth	r2,12(r18)
  805d74:	1009883a 	mov	r4,r2
  805d78:	00c0400e 	bge	zero,r3,805e7c <_fflush_r+0x158>
  805d7c:	92000a17 	ldw	r8,40(r18)
  805d80:	40004026 	beq	r8,zero,805e84 <_fflush_r+0x160>
  805d84:	2084000c 	andi	r2,r4,4096
  805d88:	10005326 	beq	r2,zero,805ed8 <_fflush_r+0x1b4>
  805d8c:	94001417 	ldw	r16,80(r18)
  805d90:	9080030b 	ldhu	r2,12(r18)
  805d94:	1080010c 	andi	r2,r2,4
  805d98:	1000481e 	bne	r2,zero,805ebc <_fflush_r+0x198>
  805d9c:	91400717 	ldw	r5,28(r18)
  805da0:	9809883a 	mov	r4,r19
  805da4:	800d883a 	mov	r6,r16
  805da8:	000f883a 	mov	r7,zero
  805dac:	403ee83a 	callr	r8
  805db0:	8080261e 	bne	r16,r2,805e4c <_fflush_r+0x128>
  805db4:	9080030b 	ldhu	r2,12(r18)
  805db8:	91000417 	ldw	r4,16(r18)
  805dbc:	90000115 	stw	zero,4(r18)
  805dc0:	10bdffcc 	andi	r2,r2,63487
  805dc4:	10ffffcc 	andi	r3,r2,65535
  805dc8:	18c4000c 	andi	r3,r3,4096
  805dcc:	9080030d 	sth	r2,12(r18)
  805dd0:	91000015 	stw	r4,0(r18)
  805dd4:	18002b26 	beq	r3,zero,805e84 <_fflush_r+0x160>
  805dd8:	0007883a 	mov	r3,zero
  805ddc:	1805883a 	mov	r2,r3
  805de0:	94001415 	stw	r16,80(r18)
  805de4:	dfc00417 	ldw	ra,16(sp)
  805de8:	dcc00317 	ldw	r19,12(sp)
  805dec:	dc800217 	ldw	r18,8(sp)
  805df0:	dc400117 	ldw	r17,4(sp)
  805df4:	dc000017 	ldw	r16,0(sp)
  805df8:	dec00504 	addi	sp,sp,20
  805dfc:	f800283a 	ret
  805e00:	94400417 	ldw	r17,16(r18)
  805e04:	88001f26 	beq	r17,zero,805e84 <_fflush_r+0x160>
  805e08:	90800017 	ldw	r2,0(r18)
  805e0c:	18c000cc 	andi	r3,r3,3
  805e10:	94400015 	stw	r17,0(r18)
  805e14:	1461c83a 	sub	r16,r2,r17
  805e18:	18002526 	beq	r3,zero,805eb0 <_fflush_r+0x18c>
  805e1c:	0005883a 	mov	r2,zero
  805e20:	90800215 	stw	r2,8(r18)
  805e24:	0400170e 	bge	zero,r16,805e84 <_fflush_r+0x160>
  805e28:	90c00917 	ldw	r3,36(r18)
  805e2c:	91400717 	ldw	r5,28(r18)
  805e30:	880d883a 	mov	r6,r17
  805e34:	800f883a 	mov	r7,r16
  805e38:	9809883a 	mov	r4,r19
  805e3c:	183ee83a 	callr	r3
  805e40:	88a3883a 	add	r17,r17,r2
  805e44:	80a1c83a 	sub	r16,r16,r2
  805e48:	00bff616 	blt	zero,r2,805e24 <_fflush_r+0x100>
  805e4c:	9080030b 	ldhu	r2,12(r18)
  805e50:	00ffffc4 	movi	r3,-1
  805e54:	10801014 	ori	r2,r2,64
  805e58:	9080030d 	sth	r2,12(r18)
  805e5c:	1805883a 	mov	r2,r3
  805e60:	dfc00417 	ldw	ra,16(sp)
  805e64:	dcc00317 	ldw	r19,12(sp)
  805e68:	dc800217 	ldw	r18,8(sp)
  805e6c:	dc400117 	ldw	r17,4(sp)
  805e70:	dc000017 	ldw	r16,0(sp)
  805e74:	dec00504 	addi	sp,sp,20
  805e78:	f800283a 	ret
  805e7c:	90800f17 	ldw	r2,60(r18)
  805e80:	00bfbe16 	blt	zero,r2,805d7c <_fflush_r+0x58>
  805e84:	0007883a 	mov	r3,zero
  805e88:	1805883a 	mov	r2,r3
  805e8c:	dfc00417 	ldw	ra,16(sp)
  805e90:	dcc00317 	ldw	r19,12(sp)
  805e94:	dc800217 	ldw	r18,8(sp)
  805e98:	dc400117 	ldw	r17,4(sp)
  805e9c:	dc000017 	ldw	r16,0(sp)
  805ea0:	dec00504 	addi	sp,sp,20
  805ea4:	f800283a 	ret
  805ea8:	08010500 	call	801050 <__sinit>
  805eac:	003fa806 	br	805d50 <_fflush_r+0x2c>
  805eb0:	90800517 	ldw	r2,20(r18)
  805eb4:	90800215 	stw	r2,8(r18)
  805eb8:	003fda06 	br	805e24 <_fflush_r+0x100>
  805ebc:	90800117 	ldw	r2,4(r18)
  805ec0:	90c00c17 	ldw	r3,48(r18)
  805ec4:	80a1c83a 	sub	r16,r16,r2
  805ec8:	183fb426 	beq	r3,zero,805d9c <_fflush_r+0x78>
  805ecc:	90800f17 	ldw	r2,60(r18)
  805ed0:	80a1c83a 	sub	r16,r16,r2
  805ed4:	003fb106 	br	805d9c <_fflush_r+0x78>
  805ed8:	91400717 	ldw	r5,28(r18)
  805edc:	9809883a 	mov	r4,r19
  805ee0:	000d883a 	mov	r6,zero
  805ee4:	01c00044 	movi	r7,1
  805ee8:	403ee83a 	callr	r8
  805eec:	1021883a 	mov	r16,r2
  805ef0:	00bfffc4 	movi	r2,-1
  805ef4:	80800226 	beq	r16,r2,805f00 <_fflush_r+0x1dc>
  805ef8:	92000a17 	ldw	r8,40(r18)
  805efc:	003fa406 	br	805d90 <_fflush_r+0x6c>
  805f00:	98c00017 	ldw	r3,0(r19)
  805f04:	00800744 	movi	r2,29
  805f08:	18bfde26 	beq	r3,r2,805e84 <_fflush_r+0x160>
  805f0c:	9080030b 	ldhu	r2,12(r18)
  805f10:	8007883a 	mov	r3,r16
  805f14:	10801014 	ori	r2,r2,64
  805f18:	9080030d 	sth	r2,12(r18)
  805f1c:	003fcf06 	br	805e5c <_fflush_r+0x138>

00805f20 <fflush>:
  805f20:	01402034 	movhi	r5,128
  805f24:	29574904 	addi	r5,r5,23844
  805f28:	2007883a 	mov	r3,r4
  805f2c:	20000526 	beq	r4,zero,805f44 <fflush+0x24>
  805f30:	00802074 	movhi	r2,129
  805f34:	10be6704 	addi	r2,r2,-1636
  805f38:	11000017 	ldw	r4,0(r2)
  805f3c:	180b883a 	mov	r5,r3
  805f40:	0805d241 	jmpi	805d24 <_fflush_r>
  805f44:	00802074 	movhi	r2,129
  805f48:	10be6804 	addi	r2,r2,-1632
  805f4c:	11000017 	ldw	r4,0(r2)
  805f50:	08012a81 	jmpi	8012a8 <_fwalk_reent>

00805f54 <_malloc_trim_r>:
  805f54:	defffb04 	addi	sp,sp,-20
  805f58:	dcc00315 	stw	r19,12(sp)
  805f5c:	04c02074 	movhi	r19,129
  805f60:	9cf8e004 	addi	r19,r19,-7296
  805f64:	dc800215 	stw	r18,8(sp)
  805f68:	dc400115 	stw	r17,4(sp)
  805f6c:	dc000015 	stw	r16,0(sp)
  805f70:	2823883a 	mov	r17,r5
  805f74:	2025883a 	mov	r18,r4
  805f78:	dfc00415 	stw	ra,16(sp)
  805f7c:	080ae6c0 	call	80ae6c <__malloc_lock>
  805f80:	98800217 	ldw	r2,8(r19)
  805f84:	9009883a 	mov	r4,r18
  805f88:	000b883a 	mov	r5,zero
  805f8c:	10c00117 	ldw	r3,4(r2)
  805f90:	00bfff04 	movi	r2,-4
  805f94:	18a0703a 	and	r16,r3,r2
  805f98:	8463c83a 	sub	r17,r16,r17
  805f9c:	8c43fbc4 	addi	r17,r17,4079
  805fa0:	8822d33a 	srli	r17,r17,12
  805fa4:	0083ffc4 	movi	r2,4095
  805fa8:	8c7fffc4 	addi	r17,r17,-1
  805fac:	8822933a 	slli	r17,r17,12
  805fb0:	1440060e 	bge	r2,r17,805fcc <_malloc_trim_r+0x78>
  805fb4:	08020b80 	call	8020b8 <_sbrk_r>
  805fb8:	98c00217 	ldw	r3,8(r19)
  805fbc:	9009883a 	mov	r4,r18
  805fc0:	044bc83a 	sub	r5,zero,r17
  805fc4:	80c7883a 	add	r3,r16,r3
  805fc8:	10c00926 	beq	r2,r3,805ff0 <_malloc_trim_r+0x9c>
  805fcc:	080ae8c0 	call	80ae8c <__malloc_unlock>
  805fd0:	0005883a 	mov	r2,zero
  805fd4:	dfc00417 	ldw	ra,16(sp)
  805fd8:	dcc00317 	ldw	r19,12(sp)
  805fdc:	dc800217 	ldw	r18,8(sp)
  805fe0:	dc400117 	ldw	r17,4(sp)
  805fe4:	dc000017 	ldw	r16,0(sp)
  805fe8:	dec00504 	addi	sp,sp,20
  805fec:	f800283a 	ret
  805ff0:	9009883a 	mov	r4,r18
  805ff4:	08020b80 	call	8020b8 <_sbrk_r>
  805ff8:	844dc83a 	sub	r6,r16,r17
  805ffc:	00ffffc4 	movi	r3,-1
  806000:	9009883a 	mov	r4,r18
  806004:	000b883a 	mov	r5,zero
  806008:	01c02074 	movhi	r7,129
  80600c:	39c75904 	addi	r7,r7,7524
  806010:	31800054 	ori	r6,r6,1
  806014:	10c00926 	beq	r2,r3,80603c <_malloc_trim_r+0xe8>
  806018:	38800017 	ldw	r2,0(r7)
  80601c:	98c00217 	ldw	r3,8(r19)
  806020:	9009883a 	mov	r4,r18
  806024:	1445c83a 	sub	r2,r2,r17
  806028:	38800015 	stw	r2,0(r7)
  80602c:	19800115 	stw	r6,4(r3)
  806030:	080ae8c0 	call	80ae8c <__malloc_unlock>
  806034:	00800044 	movi	r2,1
  806038:	003fe606 	br	805fd4 <_malloc_trim_r+0x80>
  80603c:	08020b80 	call	8020b8 <_sbrk_r>
  806040:	99800217 	ldw	r6,8(r19)
  806044:	100f883a 	mov	r7,r2
  806048:	9009883a 	mov	r4,r18
  80604c:	1187c83a 	sub	r3,r2,r6
  806050:	008003c4 	movi	r2,15
  806054:	19400054 	ori	r5,r3,1
  806058:	10ffdc0e 	bge	r2,r3,805fcc <_malloc_trim_r+0x78>
  80605c:	00802074 	movhi	r2,129
  806060:	10be6a04 	addi	r2,r2,-1624
  806064:	10c00017 	ldw	r3,0(r2)
  806068:	00802074 	movhi	r2,129
  80606c:	10875904 	addi	r2,r2,7524
  806070:	31400115 	stw	r5,4(r6)
  806074:	38c7c83a 	sub	r3,r7,r3
  806078:	10c00015 	stw	r3,0(r2)
  80607c:	003fd306 	br	805fcc <_malloc_trim_r+0x78>

00806080 <_free_r>:
  806080:	defffd04 	addi	sp,sp,-12
  806084:	dc400115 	stw	r17,4(sp)
  806088:	dc000015 	stw	r16,0(sp)
  80608c:	dfc00215 	stw	ra,8(sp)
  806090:	2821883a 	mov	r16,r5
  806094:	2023883a 	mov	r17,r4
  806098:	28005a26 	beq	r5,zero,806204 <_free_r+0x184>
  80609c:	080ae6c0 	call	80ae6c <__malloc_lock>
  8060a0:	823ffe04 	addi	r8,r16,-8
  8060a4:	41400117 	ldw	r5,4(r8)
  8060a8:	00bfff84 	movi	r2,-2
  8060ac:	02802074 	movhi	r10,129
  8060b0:	52b8e004 	addi	r10,r10,-7296
  8060b4:	288e703a 	and	r7,r5,r2
  8060b8:	41cd883a 	add	r6,r8,r7
  8060bc:	30c00117 	ldw	r3,4(r6)
  8060c0:	51000217 	ldw	r4,8(r10)
  8060c4:	00bfff04 	movi	r2,-4
  8060c8:	1892703a 	and	r9,r3,r2
  8060cc:	5017883a 	mov	r11,r10
  8060d0:	31006726 	beq	r6,r4,806270 <_free_r+0x1f0>
  8060d4:	2880004c 	andi	r2,r5,1
  8060d8:	1005003a 	cmpeq	r2,r2,zero
  8060dc:	32400115 	stw	r9,4(r6)
  8060e0:	10001a1e 	bne	r2,zero,80614c <_free_r+0xcc>
  8060e4:	000b883a 	mov	r5,zero
  8060e8:	3247883a 	add	r3,r6,r9
  8060ec:	18800117 	ldw	r2,4(r3)
  8060f0:	1080004c 	andi	r2,r2,1
  8060f4:	1000231e 	bne	r2,zero,806184 <_free_r+0x104>
  8060f8:	280ac03a 	cmpne	r5,r5,zero
  8060fc:	3a4f883a 	add	r7,r7,r9
  806100:	2800451e 	bne	r5,zero,806218 <_free_r+0x198>
  806104:	31000217 	ldw	r4,8(r6)
  806108:	00802074 	movhi	r2,129
  80610c:	10b8e204 	addi	r2,r2,-7288
  806110:	20807b26 	beq	r4,r2,806300 <_free_r+0x280>
  806114:	30800317 	ldw	r2,12(r6)
  806118:	3a07883a 	add	r3,r7,r8
  80611c:	19c00015 	stw	r7,0(r3)
  806120:	11000215 	stw	r4,8(r2)
  806124:	20800315 	stw	r2,12(r4)
  806128:	38800054 	ori	r2,r7,1
  80612c:	40800115 	stw	r2,4(r8)
  806130:	28001a26 	beq	r5,zero,80619c <_free_r+0x11c>
  806134:	8809883a 	mov	r4,r17
  806138:	dfc00217 	ldw	ra,8(sp)
  80613c:	dc400117 	ldw	r17,4(sp)
  806140:	dc000017 	ldw	r16,0(sp)
  806144:	dec00304 	addi	sp,sp,12
  806148:	080ae8c1 	jmpi	80ae8c <__malloc_unlock>
  80614c:	80bffe17 	ldw	r2,-8(r16)
  806150:	50c00204 	addi	r3,r10,8
  806154:	4091c83a 	sub	r8,r8,r2
  806158:	41000217 	ldw	r4,8(r8)
  80615c:	388f883a 	add	r7,r7,r2
  806160:	20c06126 	beq	r4,r3,8062e8 <_free_r+0x268>
  806164:	40800317 	ldw	r2,12(r8)
  806168:	3247883a 	add	r3,r6,r9
  80616c:	000b883a 	mov	r5,zero
  806170:	11000215 	stw	r4,8(r2)
  806174:	20800315 	stw	r2,12(r4)
  806178:	18800117 	ldw	r2,4(r3)
  80617c:	1080004c 	andi	r2,r2,1
  806180:	103fdd26 	beq	r2,zero,8060f8 <_free_r+0x78>
  806184:	38800054 	ori	r2,r7,1
  806188:	3a07883a 	add	r3,r7,r8
  80618c:	280ac03a 	cmpne	r5,r5,zero
  806190:	40800115 	stw	r2,4(r8)
  806194:	19c00015 	stw	r7,0(r3)
  806198:	283fe61e 	bne	r5,zero,806134 <_free_r+0xb4>
  80619c:	00807fc4 	movi	r2,511
  8061a0:	11c01f2e 	bgeu	r2,r7,806220 <_free_r+0x1a0>
  8061a4:	3806d27a 	srli	r3,r7,9
  8061a8:	1800481e 	bne	r3,zero,8062cc <_free_r+0x24c>
  8061ac:	3804d0fa 	srli	r2,r7,3
  8061b0:	100690fa 	slli	r3,r2,3
  8061b4:	1acd883a 	add	r6,r3,r11
  8061b8:	31400217 	ldw	r5,8(r6)
  8061bc:	31405926 	beq	r6,r5,806324 <_free_r+0x2a4>
  8061c0:	28800117 	ldw	r2,4(r5)
  8061c4:	00ffff04 	movi	r3,-4
  8061c8:	10c4703a 	and	r2,r2,r3
  8061cc:	3880022e 	bgeu	r7,r2,8061d8 <_free_r+0x158>
  8061d0:	29400217 	ldw	r5,8(r5)
  8061d4:	317ffa1e 	bne	r6,r5,8061c0 <_free_r+0x140>
  8061d8:	29800317 	ldw	r6,12(r5)
  8061dc:	41800315 	stw	r6,12(r8)
  8061e0:	41400215 	stw	r5,8(r8)
  8061e4:	8809883a 	mov	r4,r17
  8061e8:	2a000315 	stw	r8,12(r5)
  8061ec:	32000215 	stw	r8,8(r6)
  8061f0:	dfc00217 	ldw	ra,8(sp)
  8061f4:	dc400117 	ldw	r17,4(sp)
  8061f8:	dc000017 	ldw	r16,0(sp)
  8061fc:	dec00304 	addi	sp,sp,12
  806200:	080ae8c1 	jmpi	80ae8c <__malloc_unlock>
  806204:	dfc00217 	ldw	ra,8(sp)
  806208:	dc400117 	ldw	r17,4(sp)
  80620c:	dc000017 	ldw	r16,0(sp)
  806210:	dec00304 	addi	sp,sp,12
  806214:	f800283a 	ret
  806218:	31000217 	ldw	r4,8(r6)
  80621c:	003fbd06 	br	806114 <_free_r+0x94>
  806220:	3806d0fa 	srli	r3,r7,3
  806224:	00800044 	movi	r2,1
  806228:	51400117 	ldw	r5,4(r10)
  80622c:	180890fa 	slli	r4,r3,3
  806230:	1807d0ba 	srai	r3,r3,2
  806234:	22c9883a 	add	r4,r4,r11
  806238:	21800217 	ldw	r6,8(r4)
  80623c:	10c4983a 	sll	r2,r2,r3
  806240:	41000315 	stw	r4,12(r8)
  806244:	41800215 	stw	r6,8(r8)
  806248:	288ab03a 	or	r5,r5,r2
  80624c:	22000215 	stw	r8,8(r4)
  806250:	8809883a 	mov	r4,r17
  806254:	51400115 	stw	r5,4(r10)
  806258:	32000315 	stw	r8,12(r6)
  80625c:	dfc00217 	ldw	ra,8(sp)
  806260:	dc400117 	ldw	r17,4(sp)
  806264:	dc000017 	ldw	r16,0(sp)
  806268:	dec00304 	addi	sp,sp,12
  80626c:	080ae8c1 	jmpi	80ae8c <__malloc_unlock>
  806270:	2880004c 	andi	r2,r5,1
  806274:	3a4d883a 	add	r6,r7,r9
  806278:	1000071e 	bne	r2,zero,806298 <_free_r+0x218>
  80627c:	80bffe17 	ldw	r2,-8(r16)
  806280:	4091c83a 	sub	r8,r8,r2
  806284:	41000317 	ldw	r4,12(r8)
  806288:	40c00217 	ldw	r3,8(r8)
  80628c:	308d883a 	add	r6,r6,r2
  806290:	20c00215 	stw	r3,8(r4)
  806294:	19000315 	stw	r4,12(r3)
  806298:	00802074 	movhi	r2,129
  80629c:	10be6904 	addi	r2,r2,-1628
  8062a0:	11000017 	ldw	r4,0(r2)
  8062a4:	30c00054 	ori	r3,r6,1
  8062a8:	52000215 	stw	r8,8(r10)
  8062ac:	40c00115 	stw	r3,4(r8)
  8062b0:	313fa036 	bltu	r6,r4,806134 <_free_r+0xb4>
  8062b4:	00802074 	movhi	r2,129
  8062b8:	10874c04 	addi	r2,r2,7472
  8062bc:	11400017 	ldw	r5,0(r2)
  8062c0:	8809883a 	mov	r4,r17
  8062c4:	0805f540 	call	805f54 <_malloc_trim_r>
  8062c8:	003f9a06 	br	806134 <_free_r+0xb4>
  8062cc:	00800104 	movi	r2,4
  8062d0:	10c0072e 	bgeu	r2,r3,8062f0 <_free_r+0x270>
  8062d4:	00800504 	movi	r2,20
  8062d8:	10c01936 	bltu	r2,r3,806340 <_free_r+0x2c0>
  8062dc:	188016c4 	addi	r2,r3,91
  8062e0:	100690fa 	slli	r3,r2,3
  8062e4:	003fb306 	br	8061b4 <_free_r+0x134>
  8062e8:	01400044 	movi	r5,1
  8062ec:	003f7e06 	br	8060e8 <_free_r+0x68>
  8062f0:	3804d1ba 	srli	r2,r7,6
  8062f4:	10800e04 	addi	r2,r2,56
  8062f8:	100690fa 	slli	r3,r2,3
  8062fc:	003fad06 	br	8061b4 <_free_r+0x134>
  806300:	22000315 	stw	r8,12(r4)
  806304:	22000215 	stw	r8,8(r4)
  806308:	3a05883a 	add	r2,r7,r8
  80630c:	38c00054 	ori	r3,r7,1
  806310:	11c00015 	stw	r7,0(r2)
  806314:	41000215 	stw	r4,8(r8)
  806318:	40c00115 	stw	r3,4(r8)
  80631c:	41000315 	stw	r4,12(r8)
  806320:	003f8406 	br	806134 <_free_r+0xb4>
  806324:	1005d0ba 	srai	r2,r2,2
  806328:	00c00044 	movi	r3,1
  80632c:	51000117 	ldw	r4,4(r10)
  806330:	1886983a 	sll	r3,r3,r2
  806334:	20c8b03a 	or	r4,r4,r3
  806338:	51000115 	stw	r4,4(r10)
  80633c:	003fa706 	br	8061dc <_free_r+0x15c>
  806340:	00801504 	movi	r2,84
  806344:	10c00436 	bltu	r2,r3,806358 <_free_r+0x2d8>
  806348:	3804d33a 	srli	r2,r7,12
  80634c:	10801b84 	addi	r2,r2,110
  806350:	100690fa 	slli	r3,r2,3
  806354:	003f9706 	br	8061b4 <_free_r+0x134>
  806358:	00805504 	movi	r2,340
  80635c:	10c00436 	bltu	r2,r3,806370 <_free_r+0x2f0>
  806360:	3804d3fa 	srli	r2,r7,15
  806364:	10801dc4 	addi	r2,r2,119
  806368:	100690fa 	slli	r3,r2,3
  80636c:	003f9106 	br	8061b4 <_free_r+0x134>
  806370:	00815504 	movi	r2,1364
  806374:	10c0032e 	bgeu	r2,r3,806384 <_free_r+0x304>
  806378:	00801f84 	movi	r2,126
  80637c:	00c0fc04 	movi	r3,1008
  806380:	003f8c06 	br	8061b4 <_free_r+0x134>
  806384:	3804d4ba 	srli	r2,r7,18
  806388:	10801f04 	addi	r2,r2,124
  80638c:	100690fa 	slli	r3,r2,3
  806390:	003f8806 	br	8061b4 <_free_r+0x134>

00806394 <__sfvwrite_r>:
  806394:	30800217 	ldw	r2,8(r6)
  806398:	defff504 	addi	sp,sp,-44
  80639c:	df000915 	stw	fp,36(sp)
  8063a0:	dd800715 	stw	r22,28(sp)
  8063a4:	dc800315 	stw	r18,12(sp)
  8063a8:	dfc00a15 	stw	ra,40(sp)
  8063ac:	ddc00815 	stw	r23,32(sp)
  8063b0:	dd400615 	stw	r21,24(sp)
  8063b4:	dd000515 	stw	r20,20(sp)
  8063b8:	dcc00415 	stw	r19,16(sp)
  8063bc:	dc400215 	stw	r17,8(sp)
  8063c0:	dc000115 	stw	r16,4(sp)
  8063c4:	302d883a 	mov	r22,r6
  8063c8:	2039883a 	mov	fp,r4
  8063cc:	2825883a 	mov	r18,r5
  8063d0:	10001c26 	beq	r2,zero,806444 <__sfvwrite_r+0xb0>
  8063d4:	29c0030b 	ldhu	r7,12(r5)
  8063d8:	3880020c 	andi	r2,r7,8
  8063dc:	10002726 	beq	r2,zero,80647c <__sfvwrite_r+0xe8>
  8063e0:	28800417 	ldw	r2,16(r5)
  8063e4:	10002526 	beq	r2,zero,80647c <__sfvwrite_r+0xe8>
  8063e8:	3880008c 	andi	r2,r7,2
  8063ec:	b5400017 	ldw	r21,0(r22)
  8063f0:	10002826 	beq	r2,zero,806494 <__sfvwrite_r+0x100>
  8063f4:	0021883a 	mov	r16,zero
  8063f8:	0023883a 	mov	r17,zero
  8063fc:	880d883a 	mov	r6,r17
  806400:	e009883a 	mov	r4,fp
  806404:	00810004 	movi	r2,1024
  806408:	80006e26 	beq	r16,zero,8065c4 <__sfvwrite_r+0x230>
  80640c:	800f883a 	mov	r7,r16
  806410:	91400717 	ldw	r5,28(r18)
  806414:	1400012e 	bgeu	r2,r16,80641c <__sfvwrite_r+0x88>
  806418:	100f883a 	mov	r7,r2
  80641c:	90c00917 	ldw	r3,36(r18)
  806420:	183ee83a 	callr	r3
  806424:	1007883a 	mov	r3,r2
  806428:	80a1c83a 	sub	r16,r16,r2
  80642c:	88a3883a 	add	r17,r17,r2
  806430:	00806d0e 	bge	zero,r2,8065e8 <__sfvwrite_r+0x254>
  806434:	b0800217 	ldw	r2,8(r22)
  806438:	10c5c83a 	sub	r2,r2,r3
  80643c:	b0800215 	stw	r2,8(r22)
  806440:	103fee1e 	bne	r2,zero,8063fc <__sfvwrite_r+0x68>
  806444:	0009883a 	mov	r4,zero
  806448:	2005883a 	mov	r2,r4
  80644c:	dfc00a17 	ldw	ra,40(sp)
  806450:	df000917 	ldw	fp,36(sp)
  806454:	ddc00817 	ldw	r23,32(sp)
  806458:	dd800717 	ldw	r22,28(sp)
  80645c:	dd400617 	ldw	r21,24(sp)
  806460:	dd000517 	ldw	r20,20(sp)
  806464:	dcc00417 	ldw	r19,16(sp)
  806468:	dc800317 	ldw	r18,12(sp)
  80646c:	dc400217 	ldw	r17,8(sp)
  806470:	dc000117 	ldw	r16,4(sp)
  806474:	dec00b04 	addi	sp,sp,44
  806478:	f800283a 	ret
  80647c:	08042880 	call	804288 <__swsetup_r>
  806480:	1000e41e 	bne	r2,zero,806814 <__sfvwrite_r+0x480>
  806484:	91c0030b 	ldhu	r7,12(r18)
  806488:	b5400017 	ldw	r21,0(r22)
  80648c:	3880008c 	andi	r2,r7,2
  806490:	103fd81e 	bne	r2,zero,8063f4 <__sfvwrite_r+0x60>
  806494:	3880004c 	andi	r2,r7,1
  806498:	1005003a 	cmpeq	r2,r2,zero
  80649c:	10005726 	beq	r2,zero,8065fc <__sfvwrite_r+0x268>
  8064a0:	0029883a 	mov	r20,zero
  8064a4:	002f883a 	mov	r23,zero
  8064a8:	a0004226 	beq	r20,zero,8065b4 <__sfvwrite_r+0x220>
  8064ac:	3880800c 	andi	r2,r7,512
  8064b0:	94000217 	ldw	r16,8(r18)
  8064b4:	10008b26 	beq	r2,zero,8066e4 <__sfvwrite_r+0x350>
  8064b8:	800d883a 	mov	r6,r16
  8064bc:	a400a536 	bltu	r20,r16,806754 <__sfvwrite_r+0x3c0>
  8064c0:	3881200c 	andi	r2,r7,1152
  8064c4:	10002726 	beq	r2,zero,806564 <__sfvwrite_r+0x1d0>
  8064c8:	90800517 	ldw	r2,20(r18)
  8064cc:	92000417 	ldw	r8,16(r18)
  8064d0:	91400017 	ldw	r5,0(r18)
  8064d4:	1087883a 	add	r3,r2,r2
  8064d8:	1887883a 	add	r3,r3,r2
  8064dc:	1808d7fa 	srli	r4,r3,31
  8064e0:	2a21c83a 	sub	r16,r5,r8
  8064e4:	80800044 	addi	r2,r16,1
  8064e8:	20c9883a 	add	r4,r4,r3
  8064ec:	2027d07a 	srai	r19,r4,1
  8064f0:	a085883a 	add	r2,r20,r2
  8064f4:	980d883a 	mov	r6,r19
  8064f8:	9880022e 	bgeu	r19,r2,806504 <__sfvwrite_r+0x170>
  8064fc:	1027883a 	mov	r19,r2
  806500:	100d883a 	mov	r6,r2
  806504:	3881000c 	andi	r2,r7,1024
  806508:	1000b826 	beq	r2,zero,8067ec <__sfvwrite_r+0x458>
  80650c:	300b883a 	mov	r5,r6
  806510:	e009883a 	mov	r4,fp
  806514:	08014500 	call	801450 <_malloc_r>
  806518:	10003126 	beq	r2,zero,8065e0 <__sfvwrite_r+0x24c>
  80651c:	91400417 	ldw	r5,16(r18)
  806520:	1009883a 	mov	r4,r2
  806524:	800d883a 	mov	r6,r16
  806528:	1023883a 	mov	r17,r2
  80652c:	0801c740 	call	801c74 <memcpy>
  806530:	90c0030b 	ldhu	r3,12(r18)
  806534:	00beffc4 	movi	r2,-1025
  806538:	1886703a 	and	r3,r3,r2
  80653c:	18c02014 	ori	r3,r3,128
  806540:	90c0030d 	sth	r3,12(r18)
  806544:	9c07c83a 	sub	r3,r19,r16
  806548:	8c05883a 	add	r2,r17,r16
  80654c:	a00d883a 	mov	r6,r20
  806550:	a021883a 	mov	r16,r20
  806554:	90800015 	stw	r2,0(r18)
  806558:	90c00215 	stw	r3,8(r18)
  80655c:	94400415 	stw	r17,16(r18)
  806560:	94c00515 	stw	r19,20(r18)
  806564:	91000017 	ldw	r4,0(r18)
  806568:	b80b883a 	mov	r5,r23
  80656c:	a023883a 	mov	r17,r20
  806570:	0806b000 	call	806b00 <memmove>
  806574:	90c00217 	ldw	r3,8(r18)
  806578:	90800017 	ldw	r2,0(r18)
  80657c:	a027883a 	mov	r19,r20
  806580:	1c07c83a 	sub	r3,r3,r16
  806584:	1405883a 	add	r2,r2,r16
  806588:	90c00215 	stw	r3,8(r18)
  80658c:	a021883a 	mov	r16,r20
  806590:	90800015 	stw	r2,0(r18)
  806594:	b0800217 	ldw	r2,8(r22)
  806598:	1405c83a 	sub	r2,r2,r16
  80659c:	b0800215 	stw	r2,8(r22)
  8065a0:	103fa826 	beq	r2,zero,806444 <__sfvwrite_r+0xb0>
  8065a4:	a469c83a 	sub	r20,r20,r17
  8065a8:	91c0030b 	ldhu	r7,12(r18)
  8065ac:	bcef883a 	add	r23,r23,r19
  8065b0:	a03fbe1e 	bne	r20,zero,8064ac <__sfvwrite_r+0x118>
  8065b4:	adc00017 	ldw	r23,0(r21)
  8065b8:	ad000117 	ldw	r20,4(r21)
  8065bc:	ad400204 	addi	r21,r21,8
  8065c0:	003fb906 	br	8064a8 <__sfvwrite_r+0x114>
  8065c4:	ac400017 	ldw	r17,0(r21)
  8065c8:	ac000117 	ldw	r16,4(r21)
  8065cc:	ad400204 	addi	r21,r21,8
  8065d0:	003f8a06 	br	8063fc <__sfvwrite_r+0x68>
  8065d4:	91400417 	ldw	r5,16(r18)
  8065d8:	e009883a 	mov	r4,fp
  8065dc:	08060800 	call	806080 <_free_r>
  8065e0:	00800304 	movi	r2,12
  8065e4:	e0800015 	stw	r2,0(fp)
  8065e8:	9080030b 	ldhu	r2,12(r18)
  8065ec:	013fffc4 	movi	r4,-1
  8065f0:	10801014 	ori	r2,r2,64
  8065f4:	9080030d 	sth	r2,12(r18)
  8065f8:	003f9306 	br	806448 <__sfvwrite_r+0xb4>
  8065fc:	0027883a 	mov	r19,zero
  806600:	002f883a 	mov	r23,zero
  806604:	d8000015 	stw	zero,0(sp)
  806608:	0029883a 	mov	r20,zero
  80660c:	98001e26 	beq	r19,zero,806688 <__sfvwrite_r+0x2f4>
  806610:	d8c00017 	ldw	r3,0(sp)
  806614:	1804c03a 	cmpne	r2,r3,zero
  806618:	10005e26 	beq	r2,zero,806794 <__sfvwrite_r+0x400>
  80661c:	9821883a 	mov	r16,r19
  806620:	a4c0012e 	bgeu	r20,r19,806628 <__sfvwrite_r+0x294>
  806624:	a021883a 	mov	r16,r20
  806628:	91000017 	ldw	r4,0(r18)
  80662c:	90800417 	ldw	r2,16(r18)
  806630:	91800217 	ldw	r6,8(r18)
  806634:	91c00517 	ldw	r7,20(r18)
  806638:	1100022e 	bgeu	r2,r4,806644 <__sfvwrite_r+0x2b0>
  80663c:	31e3883a 	add	r17,r6,r7
  806640:	8c001616 	blt	r17,r16,80669c <__sfvwrite_r+0x308>
  806644:	81c03816 	blt	r16,r7,806728 <__sfvwrite_r+0x394>
  806648:	90c00917 	ldw	r3,36(r18)
  80664c:	91400717 	ldw	r5,28(r18)
  806650:	e009883a 	mov	r4,fp
  806654:	b80d883a 	mov	r6,r23
  806658:	183ee83a 	callr	r3
  80665c:	1023883a 	mov	r17,r2
  806660:	00bfe10e 	bge	zero,r2,8065e8 <__sfvwrite_r+0x254>
  806664:	a469c83a 	sub	r20,r20,r17
  806668:	a0001826 	beq	r20,zero,8066cc <__sfvwrite_r+0x338>
  80666c:	b0800217 	ldw	r2,8(r22)
  806670:	1445c83a 	sub	r2,r2,r17
  806674:	b0800215 	stw	r2,8(r22)
  806678:	103f7226 	beq	r2,zero,806444 <__sfvwrite_r+0xb0>
  80667c:	9c67c83a 	sub	r19,r19,r17
  806680:	bc6f883a 	add	r23,r23,r17
  806684:	983fe21e 	bne	r19,zero,806610 <__sfvwrite_r+0x27c>
  806688:	adc00017 	ldw	r23,0(r21)
  80668c:	acc00117 	ldw	r19,4(r21)
  806690:	ad400204 	addi	r21,r21,8
  806694:	d8000015 	stw	zero,0(sp)
  806698:	003fdc06 	br	80660c <__sfvwrite_r+0x278>
  80669c:	b80b883a 	mov	r5,r23
  8066a0:	880d883a 	mov	r6,r17
  8066a4:	0806b000 	call	806b00 <memmove>
  8066a8:	90c00017 	ldw	r3,0(r18)
  8066ac:	e009883a 	mov	r4,fp
  8066b0:	900b883a 	mov	r5,r18
  8066b4:	1c47883a 	add	r3,r3,r17
  8066b8:	90c00015 	stw	r3,0(r18)
  8066bc:	0805d240 	call	805d24 <_fflush_r>
  8066c0:	103fc91e 	bne	r2,zero,8065e8 <__sfvwrite_r+0x254>
  8066c4:	a469c83a 	sub	r20,r20,r17
  8066c8:	a03fe81e 	bne	r20,zero,80666c <__sfvwrite_r+0x2d8>
  8066cc:	e009883a 	mov	r4,fp
  8066d0:	900b883a 	mov	r5,r18
  8066d4:	0805d240 	call	805d24 <_fflush_r>
  8066d8:	103fc31e 	bne	r2,zero,8065e8 <__sfvwrite_r+0x254>
  8066dc:	d8000015 	stw	zero,0(sp)
  8066e0:	003fe206 	br	80666c <__sfvwrite_r+0x2d8>
  8066e4:	91000017 	ldw	r4,0(r18)
  8066e8:	90800417 	ldw	r2,16(r18)
  8066ec:	1100022e 	bgeu	r2,r4,8066f8 <__sfvwrite_r+0x364>
  8066f0:	8023883a 	mov	r17,r16
  8066f4:	85003136 	bltu	r16,r20,8067bc <__sfvwrite_r+0x428>
  8066f8:	91c00517 	ldw	r7,20(r18)
  8066fc:	a1c01836 	bltu	r20,r7,806760 <__sfvwrite_r+0x3cc>
  806700:	90c00917 	ldw	r3,36(r18)
  806704:	91400717 	ldw	r5,28(r18)
  806708:	e009883a 	mov	r4,fp
  80670c:	b80d883a 	mov	r6,r23
  806710:	183ee83a 	callr	r3
  806714:	1021883a 	mov	r16,r2
  806718:	00bfb30e 	bge	zero,r2,8065e8 <__sfvwrite_r+0x254>
  80671c:	1023883a 	mov	r17,r2
  806720:	1027883a 	mov	r19,r2
  806724:	003f9b06 	br	806594 <__sfvwrite_r+0x200>
  806728:	b80b883a 	mov	r5,r23
  80672c:	800d883a 	mov	r6,r16
  806730:	0806b000 	call	806b00 <memmove>
  806734:	90c00217 	ldw	r3,8(r18)
  806738:	90800017 	ldw	r2,0(r18)
  80673c:	8023883a 	mov	r17,r16
  806740:	1c07c83a 	sub	r3,r3,r16
  806744:	1405883a 	add	r2,r2,r16
  806748:	90c00215 	stw	r3,8(r18)
  80674c:	90800015 	stw	r2,0(r18)
  806750:	003fc406 	br	806664 <__sfvwrite_r+0x2d0>
  806754:	a00d883a 	mov	r6,r20
  806758:	a021883a 	mov	r16,r20
  80675c:	003f8106 	br	806564 <__sfvwrite_r+0x1d0>
  806760:	b80b883a 	mov	r5,r23
  806764:	a00d883a 	mov	r6,r20
  806768:	0806b000 	call	806b00 <memmove>
  80676c:	90c00217 	ldw	r3,8(r18)
  806770:	90800017 	ldw	r2,0(r18)
  806774:	a021883a 	mov	r16,r20
  806778:	1d07c83a 	sub	r3,r3,r20
  80677c:	1505883a 	add	r2,r2,r20
  806780:	a023883a 	mov	r17,r20
  806784:	a027883a 	mov	r19,r20
  806788:	90c00215 	stw	r3,8(r18)
  80678c:	90800015 	stw	r2,0(r18)
  806790:	003f8006 	br	806594 <__sfvwrite_r+0x200>
  806794:	b809883a 	mov	r4,r23
  806798:	01400284 	movi	r5,10
  80679c:	980d883a 	mov	r6,r19
  8067a0:	0801b900 	call	801b90 <memchr>
  8067a4:	10001726 	beq	r2,zero,806804 <__sfvwrite_r+0x470>
  8067a8:	15c5c83a 	sub	r2,r2,r23
  8067ac:	15000044 	addi	r20,r2,1
  8067b0:	00800044 	movi	r2,1
  8067b4:	d8800015 	stw	r2,0(sp)
  8067b8:	003f9806 	br	80661c <__sfvwrite_r+0x288>
  8067bc:	b80b883a 	mov	r5,r23
  8067c0:	800d883a 	mov	r6,r16
  8067c4:	0806b000 	call	806b00 <memmove>
  8067c8:	90c00017 	ldw	r3,0(r18)
  8067cc:	e009883a 	mov	r4,fp
  8067d0:	900b883a 	mov	r5,r18
  8067d4:	1c07883a 	add	r3,r3,r16
  8067d8:	90c00015 	stw	r3,0(r18)
  8067dc:	8027883a 	mov	r19,r16
  8067e0:	0805d240 	call	805d24 <_fflush_r>
  8067e4:	103f6b26 	beq	r2,zero,806594 <__sfvwrite_r+0x200>
  8067e8:	003f7f06 	br	8065e8 <__sfvwrite_r+0x254>
  8067ec:	400b883a 	mov	r5,r8
  8067f0:	e009883a 	mov	r4,fp
  8067f4:	0807c4c0 	call	807c4c <_realloc_r>
  8067f8:	103f7626 	beq	r2,zero,8065d4 <__sfvwrite_r+0x240>
  8067fc:	1023883a 	mov	r17,r2
  806800:	003f5006 	br	806544 <__sfvwrite_r+0x1b0>
  806804:	00c00044 	movi	r3,1
  806808:	9d000044 	addi	r20,r19,1
  80680c:	d8c00015 	stw	r3,0(sp)
  806810:	003f8206 	br	80661c <__sfvwrite_r+0x288>
  806814:	9080030b 	ldhu	r2,12(r18)
  806818:	00c00244 	movi	r3,9
  80681c:	013fffc4 	movi	r4,-1
  806820:	10801014 	ori	r2,r2,64
  806824:	9080030d 	sth	r2,12(r18)
  806828:	e0c00015 	stw	r3,0(fp)
  80682c:	003f0606 	br	806448 <__sfvwrite_r+0xb4>

00806830 <__locale_charset>:
  806830:	d0a00517 	ldw	r2,-32748(gp)
  806834:	f800283a 	ret

00806838 <_localeconv_r>:
  806838:	00802074 	movhi	r2,129
  80683c:	10b4fc04 	addi	r2,r2,-11280
  806840:	f800283a 	ret

00806844 <localeconv>:
  806844:	00802074 	movhi	r2,129
  806848:	10be6704 	addi	r2,r2,-1636
  80684c:	11000017 	ldw	r4,0(r2)
  806850:	08068381 	jmpi	806838 <_localeconv_r>

00806854 <_setlocale_r>:
  806854:	defffc04 	addi	sp,sp,-16
  806858:	00c02074 	movhi	r3,129
  80685c:	18f4d304 	addi	r3,r3,-11444
  806860:	dc800215 	stw	r18,8(sp)
  806864:	dc400115 	stw	r17,4(sp)
  806868:	dc000015 	stw	r16,0(sp)
  80686c:	2023883a 	mov	r17,r4
  806870:	2825883a 	mov	r18,r5
  806874:	dfc00315 	stw	ra,12(sp)
  806878:	3021883a 	mov	r16,r6
  80687c:	3009883a 	mov	r4,r6
  806880:	180b883a 	mov	r5,r3
  806884:	30000926 	beq	r6,zero,8068ac <_setlocale_r+0x58>
  806888:	08082b00 	call	8082b0 <strcmp>
  80688c:	8009883a 	mov	r4,r16
  806890:	01402074 	movhi	r5,129
  806894:	2974e304 	addi	r5,r5,-11380
  806898:	10000b1e 	bne	r2,zero,8068c8 <_setlocale_r+0x74>
  80689c:	8c000d15 	stw	r16,52(r17)
  8068a0:	8c800c15 	stw	r18,48(r17)
  8068a4:	00c02074 	movhi	r3,129
  8068a8:	18f4d304 	addi	r3,r3,-11444
  8068ac:	1805883a 	mov	r2,r3
  8068b0:	dfc00317 	ldw	ra,12(sp)
  8068b4:	dc800217 	ldw	r18,8(sp)
  8068b8:	dc400117 	ldw	r17,4(sp)
  8068bc:	dc000017 	ldw	r16,0(sp)
  8068c0:	dec00404 	addi	sp,sp,16
  8068c4:	f800283a 	ret
  8068c8:	08082b00 	call	8082b0 <strcmp>
  8068cc:	0007883a 	mov	r3,zero
  8068d0:	103ff226 	beq	r2,zero,80689c <_setlocale_r+0x48>
  8068d4:	003ff506 	br	8068ac <_setlocale_r+0x58>

008068d8 <setlocale>:
  8068d8:	01802074 	movhi	r6,129
  8068dc:	31be6704 	addi	r6,r6,-1636
  8068e0:	2007883a 	mov	r3,r4
  8068e4:	31000017 	ldw	r4,0(r6)
  8068e8:	280d883a 	mov	r6,r5
  8068ec:	180b883a 	mov	r5,r3
  8068f0:	08068541 	jmpi	806854 <_setlocale_r>

008068f4 <_lseek_r>:
  8068f4:	defffd04 	addi	sp,sp,-12
  8068f8:	dc000015 	stw	r16,0(sp)
  8068fc:	04002074 	movhi	r16,129
  806900:	84074f04 	addi	r16,r16,7484
  806904:	dc400115 	stw	r17,4(sp)
  806908:	80000015 	stw	zero,0(r16)
  80690c:	2023883a 	mov	r17,r4
  806910:	2809883a 	mov	r4,r5
  806914:	300b883a 	mov	r5,r6
  806918:	380d883a 	mov	r6,r7
  80691c:	dfc00215 	stw	ra,8(sp)
  806920:	080acb00 	call	80acb0 <lseek>
  806924:	1007883a 	mov	r3,r2
  806928:	00bfffc4 	movi	r2,-1
  80692c:	18800626 	beq	r3,r2,806948 <_lseek_r+0x54>
  806930:	1805883a 	mov	r2,r3
  806934:	dfc00217 	ldw	ra,8(sp)
  806938:	dc400117 	ldw	r17,4(sp)
  80693c:	dc000017 	ldw	r16,0(sp)
  806940:	dec00304 	addi	sp,sp,12
  806944:	f800283a 	ret
  806948:	80800017 	ldw	r2,0(r16)
  80694c:	103ff826 	beq	r2,zero,806930 <_lseek_r+0x3c>
  806950:	88800015 	stw	r2,0(r17)
  806954:	1805883a 	mov	r2,r3
  806958:	dfc00217 	ldw	ra,8(sp)
  80695c:	dc400117 	ldw	r17,4(sp)
  806960:	dc000017 	ldw	r16,0(sp)
  806964:	dec00304 	addi	sp,sp,12
  806968:	f800283a 	ret

0080696c <__smakebuf_r>:
  80696c:	2880030b 	ldhu	r2,12(r5)
  806970:	deffed04 	addi	sp,sp,-76
  806974:	dc401015 	stw	r17,64(sp)
  806978:	1080008c 	andi	r2,r2,2
  80697c:	dc000f15 	stw	r16,60(sp)
  806980:	dfc01215 	stw	ra,72(sp)
  806984:	dc801115 	stw	r18,68(sp)
  806988:	2821883a 	mov	r16,r5
  80698c:	2023883a 	mov	r17,r4
  806990:	10000b26 	beq	r2,zero,8069c0 <__smakebuf_r+0x54>
  806994:	28c010c4 	addi	r3,r5,67
  806998:	00800044 	movi	r2,1
  80699c:	28800515 	stw	r2,20(r5)
  8069a0:	28c00415 	stw	r3,16(r5)
  8069a4:	28c00015 	stw	r3,0(r5)
  8069a8:	dfc01217 	ldw	ra,72(sp)
  8069ac:	dc801117 	ldw	r18,68(sp)
  8069b0:	dc401017 	ldw	r17,64(sp)
  8069b4:	dc000f17 	ldw	r16,60(sp)
  8069b8:	dec01304 	addi	sp,sp,76
  8069bc:	f800283a 	ret
  8069c0:	2940038f 	ldh	r5,14(r5)
  8069c4:	28002116 	blt	r5,zero,806a4c <__smakebuf_r+0xe0>
  8069c8:	d80d883a 	mov	r6,sp
  8069cc:	08084200 	call	808420 <_fstat_r>
  8069d0:	10001e16 	blt	r2,zero,806a4c <__smakebuf_r+0xe0>
  8069d4:	d8800117 	ldw	r2,4(sp)
  8069d8:	00e00014 	movui	r3,32768
  8069dc:	113c000c 	andi	r4,r2,61440
  8069e0:	20c03126 	beq	r4,r3,806aa8 <__smakebuf_r+0x13c>
  8069e4:	8080030b 	ldhu	r2,12(r16)
  8069e8:	00c80004 	movi	r3,8192
  8069ec:	10820014 	ori	r2,r2,2048
  8069f0:	8080030d 	sth	r2,12(r16)
  8069f4:	20c01e26 	beq	r4,r3,806a70 <__smakebuf_r+0x104>
  8069f8:	04810004 	movi	r18,1024
  8069fc:	8809883a 	mov	r4,r17
  806a00:	900b883a 	mov	r5,r18
  806a04:	08014500 	call	801450 <_malloc_r>
  806a08:	1009883a 	mov	r4,r2
  806a0c:	10003126 	beq	r2,zero,806ad4 <__smakebuf_r+0x168>
  806a10:	80c0030b 	ldhu	r3,12(r16)
  806a14:	00802034 	movhi	r2,128
  806a18:	10844d04 	addi	r2,r2,4404
  806a1c:	88800f15 	stw	r2,60(r17)
  806a20:	18c02014 	ori	r3,r3,128
  806a24:	84800515 	stw	r18,20(r16)
  806a28:	80c0030d 	sth	r3,12(r16)
  806a2c:	81000415 	stw	r4,16(r16)
  806a30:	81000015 	stw	r4,0(r16)
  806a34:	dfc01217 	ldw	ra,72(sp)
  806a38:	dc801117 	ldw	r18,68(sp)
  806a3c:	dc401017 	ldw	r17,64(sp)
  806a40:	dc000f17 	ldw	r16,60(sp)
  806a44:	dec01304 	addi	sp,sp,76
  806a48:	f800283a 	ret
  806a4c:	80c0030b 	ldhu	r3,12(r16)
  806a50:	1880200c 	andi	r2,r3,128
  806a54:	10000426 	beq	r2,zero,806a68 <__smakebuf_r+0xfc>
  806a58:	04801004 	movi	r18,64
  806a5c:	18820014 	ori	r2,r3,2048
  806a60:	8080030d 	sth	r2,12(r16)
  806a64:	003fe506 	br	8069fc <__smakebuf_r+0x90>
  806a68:	04810004 	movi	r18,1024
  806a6c:	003ffb06 	br	806a5c <__smakebuf_r+0xf0>
  806a70:	8140038f 	ldh	r5,14(r16)
  806a74:	8809883a 	mov	r4,r17
  806a78:	08084940 	call	808494 <_isatty_r>
  806a7c:	103fde26 	beq	r2,zero,8069f8 <__smakebuf_r+0x8c>
  806a80:	8080030b 	ldhu	r2,12(r16)
  806a84:	80c010c4 	addi	r3,r16,67
  806a88:	04810004 	movi	r18,1024
  806a8c:	10800054 	ori	r2,r2,1
  806a90:	8080030d 	sth	r2,12(r16)
  806a94:	00800044 	movi	r2,1
  806a98:	80c00415 	stw	r3,16(r16)
  806a9c:	80800515 	stw	r2,20(r16)
  806aa0:	80c00015 	stw	r3,0(r16)
  806aa4:	003fd506 	br	8069fc <__smakebuf_r+0x90>
  806aa8:	80c00a17 	ldw	r3,40(r16)
  806aac:	00802034 	movhi	r2,128
  806ab0:	10884c04 	addi	r2,r2,8496
  806ab4:	18bfcb1e 	bne	r3,r2,8069e4 <__smakebuf_r+0x78>
  806ab8:	8080030b 	ldhu	r2,12(r16)
  806abc:	00c10004 	movi	r3,1024
  806ac0:	1825883a 	mov	r18,r3
  806ac4:	10c4b03a 	or	r2,r2,r3
  806ac8:	8080030d 	sth	r2,12(r16)
  806acc:	80c01315 	stw	r3,76(r16)
  806ad0:	003fca06 	br	8069fc <__smakebuf_r+0x90>
  806ad4:	8100030b 	ldhu	r4,12(r16)
  806ad8:	2080800c 	andi	r2,r4,512
  806adc:	103fb21e 	bne	r2,zero,8069a8 <__smakebuf_r+0x3c>
  806ae0:	80c010c4 	addi	r3,r16,67
  806ae4:	21000094 	ori	r4,r4,2
  806ae8:	00800044 	movi	r2,1
  806aec:	80800515 	stw	r2,20(r16)
  806af0:	8100030d 	sth	r4,12(r16)
  806af4:	80c00415 	stw	r3,16(r16)
  806af8:	80c00015 	stw	r3,0(r16)
  806afc:	003faa06 	br	8069a8 <__smakebuf_r+0x3c>

00806b00 <memmove>:
  806b00:	2807883a 	mov	r3,r5
  806b04:	2011883a 	mov	r8,r4
  806b08:	29000c2e 	bgeu	r5,r4,806b3c <memmove+0x3c>
  806b0c:	298f883a 	add	r7,r5,r6
  806b10:	21c00a2e 	bgeu	r4,r7,806b3c <memmove+0x3c>
  806b14:	30000726 	beq	r6,zero,806b34 <memmove+0x34>
  806b18:	2187883a 	add	r3,r4,r6
  806b1c:	198dc83a 	sub	r6,r3,r6
  806b20:	39ffffc4 	addi	r7,r7,-1
  806b24:	38800003 	ldbu	r2,0(r7)
  806b28:	18ffffc4 	addi	r3,r3,-1
  806b2c:	18800005 	stb	r2,0(r3)
  806b30:	19bffb1e 	bne	r3,r6,806b20 <memmove+0x20>
  806b34:	2005883a 	mov	r2,r4
  806b38:	f800283a 	ret
  806b3c:	01c003c4 	movi	r7,15
  806b40:	39800a36 	bltu	r7,r6,806b6c <memmove+0x6c>
  806b44:	303ffb26 	beq	r6,zero,806b34 <memmove+0x34>
  806b48:	400f883a 	mov	r7,r8
  806b4c:	320d883a 	add	r6,r6,r8
  806b50:	28800003 	ldbu	r2,0(r5)
  806b54:	29400044 	addi	r5,r5,1
  806b58:	38800005 	stb	r2,0(r7)
  806b5c:	39c00044 	addi	r7,r7,1
  806b60:	39bffb1e 	bne	r7,r6,806b50 <memmove+0x50>
  806b64:	2005883a 	mov	r2,r4
  806b68:	f800283a 	ret
  806b6c:	1904b03a 	or	r2,r3,r4
  806b70:	108000cc 	andi	r2,r2,3
  806b74:	103ff31e 	bne	r2,zero,806b44 <memmove+0x44>
  806b78:	3811883a 	mov	r8,r7
  806b7c:	180b883a 	mov	r5,r3
  806b80:	200f883a 	mov	r7,r4
  806b84:	28c00017 	ldw	r3,0(r5)
  806b88:	31bffc04 	addi	r6,r6,-16
  806b8c:	38c00015 	stw	r3,0(r7)
  806b90:	28800117 	ldw	r2,4(r5)
  806b94:	38800115 	stw	r2,4(r7)
  806b98:	28c00217 	ldw	r3,8(r5)
  806b9c:	38c00215 	stw	r3,8(r7)
  806ba0:	28800317 	ldw	r2,12(r5)
  806ba4:	29400404 	addi	r5,r5,16
  806ba8:	38800315 	stw	r2,12(r7)
  806bac:	39c00404 	addi	r7,r7,16
  806bb0:	41bff436 	bltu	r8,r6,806b84 <memmove+0x84>
  806bb4:	008000c4 	movi	r2,3
  806bb8:	1180072e 	bgeu	r2,r6,806bd8 <memmove+0xd8>
  806bbc:	1007883a 	mov	r3,r2
  806bc0:	28800017 	ldw	r2,0(r5)
  806bc4:	31bfff04 	addi	r6,r6,-4
  806bc8:	29400104 	addi	r5,r5,4
  806bcc:	38800015 	stw	r2,0(r7)
  806bd0:	39c00104 	addi	r7,r7,4
  806bd4:	19bffa36 	bltu	r3,r6,806bc0 <memmove+0xc0>
  806bd8:	3811883a 	mov	r8,r7
  806bdc:	003fd906 	br	806b44 <memmove+0x44>

00806be0 <_Bfree>:
  806be0:	28000826 	beq	r5,zero,806c04 <_Bfree+0x24>
  806be4:	28800117 	ldw	r2,4(r5)
  806be8:	21001317 	ldw	r4,76(r4)
  806bec:	1085883a 	add	r2,r2,r2
  806bf0:	1085883a 	add	r2,r2,r2
  806bf4:	1105883a 	add	r2,r2,r4
  806bf8:	10c00017 	ldw	r3,0(r2)
  806bfc:	28c00015 	stw	r3,0(r5)
  806c00:	11400015 	stw	r5,0(r2)
  806c04:	f800283a 	ret

00806c08 <__hi0bits>:
  806c08:	20bfffec 	andhi	r2,r4,65535
  806c0c:	10001426 	beq	r2,zero,806c60 <__hi0bits+0x58>
  806c10:	0007883a 	mov	r3,zero
  806c14:	20bfc02c 	andhi	r2,r4,65280
  806c18:	1000021e 	bne	r2,zero,806c24 <__hi0bits+0x1c>
  806c1c:	2008923a 	slli	r4,r4,8
  806c20:	18c00204 	addi	r3,r3,8
  806c24:	20bc002c 	andhi	r2,r4,61440
  806c28:	1000021e 	bne	r2,zero,806c34 <__hi0bits+0x2c>
  806c2c:	2008913a 	slli	r4,r4,4
  806c30:	18c00104 	addi	r3,r3,4
  806c34:	20b0002c 	andhi	r2,r4,49152
  806c38:	1000031e 	bne	r2,zero,806c48 <__hi0bits+0x40>
  806c3c:	2105883a 	add	r2,r4,r4
  806c40:	18c00084 	addi	r3,r3,2
  806c44:	1089883a 	add	r4,r2,r2
  806c48:	20000316 	blt	r4,zero,806c58 <__hi0bits+0x50>
  806c4c:	2090002c 	andhi	r2,r4,16384
  806c50:	10000626 	beq	r2,zero,806c6c <__hi0bits+0x64>
  806c54:	18c00044 	addi	r3,r3,1
  806c58:	1805883a 	mov	r2,r3
  806c5c:	f800283a 	ret
  806c60:	2008943a 	slli	r4,r4,16
  806c64:	00c00404 	movi	r3,16
  806c68:	003fea06 	br	806c14 <__hi0bits+0xc>
  806c6c:	00c00804 	movi	r3,32
  806c70:	1805883a 	mov	r2,r3
  806c74:	f800283a 	ret

00806c78 <__lo0bits>:
  806c78:	20c00017 	ldw	r3,0(r4)
  806c7c:	188001cc 	andi	r2,r3,7
  806c80:	10000a26 	beq	r2,zero,806cac <__lo0bits+0x34>
  806c84:	1880004c 	andi	r2,r3,1
  806c88:	1005003a 	cmpeq	r2,r2,zero
  806c8c:	10002126 	beq	r2,zero,806d14 <__lo0bits+0x9c>
  806c90:	1880008c 	andi	r2,r3,2
  806c94:	1000251e 	bne	r2,zero,806d2c <__lo0bits+0xb4>
  806c98:	1804d0ba 	srli	r2,r3,2
  806c9c:	01400084 	movi	r5,2
  806ca0:	20800015 	stw	r2,0(r4)
  806ca4:	2805883a 	mov	r2,r5
  806ca8:	f800283a 	ret
  806cac:	18bfffcc 	andi	r2,r3,65535
  806cb0:	10001526 	beq	r2,zero,806d08 <__lo0bits+0x90>
  806cb4:	000b883a 	mov	r5,zero
  806cb8:	18803fcc 	andi	r2,r3,255
  806cbc:	1000021e 	bne	r2,zero,806cc8 <__lo0bits+0x50>
  806cc0:	1806d23a 	srli	r3,r3,8
  806cc4:	29400204 	addi	r5,r5,8
  806cc8:	188003cc 	andi	r2,r3,15
  806ccc:	1000021e 	bne	r2,zero,806cd8 <__lo0bits+0x60>
  806cd0:	1806d13a 	srli	r3,r3,4
  806cd4:	29400104 	addi	r5,r5,4
  806cd8:	188000cc 	andi	r2,r3,3
  806cdc:	1000021e 	bne	r2,zero,806ce8 <__lo0bits+0x70>
  806ce0:	1806d0ba 	srli	r3,r3,2
  806ce4:	29400084 	addi	r5,r5,2
  806ce8:	1880004c 	andi	r2,r3,1
  806cec:	1000031e 	bne	r2,zero,806cfc <__lo0bits+0x84>
  806cf0:	1806d07a 	srli	r3,r3,1
  806cf4:	18000a26 	beq	r3,zero,806d20 <__lo0bits+0xa8>
  806cf8:	29400044 	addi	r5,r5,1
  806cfc:	2805883a 	mov	r2,r5
  806d00:	20c00015 	stw	r3,0(r4)
  806d04:	f800283a 	ret
  806d08:	1806d43a 	srli	r3,r3,16
  806d0c:	01400404 	movi	r5,16
  806d10:	003fe906 	br	806cb8 <__lo0bits+0x40>
  806d14:	000b883a 	mov	r5,zero
  806d18:	2805883a 	mov	r2,r5
  806d1c:	f800283a 	ret
  806d20:	01400804 	movi	r5,32
  806d24:	2805883a 	mov	r2,r5
  806d28:	f800283a 	ret
  806d2c:	1804d07a 	srli	r2,r3,1
  806d30:	01400044 	movi	r5,1
  806d34:	20800015 	stw	r2,0(r4)
  806d38:	003fda06 	br	806ca4 <__lo0bits+0x2c>

00806d3c <__mcmp>:
  806d3c:	20800417 	ldw	r2,16(r4)
  806d40:	28c00417 	ldw	r3,16(r5)
  806d44:	10cfc83a 	sub	r7,r2,r3
  806d48:	38000c1e 	bne	r7,zero,806d7c <__mcmp+0x40>
  806d4c:	18c5883a 	add	r2,r3,r3
  806d50:	1085883a 	add	r2,r2,r2
  806d54:	10c00504 	addi	r3,r2,20
  806d58:	21000504 	addi	r4,r4,20
  806d5c:	28cb883a 	add	r5,r5,r3
  806d60:	2085883a 	add	r2,r4,r2
  806d64:	10bfff04 	addi	r2,r2,-4
  806d68:	297fff04 	addi	r5,r5,-4
  806d6c:	11800017 	ldw	r6,0(r2)
  806d70:	28c00017 	ldw	r3,0(r5)
  806d74:	30c0031e 	bne	r6,r3,806d84 <__mcmp+0x48>
  806d78:	20bffa36 	bltu	r4,r2,806d64 <__mcmp+0x28>
  806d7c:	3805883a 	mov	r2,r7
  806d80:	f800283a 	ret
  806d84:	30c00336 	bltu	r6,r3,806d94 <__mcmp+0x58>
  806d88:	01c00044 	movi	r7,1
  806d8c:	3805883a 	mov	r2,r7
  806d90:	f800283a 	ret
  806d94:	01ffffc4 	movi	r7,-1
  806d98:	003ff806 	br	806d7c <__mcmp+0x40>

00806d9c <__ulp>:
  806d9c:	295ffc2c 	andhi	r5,r5,32752
  806da0:	013f3034 	movhi	r4,64704
  806da4:	290b883a 	add	r5,r5,r4
  806da8:	0145c83a 	sub	r2,zero,r5
  806dac:	1007d53a 	srai	r3,r2,20
  806db0:	000d883a 	mov	r6,zero
  806db4:	0140040e 	bge	zero,r5,806dc8 <__ulp+0x2c>
  806db8:	280f883a 	mov	r7,r5
  806dbc:	3807883a 	mov	r3,r7
  806dc0:	3005883a 	mov	r2,r6
  806dc4:	f800283a 	ret
  806dc8:	008004c4 	movi	r2,19
  806dcc:	193ffb04 	addi	r4,r3,-20
  806dd0:	10c00c0e 	bge	r2,r3,806e04 <__ulp+0x68>
  806dd4:	008007c4 	movi	r2,31
  806dd8:	1107c83a 	sub	r3,r2,r4
  806ddc:	00800784 	movi	r2,30
  806de0:	01400044 	movi	r5,1
  806de4:	11000216 	blt	r2,r4,806df0 <__ulp+0x54>
  806de8:	00800044 	movi	r2,1
  806dec:	10ca983a 	sll	r5,r2,r3
  806df0:	000f883a 	mov	r7,zero
  806df4:	280d883a 	mov	r6,r5
  806df8:	3807883a 	mov	r3,r7
  806dfc:	3005883a 	mov	r2,r6
  806e00:	f800283a 	ret
  806e04:	00800234 	movhi	r2,8
  806e08:	10cfd83a 	sra	r7,r2,r3
  806e0c:	000d883a 	mov	r6,zero
  806e10:	3005883a 	mov	r2,r6
  806e14:	3807883a 	mov	r3,r7
  806e18:	f800283a 	ret

00806e1c <__b2d>:
  806e1c:	20800417 	ldw	r2,16(r4)
  806e20:	defff904 	addi	sp,sp,-28
  806e24:	dd000415 	stw	r20,16(sp)
  806e28:	1085883a 	add	r2,r2,r2
  806e2c:	25000504 	addi	r20,r4,20
  806e30:	1085883a 	add	r2,r2,r2
  806e34:	dc000015 	stw	r16,0(sp)
  806e38:	a0a1883a 	add	r16,r20,r2
  806e3c:	dd400515 	stw	r21,20(sp)
  806e40:	857fff17 	ldw	r21,-4(r16)
  806e44:	dc400115 	stw	r17,4(sp)
  806e48:	dfc00615 	stw	ra,24(sp)
  806e4c:	a809883a 	mov	r4,r21
  806e50:	2823883a 	mov	r17,r5
  806e54:	dcc00315 	stw	r19,12(sp)
  806e58:	dc800215 	stw	r18,8(sp)
  806e5c:	0806c080 	call	806c08 <__hi0bits>
  806e60:	100b883a 	mov	r5,r2
  806e64:	00800804 	movi	r2,32
  806e68:	1145c83a 	sub	r2,r2,r5
  806e6c:	88800015 	stw	r2,0(r17)
  806e70:	00800284 	movi	r2,10
  806e74:	80ffff04 	addi	r3,r16,-4
  806e78:	11401416 	blt	r2,r5,806ecc <__b2d+0xb0>
  806e7c:	008002c4 	movi	r2,11
  806e80:	1149c83a 	sub	r4,r2,r5
  806e84:	a0c02736 	bltu	r20,r3,806f24 <__b2d+0x108>
  806e88:	000d883a 	mov	r6,zero
  806e8c:	28800544 	addi	r2,r5,21
  806e90:	a906d83a 	srl	r3,r21,r4
  806e94:	a884983a 	sll	r2,r21,r2
  806e98:	1ccffc34 	orhi	r19,r3,16368
  806e9c:	11a4b03a 	or	r18,r2,r6
  806ea0:	9005883a 	mov	r2,r18
  806ea4:	9807883a 	mov	r3,r19
  806ea8:	dfc00617 	ldw	ra,24(sp)
  806eac:	dd400517 	ldw	r21,20(sp)
  806eb0:	dd000417 	ldw	r20,16(sp)
  806eb4:	dcc00317 	ldw	r19,12(sp)
  806eb8:	dc800217 	ldw	r18,8(sp)
  806ebc:	dc400117 	ldw	r17,4(sp)
  806ec0:	dc000017 	ldw	r16,0(sp)
  806ec4:	dec00704 	addi	sp,sp,28
  806ec8:	f800283a 	ret
  806ecc:	a0c00e36 	bltu	r20,r3,806f08 <__b2d+0xec>
  806ed0:	293ffd44 	addi	r4,r5,-11
  806ed4:	000d883a 	mov	r6,zero
  806ed8:	20000f26 	beq	r4,zero,806f18 <__b2d+0xfc>
  806edc:	00800804 	movi	r2,32
  806ee0:	110bc83a 	sub	r5,r2,r4
  806ee4:	a0c01236 	bltu	r20,r3,806f30 <__b2d+0x114>
  806ee8:	000f883a 	mov	r7,zero
  806eec:	a904983a 	sll	r2,r21,r4
  806ef0:	3146d83a 	srl	r3,r6,r5
  806ef4:	3108983a 	sll	r4,r6,r4
  806ef8:	108ffc34 	orhi	r2,r2,16368
  806efc:	18a6b03a 	or	r19,r3,r2
  806f00:	3924b03a 	or	r18,r7,r4
  806f04:	003fe606 	br	806ea0 <__b2d+0x84>
  806f08:	293ffd44 	addi	r4,r5,-11
  806f0c:	81bffe17 	ldw	r6,-8(r16)
  806f10:	80fffe04 	addi	r3,r16,-8
  806f14:	203ff11e 	bne	r4,zero,806edc <__b2d+0xc0>
  806f18:	accffc34 	orhi	r19,r21,16368
  806f1c:	3025883a 	mov	r18,r6
  806f20:	003fdf06 	br	806ea0 <__b2d+0x84>
  806f24:	18bfff17 	ldw	r2,-4(r3)
  806f28:	110cd83a 	srl	r6,r2,r4
  806f2c:	003fd706 	br	806e8c <__b2d+0x70>
  806f30:	18bfff17 	ldw	r2,-4(r3)
  806f34:	114ed83a 	srl	r7,r2,r5
  806f38:	003fec06 	br	806eec <__b2d+0xd0>

00806f3c <__ratio>:
  806f3c:	defff904 	addi	sp,sp,-28
  806f40:	dc400215 	stw	r17,8(sp)
  806f44:	2823883a 	mov	r17,r5
  806f48:	d80b883a 	mov	r5,sp
  806f4c:	dfc00615 	stw	ra,24(sp)
  806f50:	dd000515 	stw	r20,20(sp)
  806f54:	dcc00415 	stw	r19,16(sp)
  806f58:	dc800315 	stw	r18,12(sp)
  806f5c:	2025883a 	mov	r18,r4
  806f60:	0806e1c0 	call	806e1c <__b2d>
  806f64:	8809883a 	mov	r4,r17
  806f68:	d9400104 	addi	r5,sp,4
  806f6c:	1027883a 	mov	r19,r2
  806f70:	1829883a 	mov	r20,r3
  806f74:	0806e1c0 	call	806e1c <__b2d>
  806f78:	89000417 	ldw	r4,16(r17)
  806f7c:	91c00417 	ldw	r7,16(r18)
  806f80:	d9800117 	ldw	r6,4(sp)
  806f84:	180b883a 	mov	r5,r3
  806f88:	390fc83a 	sub	r7,r7,r4
  806f8c:	1009883a 	mov	r4,r2
  806f90:	d8800017 	ldw	r2,0(sp)
  806f94:	380e917a 	slli	r7,r7,5
  806f98:	2011883a 	mov	r8,r4
  806f9c:	1185c83a 	sub	r2,r2,r6
  806fa0:	11c5883a 	add	r2,r2,r7
  806fa4:	1006953a 	slli	r3,r2,20
  806fa8:	2813883a 	mov	r9,r5
  806fac:	00800d0e 	bge	zero,r2,806fe4 <__ratio+0xa8>
  806fb0:	1d29883a 	add	r20,r3,r20
  806fb4:	a00b883a 	mov	r5,r20
  806fb8:	480f883a 	mov	r7,r9
  806fbc:	9809883a 	mov	r4,r19
  806fc0:	400d883a 	mov	r6,r8
  806fc4:	08099580 	call	809958 <__divdf3>
  806fc8:	dfc00617 	ldw	ra,24(sp)
  806fcc:	dd000517 	ldw	r20,20(sp)
  806fd0:	dcc00417 	ldw	r19,16(sp)
  806fd4:	dc800317 	ldw	r18,12(sp)
  806fd8:	dc400217 	ldw	r17,8(sp)
  806fdc:	dec00704 	addi	sp,sp,28
  806fe0:	f800283a 	ret
  806fe4:	28d3c83a 	sub	r9,r5,r3
  806fe8:	003ff206 	br	806fb4 <__ratio+0x78>

00806fec <_mprec_log10>:
  806fec:	defffe04 	addi	sp,sp,-8
  806ff0:	008005c4 	movi	r2,23
  806ff4:	dc000015 	stw	r16,0(sp)
  806ff8:	dfc00115 	stw	ra,4(sp)
  806ffc:	2021883a 	mov	r16,r4
  807000:	11000c16 	blt	r2,r4,807034 <_mprec_log10+0x48>
  807004:	200490fa 	slli	r2,r4,3
  807008:	00c02074 	movhi	r3,129
  80700c:	18f50804 	addi	r3,r3,-11232
  807010:	10c5883a 	add	r2,r2,r3
  807014:	12400117 	ldw	r9,4(r2)
  807018:	12000017 	ldw	r8,0(r2)
  80701c:	4807883a 	mov	r3,r9
  807020:	4005883a 	mov	r2,r8
  807024:	dfc00117 	ldw	ra,4(sp)
  807028:	dc000017 	ldw	r16,0(sp)
  80702c:	dec00204 	addi	sp,sp,8
  807030:	f800283a 	ret
  807034:	0011883a 	mov	r8,zero
  807038:	024ffc34 	movhi	r9,16368
  80703c:	0005883a 	mov	r2,zero
  807040:	00d00934 	movhi	r3,16420
  807044:	480b883a 	mov	r5,r9
  807048:	4009883a 	mov	r4,r8
  80704c:	180f883a 	mov	r7,r3
  807050:	100d883a 	mov	r6,r2
  807054:	08095940 	call	809594 <__muldf3>
  807058:	843fffc4 	addi	r16,r16,-1
  80705c:	1011883a 	mov	r8,r2
  807060:	1813883a 	mov	r9,r3
  807064:	803ff51e 	bne	r16,zero,80703c <_mprec_log10+0x50>
  807068:	4005883a 	mov	r2,r8
  80706c:	4807883a 	mov	r3,r9
  807070:	dfc00117 	ldw	ra,4(sp)
  807074:	dc000017 	ldw	r16,0(sp)
  807078:	dec00204 	addi	sp,sp,8
  80707c:	f800283a 	ret

00807080 <__copybits>:
  807080:	297fffc4 	addi	r5,r5,-1
  807084:	30800417 	ldw	r2,16(r6)
  807088:	280bd17a 	srai	r5,r5,5
  80708c:	31800504 	addi	r6,r6,20
  807090:	1085883a 	add	r2,r2,r2
  807094:	294b883a 	add	r5,r5,r5
  807098:	294b883a 	add	r5,r5,r5
  80709c:	1085883a 	add	r2,r2,r2
  8070a0:	290b883a 	add	r5,r5,r4
  8070a4:	3087883a 	add	r3,r6,r2
  8070a8:	29400104 	addi	r5,r5,4
  8070ac:	30c0052e 	bgeu	r6,r3,8070c4 <__copybits+0x44>
  8070b0:	30800017 	ldw	r2,0(r6)
  8070b4:	31800104 	addi	r6,r6,4
  8070b8:	20800015 	stw	r2,0(r4)
  8070bc:	21000104 	addi	r4,r4,4
  8070c0:	30fffb36 	bltu	r6,r3,8070b0 <__copybits+0x30>
  8070c4:	2140032e 	bgeu	r4,r5,8070d4 <__copybits+0x54>
  8070c8:	20000015 	stw	zero,0(r4)
  8070cc:	21000104 	addi	r4,r4,4
  8070d0:	217ffd36 	bltu	r4,r5,8070c8 <__copybits+0x48>
  8070d4:	f800283a 	ret

008070d8 <__any_on>:
  8070d8:	20800417 	ldw	r2,16(r4)
  8070dc:	2807d17a 	srai	r3,r5,5
  8070e0:	21000504 	addi	r4,r4,20
  8070e4:	10c00d0e 	bge	r2,r3,80711c <__any_on+0x44>
  8070e8:	1085883a 	add	r2,r2,r2
  8070ec:	1085883a 	add	r2,r2,r2
  8070f0:	208d883a 	add	r6,r4,r2
  8070f4:	2180182e 	bgeu	r4,r6,807158 <__any_on+0x80>
  8070f8:	30bfff17 	ldw	r2,-4(r6)
  8070fc:	30ffff04 	addi	r3,r6,-4
  807100:	1000041e 	bne	r2,zero,807114 <__any_on+0x3c>
  807104:	20c0142e 	bgeu	r4,r3,807158 <__any_on+0x80>
  807108:	18ffff04 	addi	r3,r3,-4
  80710c:	18800017 	ldw	r2,0(r3)
  807110:	103ffc26 	beq	r2,zero,807104 <__any_on+0x2c>
  807114:	00800044 	movi	r2,1
  807118:	f800283a 	ret
  80711c:	18800a0e 	bge	r3,r2,807148 <__any_on+0x70>
  807120:	294007cc 	andi	r5,r5,31
  807124:	28000826 	beq	r5,zero,807148 <__any_on+0x70>
  807128:	18c5883a 	add	r2,r3,r3
  80712c:	1085883a 	add	r2,r2,r2
  807130:	208d883a 	add	r6,r4,r2
  807134:	30c00017 	ldw	r3,0(r6)
  807138:	1944d83a 	srl	r2,r3,r5
  80713c:	1144983a 	sll	r2,r2,r5
  807140:	18bff41e 	bne	r3,r2,807114 <__any_on+0x3c>
  807144:	003feb06 	br	8070f4 <__any_on+0x1c>
  807148:	18c5883a 	add	r2,r3,r3
  80714c:	1085883a 	add	r2,r2,r2
  807150:	208d883a 	add	r6,r4,r2
  807154:	003fe706 	br	8070f4 <__any_on+0x1c>
  807158:	0005883a 	mov	r2,zero
  80715c:	f800283a 	ret

00807160 <_Balloc>:
  807160:	20c01317 	ldw	r3,76(r4)
  807164:	defffb04 	addi	sp,sp,-20
  807168:	dcc00315 	stw	r19,12(sp)
  80716c:	dc800215 	stw	r18,8(sp)
  807170:	dfc00415 	stw	ra,16(sp)
  807174:	2825883a 	mov	r18,r5
  807178:	dc400115 	stw	r17,4(sp)
  80717c:	dc000015 	stw	r16,0(sp)
  807180:	2027883a 	mov	r19,r4
  807184:	01800404 	movi	r6,16
  807188:	01400104 	movi	r5,4
  80718c:	18001726 	beq	r3,zero,8071ec <_Balloc+0x8c>
  807190:	01400044 	movi	r5,1
  807194:	9485883a 	add	r2,r18,r18
  807198:	2ca2983a 	sll	r17,r5,r18
  80719c:	1085883a 	add	r2,r2,r2
  8071a0:	10c7883a 	add	r3,r2,r3
  8071a4:	1c000017 	ldw	r16,0(r3)
  8071a8:	8c4d883a 	add	r6,r17,r17
  8071ac:	318d883a 	add	r6,r6,r6
  8071b0:	9809883a 	mov	r4,r19
  8071b4:	31800504 	addi	r6,r6,20
  8071b8:	80001226 	beq	r16,zero,807204 <_Balloc+0xa4>
  8071bc:	80800017 	ldw	r2,0(r16)
  8071c0:	18800015 	stw	r2,0(r3)
  8071c4:	80000415 	stw	zero,16(r16)
  8071c8:	80000315 	stw	zero,12(r16)
  8071cc:	8005883a 	mov	r2,r16
  8071d0:	dfc00417 	ldw	ra,16(sp)
  8071d4:	dcc00317 	ldw	r19,12(sp)
  8071d8:	dc800217 	ldw	r18,8(sp)
  8071dc:	dc400117 	ldw	r17,4(sp)
  8071e0:	dc000017 	ldw	r16,0(sp)
  8071e4:	dec00504 	addi	sp,sp,20
  8071e8:	f800283a 	ret
  8071ec:	080836c0 	call	80836c <_calloc_r>
  8071f0:	1007883a 	mov	r3,r2
  8071f4:	0021883a 	mov	r16,zero
  8071f8:	98801315 	stw	r2,76(r19)
  8071fc:	103fe41e 	bne	r2,zero,807190 <_Balloc+0x30>
  807200:	003ff206 	br	8071cc <_Balloc+0x6c>
  807204:	080836c0 	call	80836c <_calloc_r>
  807208:	103ff026 	beq	r2,zero,8071cc <_Balloc+0x6c>
  80720c:	1021883a 	mov	r16,r2
  807210:	14800115 	stw	r18,4(r2)
  807214:	14400215 	stw	r17,8(r2)
  807218:	003fea06 	br	8071c4 <_Balloc+0x64>

0080721c <__d2b>:
  80721c:	defff504 	addi	sp,sp,-44
  807220:	dcc00515 	stw	r19,20(sp)
  807224:	04c00044 	movi	r19,1
  807228:	dc000215 	stw	r16,8(sp)
  80722c:	2821883a 	mov	r16,r5
  807230:	980b883a 	mov	r5,r19
  807234:	ddc00915 	stw	r23,36(sp)
  807238:	dd800815 	stw	r22,32(sp)
  80723c:	dd400715 	stw	r21,28(sp)
  807240:	dd000615 	stw	r20,24(sp)
  807244:	dc800415 	stw	r18,16(sp)
  807248:	dc400315 	stw	r17,12(sp)
  80724c:	dfc00a15 	stw	ra,40(sp)
  807250:	3023883a 	mov	r17,r6
  807254:	382d883a 	mov	r22,r7
  807258:	ddc00b17 	ldw	r23,44(sp)
  80725c:	08071600 	call	807160 <_Balloc>
  807260:	1025883a 	mov	r18,r2
  807264:	00a00034 	movhi	r2,32768
  807268:	10bfffc4 	addi	r2,r2,-1
  80726c:	8888703a 	and	r4,r17,r2
  807270:	202ad53a 	srli	r21,r4,20
  807274:	00800434 	movhi	r2,16
  807278:	10bfffc4 	addi	r2,r2,-1
  80727c:	8886703a 	and	r3,r17,r2
  807280:	a829003a 	cmpeq	r20,r21,zero
  807284:	800b883a 	mov	r5,r16
  807288:	d8c00115 	stw	r3,4(sp)
  80728c:	94000504 	addi	r16,r18,20
  807290:	a000021e 	bne	r20,zero,80729c <__d2b+0x80>
  807294:	18c00434 	orhi	r3,r3,16
  807298:	d8c00115 	stw	r3,4(sp)
  80729c:	28002726 	beq	r5,zero,80733c <__d2b+0x120>
  8072a0:	d809883a 	mov	r4,sp
  8072a4:	d9400015 	stw	r5,0(sp)
  8072a8:	0806c780 	call	806c78 <__lo0bits>
  8072ac:	100d883a 	mov	r6,r2
  8072b0:	10003526 	beq	r2,zero,807388 <__d2b+0x16c>
  8072b4:	d8c00117 	ldw	r3,4(sp)
  8072b8:	00800804 	movi	r2,32
  8072bc:	1185c83a 	sub	r2,r2,r6
  8072c0:	d9000017 	ldw	r4,0(sp)
  8072c4:	1886983a 	sll	r3,r3,r2
  8072c8:	1906b03a 	or	r3,r3,r4
  8072cc:	90c00515 	stw	r3,20(r18)
  8072d0:	d8c00117 	ldw	r3,4(sp)
  8072d4:	1986d83a 	srl	r3,r3,r6
  8072d8:	d8c00115 	stw	r3,4(sp)
  8072dc:	180b003a 	cmpeq	r5,r3,zero
  8072e0:	00800084 	movi	r2,2
  8072e4:	114bc83a 	sub	r5,r2,r5
  8072e8:	80c00115 	stw	r3,4(r16)
  8072ec:	91400415 	stw	r5,16(r18)
  8072f0:	a0001a1e 	bne	r20,zero,80735c <__d2b+0x140>
  8072f4:	3545883a 	add	r2,r6,r21
  8072f8:	10bef344 	addi	r2,r2,-1075
  8072fc:	00c00d44 	movi	r3,53
  807300:	b0800015 	stw	r2,0(r22)
  807304:	1987c83a 	sub	r3,r3,r6
  807308:	b8c00015 	stw	r3,0(r23)
  80730c:	9005883a 	mov	r2,r18
  807310:	dfc00a17 	ldw	ra,40(sp)
  807314:	ddc00917 	ldw	r23,36(sp)
  807318:	dd800817 	ldw	r22,32(sp)
  80731c:	dd400717 	ldw	r21,28(sp)
  807320:	dd000617 	ldw	r20,24(sp)
  807324:	dcc00517 	ldw	r19,20(sp)
  807328:	dc800417 	ldw	r18,16(sp)
  80732c:	dc400317 	ldw	r17,12(sp)
  807330:	dc000217 	ldw	r16,8(sp)
  807334:	dec00b04 	addi	sp,sp,44
  807338:	f800283a 	ret
  80733c:	d9000104 	addi	r4,sp,4
  807340:	0806c780 	call	806c78 <__lo0bits>
  807344:	11800804 	addi	r6,r2,32
  807348:	d8800117 	ldw	r2,4(sp)
  80734c:	94c00415 	stw	r19,16(r18)
  807350:	980b883a 	mov	r5,r19
  807354:	90800515 	stw	r2,20(r18)
  807358:	a03fe626 	beq	r20,zero,8072f4 <__d2b+0xd8>
  80735c:	2945883a 	add	r2,r5,r5
  807360:	1085883a 	add	r2,r2,r2
  807364:	1405883a 	add	r2,r2,r16
  807368:	113fff17 	ldw	r4,-4(r2)
  80736c:	30fef384 	addi	r3,r6,-1074
  807370:	2820917a 	slli	r16,r5,5
  807374:	b0c00015 	stw	r3,0(r22)
  807378:	0806c080 	call	806c08 <__hi0bits>
  80737c:	80a1c83a 	sub	r16,r16,r2
  807380:	bc000015 	stw	r16,0(r23)
  807384:	003fe106 	br	80730c <__d2b+0xf0>
  807388:	d8800017 	ldw	r2,0(sp)
  80738c:	90800515 	stw	r2,20(r18)
  807390:	d8c00117 	ldw	r3,4(sp)
  807394:	003fd106 	br	8072dc <__d2b+0xc0>

00807398 <__mdiff>:
  807398:	defffb04 	addi	sp,sp,-20
  80739c:	dc000015 	stw	r16,0(sp)
  8073a0:	2821883a 	mov	r16,r5
  8073a4:	dc800215 	stw	r18,8(sp)
  8073a8:	300b883a 	mov	r5,r6
  8073ac:	2025883a 	mov	r18,r4
  8073b0:	8009883a 	mov	r4,r16
  8073b4:	dc400115 	stw	r17,4(sp)
  8073b8:	dfc00415 	stw	ra,16(sp)
  8073bc:	dcc00315 	stw	r19,12(sp)
  8073c0:	3023883a 	mov	r17,r6
  8073c4:	0806d3c0 	call	806d3c <__mcmp>
  8073c8:	10004226 	beq	r2,zero,8074d4 <__mdiff+0x13c>
  8073cc:	10005016 	blt	r2,zero,807510 <__mdiff+0x178>
  8073d0:	0027883a 	mov	r19,zero
  8073d4:	81400117 	ldw	r5,4(r16)
  8073d8:	9009883a 	mov	r4,r18
  8073dc:	08071600 	call	807160 <_Balloc>
  8073e0:	1019883a 	mov	r12,r2
  8073e4:	82800417 	ldw	r10,16(r16)
  8073e8:	88800417 	ldw	r2,16(r17)
  8073ec:	81800504 	addi	r6,r16,20
  8073f0:	5287883a 	add	r3,r10,r10
  8073f4:	1085883a 	add	r2,r2,r2
  8073f8:	18c7883a 	add	r3,r3,r3
  8073fc:	1085883a 	add	r2,r2,r2
  807400:	8a000504 	addi	r8,r17,20
  807404:	64c00315 	stw	r19,12(r12)
  807408:	30db883a 	add	r13,r6,r3
  80740c:	4097883a 	add	r11,r8,r2
  807410:	61c00504 	addi	r7,r12,20
  807414:	0013883a 	mov	r9,zero
  807418:	31000017 	ldw	r4,0(r6)
  80741c:	41400017 	ldw	r5,0(r8)
  807420:	42000104 	addi	r8,r8,4
  807424:	20bfffcc 	andi	r2,r4,65535
  807428:	28ffffcc 	andi	r3,r5,65535
  80742c:	10c5c83a 	sub	r2,r2,r3
  807430:	1245883a 	add	r2,r2,r9
  807434:	2008d43a 	srli	r4,r4,16
  807438:	280ad43a 	srli	r5,r5,16
  80743c:	1007d43a 	srai	r3,r2,16
  807440:	3880000d 	sth	r2,0(r7)
  807444:	2149c83a 	sub	r4,r4,r5
  807448:	20c9883a 	add	r4,r4,r3
  80744c:	3900008d 	sth	r4,2(r7)
  807450:	31800104 	addi	r6,r6,4
  807454:	39c00104 	addi	r7,r7,4
  807458:	2013d43a 	srai	r9,r4,16
  80745c:	42ffee36 	bltu	r8,r11,807418 <__mdiff+0x80>
  807460:	33400c2e 	bgeu	r6,r13,807494 <__mdiff+0xfc>
  807464:	30800017 	ldw	r2,0(r6)
  807468:	31800104 	addi	r6,r6,4
  80746c:	10ffffcc 	andi	r3,r2,65535
  807470:	1a47883a 	add	r3,r3,r9
  807474:	1004d43a 	srli	r2,r2,16
  807478:	1809d43a 	srai	r4,r3,16
  80747c:	38c0000d 	sth	r3,0(r7)
  807480:	1105883a 	add	r2,r2,r4
  807484:	3880008d 	sth	r2,2(r7)
  807488:	1013d43a 	srai	r9,r2,16
  80748c:	39c00104 	addi	r7,r7,4
  807490:	337ff436 	bltu	r6,r13,807464 <__mdiff+0xcc>
  807494:	38bfff17 	ldw	r2,-4(r7)
  807498:	38ffff04 	addi	r3,r7,-4
  80749c:	1000041e 	bne	r2,zero,8074b0 <__mdiff+0x118>
  8074a0:	18ffff04 	addi	r3,r3,-4
  8074a4:	18800017 	ldw	r2,0(r3)
  8074a8:	52bfffc4 	addi	r10,r10,-1
  8074ac:	103ffc26 	beq	r2,zero,8074a0 <__mdiff+0x108>
  8074b0:	6005883a 	mov	r2,r12
  8074b4:	62800415 	stw	r10,16(r12)
  8074b8:	dfc00417 	ldw	ra,16(sp)
  8074bc:	dcc00317 	ldw	r19,12(sp)
  8074c0:	dc800217 	ldw	r18,8(sp)
  8074c4:	dc400117 	ldw	r17,4(sp)
  8074c8:	dc000017 	ldw	r16,0(sp)
  8074cc:	dec00504 	addi	sp,sp,20
  8074d0:	f800283a 	ret
  8074d4:	9009883a 	mov	r4,r18
  8074d8:	000b883a 	mov	r5,zero
  8074dc:	08071600 	call	807160 <_Balloc>
  8074e0:	1019883a 	mov	r12,r2
  8074e4:	00800044 	movi	r2,1
  8074e8:	60800415 	stw	r2,16(r12)
  8074ec:	6005883a 	mov	r2,r12
  8074f0:	60000515 	stw	zero,20(r12)
  8074f4:	dfc00417 	ldw	ra,16(sp)
  8074f8:	dcc00317 	ldw	r19,12(sp)
  8074fc:	dc800217 	ldw	r18,8(sp)
  807500:	dc400117 	ldw	r17,4(sp)
  807504:	dc000017 	ldw	r16,0(sp)
  807508:	dec00504 	addi	sp,sp,20
  80750c:	f800283a 	ret
  807510:	880d883a 	mov	r6,r17
  807514:	04c00044 	movi	r19,1
  807518:	8023883a 	mov	r17,r16
  80751c:	3021883a 	mov	r16,r6
  807520:	003fac06 	br	8073d4 <__mdiff+0x3c>

00807524 <__lshift>:
  807524:	defff904 	addi	sp,sp,-28
  807528:	28800417 	ldw	r2,16(r5)
  80752c:	dc000015 	stw	r16,0(sp)
  807530:	3021d17a 	srai	r16,r6,5
  807534:	28c00217 	ldw	r3,8(r5)
  807538:	10800044 	addi	r2,r2,1
  80753c:	dc400115 	stw	r17,4(sp)
  807540:	80a3883a 	add	r17,r16,r2
  807544:	dd400515 	stw	r21,20(sp)
  807548:	dd000415 	stw	r20,16(sp)
  80754c:	dc800215 	stw	r18,8(sp)
  807550:	dfc00615 	stw	ra,24(sp)
  807554:	2825883a 	mov	r18,r5
  807558:	dcc00315 	stw	r19,12(sp)
  80755c:	3029883a 	mov	r20,r6
  807560:	202b883a 	mov	r21,r4
  807564:	29400117 	ldw	r5,4(r5)
  807568:	1c40030e 	bge	r3,r17,807578 <__lshift+0x54>
  80756c:	18c7883a 	add	r3,r3,r3
  807570:	29400044 	addi	r5,r5,1
  807574:	1c7ffd16 	blt	r3,r17,80756c <__lshift+0x48>
  807578:	a809883a 	mov	r4,r21
  80757c:	08071600 	call	807160 <_Balloc>
  807580:	1027883a 	mov	r19,r2
  807584:	11400504 	addi	r5,r2,20
  807588:	0400090e 	bge	zero,r16,8075b0 <__lshift+0x8c>
  80758c:	2805883a 	mov	r2,r5
  807590:	0007883a 	mov	r3,zero
  807594:	18c00044 	addi	r3,r3,1
  807598:	10000015 	stw	zero,0(r2)
  80759c:	10800104 	addi	r2,r2,4
  8075a0:	80fffc1e 	bne	r16,r3,807594 <__lshift+0x70>
  8075a4:	8405883a 	add	r2,r16,r16
  8075a8:	1085883a 	add	r2,r2,r2
  8075ac:	288b883a 	add	r5,r5,r2
  8075b0:	90800417 	ldw	r2,16(r18)
  8075b4:	91000504 	addi	r4,r18,20
  8075b8:	a18007cc 	andi	r6,r20,31
  8075bc:	1085883a 	add	r2,r2,r2
  8075c0:	1085883a 	add	r2,r2,r2
  8075c4:	208f883a 	add	r7,r4,r2
  8075c8:	30001e26 	beq	r6,zero,807644 <__lshift+0x120>
  8075cc:	00800804 	movi	r2,32
  8075d0:	1191c83a 	sub	r8,r2,r6
  8075d4:	0007883a 	mov	r3,zero
  8075d8:	20800017 	ldw	r2,0(r4)
  8075dc:	1184983a 	sll	r2,r2,r6
  8075e0:	1884b03a 	or	r2,r3,r2
  8075e4:	28800015 	stw	r2,0(r5)
  8075e8:	20c00017 	ldw	r3,0(r4)
  8075ec:	21000104 	addi	r4,r4,4
  8075f0:	29400104 	addi	r5,r5,4
  8075f4:	1a06d83a 	srl	r3,r3,r8
  8075f8:	21fff736 	bltu	r4,r7,8075d8 <__lshift+0xb4>
  8075fc:	28c00015 	stw	r3,0(r5)
  807600:	18000126 	beq	r3,zero,807608 <__lshift+0xe4>
  807604:	8c400044 	addi	r17,r17,1
  807608:	88bfffc4 	addi	r2,r17,-1
  80760c:	98800415 	stw	r2,16(r19)
  807610:	a809883a 	mov	r4,r21
  807614:	900b883a 	mov	r5,r18
  807618:	0806be00 	call	806be0 <_Bfree>
  80761c:	9805883a 	mov	r2,r19
  807620:	dfc00617 	ldw	ra,24(sp)
  807624:	dd400517 	ldw	r21,20(sp)
  807628:	dd000417 	ldw	r20,16(sp)
  80762c:	dcc00317 	ldw	r19,12(sp)
  807630:	dc800217 	ldw	r18,8(sp)
  807634:	dc400117 	ldw	r17,4(sp)
  807638:	dc000017 	ldw	r16,0(sp)
  80763c:	dec00704 	addi	sp,sp,28
  807640:	f800283a 	ret
  807644:	20800017 	ldw	r2,0(r4)
  807648:	21000104 	addi	r4,r4,4
  80764c:	28800015 	stw	r2,0(r5)
  807650:	29400104 	addi	r5,r5,4
  807654:	21ffec2e 	bgeu	r4,r7,807608 <__lshift+0xe4>
  807658:	20800017 	ldw	r2,0(r4)
  80765c:	21000104 	addi	r4,r4,4
  807660:	28800015 	stw	r2,0(r5)
  807664:	29400104 	addi	r5,r5,4
  807668:	21fff636 	bltu	r4,r7,807644 <__lshift+0x120>
  80766c:	003fe606 	br	807608 <__lshift+0xe4>

00807670 <__multiply>:
  807670:	defff904 	addi	sp,sp,-28
  807674:	dcc00315 	stw	r19,12(sp)
  807678:	dc800215 	stw	r18,8(sp)
  80767c:	2cc00417 	ldw	r19,16(r5)
  807680:	34800417 	ldw	r18,16(r6)
  807684:	dd000415 	stw	r20,16(sp)
  807688:	dc400115 	stw	r17,4(sp)
  80768c:	dfc00615 	stw	ra,24(sp)
  807690:	dd400515 	stw	r21,20(sp)
  807694:	dc000015 	stw	r16,0(sp)
  807698:	2823883a 	mov	r17,r5
  80769c:	3029883a 	mov	r20,r6
  8076a0:	9c80040e 	bge	r19,r18,8076b4 <__multiply+0x44>
  8076a4:	9027883a 	mov	r19,r18
  8076a8:	2c800417 	ldw	r18,16(r5)
  8076ac:	2829883a 	mov	r20,r5
  8076b0:	3023883a 	mov	r17,r6
  8076b4:	88800217 	ldw	r2,8(r17)
  8076b8:	9ca1883a 	add	r16,r19,r18
  8076bc:	89400117 	ldw	r5,4(r17)
  8076c0:	1400010e 	bge	r2,r16,8076c8 <__multiply+0x58>
  8076c4:	29400044 	addi	r5,r5,1
  8076c8:	08071600 	call	807160 <_Balloc>
  8076cc:	102b883a 	mov	r21,r2
  8076d0:	8405883a 	add	r2,r16,r16
  8076d4:	1085883a 	add	r2,r2,r2
  8076d8:	a9000504 	addi	r4,r21,20
  8076dc:	209d883a 	add	r14,r4,r2
  8076e0:	2380042e 	bgeu	r4,r14,8076f4 <__multiply+0x84>
  8076e4:	2005883a 	mov	r2,r4
  8076e8:	10000015 	stw	zero,0(r2)
  8076ec:	10800104 	addi	r2,r2,4
  8076f0:	13bffd36 	bltu	r2,r14,8076e8 <__multiply+0x78>
  8076f4:	9485883a 	add	r2,r18,r18
  8076f8:	9cc7883a 	add	r3,r19,r19
  8076fc:	a1800504 	addi	r6,r20,20
  807700:	1085883a 	add	r2,r2,r2
  807704:	8b400504 	addi	r13,r17,20
  807708:	18c7883a 	add	r3,r3,r3
  80770c:	309f883a 	add	r15,r6,r2
  807710:	68d7883a 	add	r11,r13,r3
  807714:	33c03b2e 	bgeu	r6,r15,807804 <__multiply+0x194>
  807718:	2019883a 	mov	r12,r4
  80771c:	30800017 	ldw	r2,0(r6)
  807720:	127fffcc 	andi	r9,r2,65535
  807724:	48001826 	beq	r9,zero,807788 <__multiply+0x118>
  807728:	6811883a 	mov	r8,r13
  80772c:	600f883a 	mov	r7,r12
  807730:	0015883a 	mov	r10,zero
  807734:	40c00017 	ldw	r3,0(r8)
  807738:	39400017 	ldw	r5,0(r7)
  80773c:	42000104 	addi	r8,r8,4
  807740:	193fffcc 	andi	r4,r3,65535
  807744:	4909383a 	mul	r4,r9,r4
  807748:	1806d43a 	srli	r3,r3,16
  80774c:	28bfffcc 	andi	r2,r5,65535
  807750:	5085883a 	add	r2,r10,r2
  807754:	2089883a 	add	r4,r4,r2
  807758:	48c7383a 	mul	r3,r9,r3
  80775c:	280ad43a 	srli	r5,r5,16
  807760:	2004d43a 	srli	r2,r4,16
  807764:	3900000d 	sth	r4,0(r7)
  807768:	1947883a 	add	r3,r3,r5
  80776c:	10c5883a 	add	r2,r2,r3
  807770:	3880008d 	sth	r2,2(r7)
  807774:	1014d43a 	srli	r10,r2,16
  807778:	39c00104 	addi	r7,r7,4
  80777c:	42ffed36 	bltu	r8,r11,807734 <__multiply+0xc4>
  807780:	3a800015 	stw	r10,0(r7)
  807784:	30800017 	ldw	r2,0(r6)
  807788:	1012d43a 	srli	r9,r2,16
  80778c:	48001926 	beq	r9,zero,8077f4 <__multiply+0x184>
  807790:	60800017 	ldw	r2,0(r12)
  807794:	6811883a 	mov	r8,r13
  807798:	600f883a 	mov	r7,r12
  80779c:	0015883a 	mov	r10,zero
  8077a0:	100b883a 	mov	r5,r2
  8077a4:	41000017 	ldw	r4,0(r8)
  8077a8:	2806d43a 	srli	r3,r5,16
  8077ac:	3880000d 	sth	r2,0(r7)
  8077b0:	20bfffcc 	andi	r2,r4,65535
  8077b4:	4885383a 	mul	r2,r9,r2
  8077b8:	50c7883a 	add	r3,r10,r3
  8077bc:	2008d43a 	srli	r4,r4,16
  8077c0:	10c5883a 	add	r2,r2,r3
  8077c4:	3880008d 	sth	r2,2(r7)
  8077c8:	39c00104 	addi	r7,r7,4
  8077cc:	39400017 	ldw	r5,0(r7)
  8077d0:	4909383a 	mul	r4,r9,r4
  8077d4:	1004d43a 	srli	r2,r2,16
  8077d8:	28ffffcc 	andi	r3,r5,65535
  8077dc:	20c9883a 	add	r4,r4,r3
  8077e0:	1105883a 	add	r2,r2,r4
  8077e4:	42000104 	addi	r8,r8,4
  8077e8:	1014d43a 	srli	r10,r2,16
  8077ec:	42ffed36 	bltu	r8,r11,8077a4 <__multiply+0x134>
  8077f0:	38800015 	stw	r2,0(r7)
  8077f4:	31800104 	addi	r6,r6,4
  8077f8:	33c0022e 	bgeu	r6,r15,807804 <__multiply+0x194>
  8077fc:	63000104 	addi	r12,r12,4
  807800:	003fc606 	br	80771c <__multiply+0xac>
  807804:	0400090e 	bge	zero,r16,80782c <__multiply+0x1bc>
  807808:	70bfff17 	ldw	r2,-4(r14)
  80780c:	70ffff04 	addi	r3,r14,-4
  807810:	10000326 	beq	r2,zero,807820 <__multiply+0x1b0>
  807814:	00000506 	br	80782c <__multiply+0x1bc>
  807818:	18800017 	ldw	r2,0(r3)
  80781c:	1000031e 	bne	r2,zero,80782c <__multiply+0x1bc>
  807820:	843fffc4 	addi	r16,r16,-1
  807824:	18ffff04 	addi	r3,r3,-4
  807828:	803ffb1e 	bne	r16,zero,807818 <__multiply+0x1a8>
  80782c:	a805883a 	mov	r2,r21
  807830:	ac000415 	stw	r16,16(r21)
  807834:	dfc00617 	ldw	ra,24(sp)
  807838:	dd400517 	ldw	r21,20(sp)
  80783c:	dd000417 	ldw	r20,16(sp)
  807840:	dcc00317 	ldw	r19,12(sp)
  807844:	dc800217 	ldw	r18,8(sp)
  807848:	dc400117 	ldw	r17,4(sp)
  80784c:	dc000017 	ldw	r16,0(sp)
  807850:	dec00704 	addi	sp,sp,28
  807854:	f800283a 	ret

00807858 <__i2b>:
  807858:	defffd04 	addi	sp,sp,-12
  80785c:	dc000015 	stw	r16,0(sp)
  807860:	04000044 	movi	r16,1
  807864:	dc800115 	stw	r18,4(sp)
  807868:	2825883a 	mov	r18,r5
  80786c:	800b883a 	mov	r5,r16
  807870:	dfc00215 	stw	ra,8(sp)
  807874:	08071600 	call	807160 <_Balloc>
  807878:	14000415 	stw	r16,16(r2)
  80787c:	14800515 	stw	r18,20(r2)
  807880:	dfc00217 	ldw	ra,8(sp)
  807884:	dc800117 	ldw	r18,4(sp)
  807888:	dc000017 	ldw	r16,0(sp)
  80788c:	dec00304 	addi	sp,sp,12
  807890:	f800283a 	ret

00807894 <__multadd>:
  807894:	defffa04 	addi	sp,sp,-24
  807898:	dc800215 	stw	r18,8(sp)
  80789c:	2c800417 	ldw	r18,16(r5)
  8078a0:	dd000415 	stw	r20,16(sp)
  8078a4:	dcc00315 	stw	r19,12(sp)
  8078a8:	dc000015 	stw	r16,0(sp)
  8078ac:	dfc00515 	stw	ra,20(sp)
  8078b0:	3821883a 	mov	r16,r7
  8078b4:	dc400115 	stw	r17,4(sp)
  8078b8:	2827883a 	mov	r19,r5
  8078bc:	2029883a 	mov	r20,r4
  8078c0:	2a000504 	addi	r8,r5,20
  8078c4:	000f883a 	mov	r7,zero
  8078c8:	40800017 	ldw	r2,0(r8)
  8078cc:	39c00044 	addi	r7,r7,1
  8078d0:	10ffffcc 	andi	r3,r2,65535
  8078d4:	1987383a 	mul	r3,r3,r6
  8078d8:	1004d43a 	srli	r2,r2,16
  8078dc:	1c07883a 	add	r3,r3,r16
  8078e0:	180ad43a 	srli	r5,r3,16
  8078e4:	1185383a 	mul	r2,r2,r6
  8078e8:	18ffffcc 	andi	r3,r3,65535
  8078ec:	1145883a 	add	r2,r2,r5
  8078f0:	1008943a 	slli	r4,r2,16
  8078f4:	1020d43a 	srli	r16,r2,16
  8078f8:	20c9883a 	add	r4,r4,r3
  8078fc:	41000015 	stw	r4,0(r8)
  807900:	42000104 	addi	r8,r8,4
  807904:	3cbff016 	blt	r7,r18,8078c8 <__multadd+0x34>
  807908:	80000826 	beq	r16,zero,80792c <__multadd+0x98>
  80790c:	98800217 	ldw	r2,8(r19)
  807910:	90800f0e 	bge	r18,r2,807950 <__multadd+0xbc>
  807914:	9485883a 	add	r2,r18,r18
  807918:	1085883a 	add	r2,r2,r2
  80791c:	14c5883a 	add	r2,r2,r19
  807920:	90c00044 	addi	r3,r18,1
  807924:	14000515 	stw	r16,20(r2)
  807928:	98c00415 	stw	r3,16(r19)
  80792c:	9805883a 	mov	r2,r19
  807930:	dfc00517 	ldw	ra,20(sp)
  807934:	dd000417 	ldw	r20,16(sp)
  807938:	dcc00317 	ldw	r19,12(sp)
  80793c:	dc800217 	ldw	r18,8(sp)
  807940:	dc400117 	ldw	r17,4(sp)
  807944:	dc000017 	ldw	r16,0(sp)
  807948:	dec00604 	addi	sp,sp,24
  80794c:	f800283a 	ret
  807950:	99400117 	ldw	r5,4(r19)
  807954:	a009883a 	mov	r4,r20
  807958:	29400044 	addi	r5,r5,1
  80795c:	08071600 	call	807160 <_Balloc>
  807960:	99800417 	ldw	r6,16(r19)
  807964:	99400304 	addi	r5,r19,12
  807968:	11000304 	addi	r4,r2,12
  80796c:	318d883a 	add	r6,r6,r6
  807970:	318d883a 	add	r6,r6,r6
  807974:	31800204 	addi	r6,r6,8
  807978:	1023883a 	mov	r17,r2
  80797c:	0801c740 	call	801c74 <memcpy>
  807980:	980b883a 	mov	r5,r19
  807984:	a009883a 	mov	r4,r20
  807988:	0806be00 	call	806be0 <_Bfree>
  80798c:	8827883a 	mov	r19,r17
  807990:	003fe006 	br	807914 <__multadd+0x80>

00807994 <__pow5mult>:
  807994:	defffa04 	addi	sp,sp,-24
  807998:	308000cc 	andi	r2,r6,3
  80799c:	dd000415 	stw	r20,16(sp)
  8079a0:	dcc00315 	stw	r19,12(sp)
  8079a4:	dc000015 	stw	r16,0(sp)
  8079a8:	dfc00515 	stw	ra,20(sp)
  8079ac:	dc800215 	stw	r18,8(sp)
  8079b0:	dc400115 	stw	r17,4(sp)
  8079b4:	3021883a 	mov	r16,r6
  8079b8:	2027883a 	mov	r19,r4
  8079bc:	2829883a 	mov	r20,r5
  8079c0:	10002b1e 	bne	r2,zero,807a70 <__pow5mult+0xdc>
  8079c4:	8025d0ba 	srai	r18,r16,2
  8079c8:	90001b26 	beq	r18,zero,807a38 <__pow5mult+0xa4>
  8079cc:	9c001217 	ldw	r16,72(r19)
  8079d0:	8000081e 	bne	r16,zero,8079f4 <__pow5mult+0x60>
  8079d4:	00003006 	br	807a98 <__pow5mult+0x104>
  8079d8:	800b883a 	mov	r5,r16
  8079dc:	800d883a 	mov	r6,r16
  8079e0:	9809883a 	mov	r4,r19
  8079e4:	90001426 	beq	r18,zero,807a38 <__pow5mult+0xa4>
  8079e8:	80800017 	ldw	r2,0(r16)
  8079ec:	10001b26 	beq	r2,zero,807a5c <__pow5mult+0xc8>
  8079f0:	1021883a 	mov	r16,r2
  8079f4:	9080004c 	andi	r2,r18,1
  8079f8:	1005003a 	cmpeq	r2,r2,zero
  8079fc:	9025d07a 	srai	r18,r18,1
  807a00:	800d883a 	mov	r6,r16
  807a04:	9809883a 	mov	r4,r19
  807a08:	a00b883a 	mov	r5,r20
  807a0c:	103ff21e 	bne	r2,zero,8079d8 <__pow5mult+0x44>
  807a10:	08076700 	call	807670 <__multiply>
  807a14:	a00b883a 	mov	r5,r20
  807a18:	9809883a 	mov	r4,r19
  807a1c:	1023883a 	mov	r17,r2
  807a20:	0806be00 	call	806be0 <_Bfree>
  807a24:	8829883a 	mov	r20,r17
  807a28:	800b883a 	mov	r5,r16
  807a2c:	800d883a 	mov	r6,r16
  807a30:	9809883a 	mov	r4,r19
  807a34:	903fec1e 	bne	r18,zero,8079e8 <__pow5mult+0x54>
  807a38:	a005883a 	mov	r2,r20
  807a3c:	dfc00517 	ldw	ra,20(sp)
  807a40:	dd000417 	ldw	r20,16(sp)
  807a44:	dcc00317 	ldw	r19,12(sp)
  807a48:	dc800217 	ldw	r18,8(sp)
  807a4c:	dc400117 	ldw	r17,4(sp)
  807a50:	dc000017 	ldw	r16,0(sp)
  807a54:	dec00604 	addi	sp,sp,24
  807a58:	f800283a 	ret
  807a5c:	08076700 	call	807670 <__multiply>
  807a60:	80800015 	stw	r2,0(r16)
  807a64:	1021883a 	mov	r16,r2
  807a68:	10000015 	stw	zero,0(r2)
  807a6c:	003fe106 	br	8079f4 <__pow5mult+0x60>
  807a70:	1085883a 	add	r2,r2,r2
  807a74:	00c02074 	movhi	r3,129
  807a78:	18f54e04 	addi	r3,r3,-10952
  807a7c:	1085883a 	add	r2,r2,r2
  807a80:	10c5883a 	add	r2,r2,r3
  807a84:	11bfff17 	ldw	r6,-4(r2)
  807a88:	000f883a 	mov	r7,zero
  807a8c:	08078940 	call	807894 <__multadd>
  807a90:	1029883a 	mov	r20,r2
  807a94:	003fcb06 	br	8079c4 <__pow5mult+0x30>
  807a98:	9809883a 	mov	r4,r19
  807a9c:	01409c44 	movi	r5,625
  807aa0:	08078580 	call	807858 <__i2b>
  807aa4:	98801215 	stw	r2,72(r19)
  807aa8:	1021883a 	mov	r16,r2
  807aac:	10000015 	stw	zero,0(r2)
  807ab0:	003fd006 	br	8079f4 <__pow5mult+0x60>

00807ab4 <__s2b>:
  807ab4:	defff904 	addi	sp,sp,-28
  807ab8:	dcc00315 	stw	r19,12(sp)
  807abc:	dc800215 	stw	r18,8(sp)
  807ac0:	2827883a 	mov	r19,r5
  807ac4:	2025883a 	mov	r18,r4
  807ac8:	01400244 	movi	r5,9
  807acc:	39000204 	addi	r4,r7,8
  807ad0:	dd000415 	stw	r20,16(sp)
  807ad4:	dc400115 	stw	r17,4(sp)
  807ad8:	dfc00615 	stw	ra,24(sp)
  807adc:	dd400515 	stw	r21,20(sp)
  807ae0:	dc000015 	stw	r16,0(sp)
  807ae4:	3829883a 	mov	r20,r7
  807ae8:	3023883a 	mov	r17,r6
  807aec:	0800dac0 	call	800dac <__divsi3>
  807af0:	00c00044 	movi	r3,1
  807af4:	1880350e 	bge	r3,r2,807bcc <__s2b+0x118>
  807af8:	000b883a 	mov	r5,zero
  807afc:	18c7883a 	add	r3,r3,r3
  807b00:	29400044 	addi	r5,r5,1
  807b04:	18bffd16 	blt	r3,r2,807afc <__s2b+0x48>
  807b08:	9009883a 	mov	r4,r18
  807b0c:	08071600 	call	807160 <_Balloc>
  807b10:	1011883a 	mov	r8,r2
  807b14:	d8800717 	ldw	r2,28(sp)
  807b18:	00c00044 	movi	r3,1
  807b1c:	01800244 	movi	r6,9
  807b20:	40800515 	stw	r2,20(r8)
  807b24:	40c00415 	stw	r3,16(r8)
  807b28:	3440260e 	bge	r6,r17,807bc4 <__s2b+0x110>
  807b2c:	3021883a 	mov	r16,r6
  807b30:	99ab883a 	add	r21,r19,r6
  807b34:	9c05883a 	add	r2,r19,r16
  807b38:	11c00007 	ldb	r7,0(r2)
  807b3c:	400b883a 	mov	r5,r8
  807b40:	9009883a 	mov	r4,r18
  807b44:	39fff404 	addi	r7,r7,-48
  807b48:	01800284 	movi	r6,10
  807b4c:	08078940 	call	807894 <__multadd>
  807b50:	84000044 	addi	r16,r16,1
  807b54:	1011883a 	mov	r8,r2
  807b58:	8c3ff61e 	bne	r17,r16,807b34 <__s2b+0x80>
  807b5c:	ac45883a 	add	r2,r21,r17
  807b60:	117ffe04 	addi	r5,r2,-8
  807b64:	880d883a 	mov	r6,r17
  807b68:	35000c0e 	bge	r6,r20,807b9c <__s2b+0xe8>
  807b6c:	a185c83a 	sub	r2,r20,r6
  807b70:	2821883a 	mov	r16,r5
  807b74:	28a3883a 	add	r17,r5,r2
  807b78:	81c00007 	ldb	r7,0(r16)
  807b7c:	400b883a 	mov	r5,r8
  807b80:	9009883a 	mov	r4,r18
  807b84:	39fff404 	addi	r7,r7,-48
  807b88:	01800284 	movi	r6,10
  807b8c:	08078940 	call	807894 <__multadd>
  807b90:	84000044 	addi	r16,r16,1
  807b94:	1011883a 	mov	r8,r2
  807b98:	847ff71e 	bne	r16,r17,807b78 <__s2b+0xc4>
  807b9c:	4005883a 	mov	r2,r8
  807ba0:	dfc00617 	ldw	ra,24(sp)
  807ba4:	dd400517 	ldw	r21,20(sp)
  807ba8:	dd000417 	ldw	r20,16(sp)
  807bac:	dcc00317 	ldw	r19,12(sp)
  807bb0:	dc800217 	ldw	r18,8(sp)
  807bb4:	dc400117 	ldw	r17,4(sp)
  807bb8:	dc000017 	ldw	r16,0(sp)
  807bbc:	dec00704 	addi	sp,sp,28
  807bc0:	f800283a 	ret
  807bc4:	99400284 	addi	r5,r19,10
  807bc8:	003fe706 	br	807b68 <__s2b+0xb4>
  807bcc:	000b883a 	mov	r5,zero
  807bd0:	003fcd06 	br	807b08 <__s2b+0x54>

00807bd4 <_read_r>:
  807bd4:	defffd04 	addi	sp,sp,-12
  807bd8:	dc000015 	stw	r16,0(sp)
  807bdc:	04002074 	movhi	r16,129
  807be0:	84074f04 	addi	r16,r16,7484
  807be4:	dc400115 	stw	r17,4(sp)
  807be8:	80000015 	stw	zero,0(r16)
  807bec:	2023883a 	mov	r17,r4
  807bf0:	2809883a 	mov	r4,r5
  807bf4:	300b883a 	mov	r5,r6
  807bf8:	380d883a 	mov	r6,r7
  807bfc:	dfc00215 	stw	ra,8(sp)
  807c00:	080aeac0 	call	80aeac <read>
  807c04:	1007883a 	mov	r3,r2
  807c08:	00bfffc4 	movi	r2,-1
  807c0c:	18800626 	beq	r3,r2,807c28 <_read_r+0x54>
  807c10:	1805883a 	mov	r2,r3
  807c14:	dfc00217 	ldw	ra,8(sp)
  807c18:	dc400117 	ldw	r17,4(sp)
  807c1c:	dc000017 	ldw	r16,0(sp)
  807c20:	dec00304 	addi	sp,sp,12
  807c24:	f800283a 	ret
  807c28:	80800017 	ldw	r2,0(r16)
  807c2c:	103ff826 	beq	r2,zero,807c10 <_read_r+0x3c>
  807c30:	88800015 	stw	r2,0(r17)
  807c34:	1805883a 	mov	r2,r3
  807c38:	dfc00217 	ldw	ra,8(sp)
  807c3c:	dc400117 	ldw	r17,4(sp)
  807c40:	dc000017 	ldw	r16,0(sp)
  807c44:	dec00304 	addi	sp,sp,12
  807c48:	f800283a 	ret

00807c4c <_realloc_r>:
  807c4c:	defff404 	addi	sp,sp,-48
  807c50:	dd800815 	stw	r22,32(sp)
  807c54:	dc800415 	stw	r18,16(sp)
  807c58:	dc400315 	stw	r17,12(sp)
  807c5c:	dfc00b15 	stw	ra,44(sp)
  807c60:	df000a15 	stw	fp,40(sp)
  807c64:	ddc00915 	stw	r23,36(sp)
  807c68:	dd400715 	stw	r21,28(sp)
  807c6c:	dd000615 	stw	r20,24(sp)
  807c70:	dcc00515 	stw	r19,20(sp)
  807c74:	dc000215 	stw	r16,8(sp)
  807c78:	2825883a 	mov	r18,r5
  807c7c:	3023883a 	mov	r17,r6
  807c80:	202d883a 	mov	r22,r4
  807c84:	2800c926 	beq	r5,zero,807fac <_realloc_r+0x360>
  807c88:	080ae6c0 	call	80ae6c <__malloc_lock>
  807c8c:	943ffe04 	addi	r16,r18,-8
  807c90:	88c002c4 	addi	r3,r17,11
  807c94:	00800584 	movi	r2,22
  807c98:	82000117 	ldw	r8,4(r16)
  807c9c:	10c01b2e 	bgeu	r2,r3,807d0c <_realloc_r+0xc0>
  807ca0:	00bffe04 	movi	r2,-8
  807ca4:	188e703a 	and	r7,r3,r2
  807ca8:	3839883a 	mov	fp,r7
  807cac:	38001a16 	blt	r7,zero,807d18 <_realloc_r+0xcc>
  807cb0:	e4401936 	bltu	fp,r17,807d18 <_realloc_r+0xcc>
  807cb4:	013fff04 	movi	r4,-4
  807cb8:	4126703a 	and	r19,r8,r4
  807cbc:	99c02616 	blt	r19,r7,807d58 <_realloc_r+0x10c>
  807cc0:	802b883a 	mov	r21,r16
  807cc4:	9829883a 	mov	r20,r19
  807cc8:	84000204 	addi	r16,r16,8
  807ccc:	a80f883a 	mov	r7,r21
  807cd0:	a70dc83a 	sub	r6,r20,fp
  807cd4:	008003c4 	movi	r2,15
  807cd8:	1180c136 	bltu	r2,r6,807fe0 <_realloc_r+0x394>
  807cdc:	38800117 	ldw	r2,4(r7)
  807ce0:	a549883a 	add	r4,r20,r21
  807ce4:	1080004c 	andi	r2,r2,1
  807ce8:	a084b03a 	or	r2,r20,r2
  807cec:	38800115 	stw	r2,4(r7)
  807cf0:	20c00117 	ldw	r3,4(r4)
  807cf4:	18c00054 	ori	r3,r3,1
  807cf8:	20c00115 	stw	r3,4(r4)
  807cfc:	b009883a 	mov	r4,r22
  807d00:	080ae8c0 	call	80ae8c <__malloc_unlock>
  807d04:	8023883a 	mov	r17,r16
  807d08:	00000606 	br	807d24 <_realloc_r+0xd8>
  807d0c:	01c00404 	movi	r7,16
  807d10:	3839883a 	mov	fp,r7
  807d14:	e47fe72e 	bgeu	fp,r17,807cb4 <_realloc_r+0x68>
  807d18:	00800304 	movi	r2,12
  807d1c:	0023883a 	mov	r17,zero
  807d20:	b0800015 	stw	r2,0(r22)
  807d24:	8805883a 	mov	r2,r17
  807d28:	dfc00b17 	ldw	ra,44(sp)
  807d2c:	df000a17 	ldw	fp,40(sp)
  807d30:	ddc00917 	ldw	r23,36(sp)
  807d34:	dd800817 	ldw	r22,32(sp)
  807d38:	dd400717 	ldw	r21,28(sp)
  807d3c:	dd000617 	ldw	r20,24(sp)
  807d40:	dcc00517 	ldw	r19,20(sp)
  807d44:	dc800417 	ldw	r18,16(sp)
  807d48:	dc400317 	ldw	r17,12(sp)
  807d4c:	dc000217 	ldw	r16,8(sp)
  807d50:	dec00c04 	addi	sp,sp,48
  807d54:	f800283a 	ret
  807d58:	00802074 	movhi	r2,129
  807d5c:	10b8e004 	addi	r2,r2,-7296
  807d60:	12400217 	ldw	r9,8(r2)
  807d64:	84cd883a 	add	r6,r16,r19
  807d68:	802b883a 	mov	r21,r16
  807d6c:	3240b926 	beq	r6,r9,808054 <_realloc_r+0x408>
  807d70:	31400117 	ldw	r5,4(r6)
  807d74:	00bfff84 	movi	r2,-2
  807d78:	2884703a 	and	r2,r5,r2
  807d7c:	1185883a 	add	r2,r2,r6
  807d80:	10c00117 	ldw	r3,4(r2)
  807d84:	18c0004c 	andi	r3,r3,1
  807d88:	1807003a 	cmpeq	r3,r3,zero
  807d8c:	1800a326 	beq	r3,zero,80801c <_realloc_r+0x3d0>
  807d90:	2908703a 	and	r4,r5,r4
  807d94:	9929883a 	add	r20,r19,r4
  807d98:	a1c0a30e 	bge	r20,r7,808028 <_realloc_r+0x3dc>
  807d9c:	4080004c 	andi	r2,r8,1
  807da0:	1000551e 	bne	r2,zero,807ef8 <_realloc_r+0x2ac>
  807da4:	80800017 	ldw	r2,0(r16)
  807da8:	80afc83a 	sub	r23,r16,r2
  807dac:	b8c00117 	ldw	r3,4(r23)
  807db0:	00bfff04 	movi	r2,-4
  807db4:	1884703a 	and	r2,r3,r2
  807db8:	30002e26 	beq	r6,zero,807e74 <_realloc_r+0x228>
  807dbc:	3240b926 	beq	r6,r9,8080a4 <_realloc_r+0x458>
  807dc0:	98a9883a 	add	r20,r19,r2
  807dc4:	2509883a 	add	r4,r4,r20
  807dc8:	d9000015 	stw	r4,0(sp)
  807dcc:	21c02a16 	blt	r4,r7,807e78 <_realloc_r+0x22c>
  807dd0:	30800317 	ldw	r2,12(r6)
  807dd4:	30c00217 	ldw	r3,8(r6)
  807dd8:	01400904 	movi	r5,36
  807ddc:	99bfff04 	addi	r6,r19,-4
  807de0:	18800315 	stw	r2,12(r3)
  807de4:	10c00215 	stw	r3,8(r2)
  807de8:	b9000317 	ldw	r4,12(r23)
  807dec:	b8800217 	ldw	r2,8(r23)
  807df0:	b82b883a 	mov	r21,r23
  807df4:	bc000204 	addi	r16,r23,8
  807df8:	20800215 	stw	r2,8(r4)
  807dfc:	11000315 	stw	r4,12(r2)
  807e00:	2980e436 	bltu	r5,r6,808194 <_realloc_r+0x548>
  807e04:	008004c4 	movi	r2,19
  807e08:	9009883a 	mov	r4,r18
  807e0c:	8011883a 	mov	r8,r16
  807e10:	11800f2e 	bgeu	r2,r6,807e50 <_realloc_r+0x204>
  807e14:	90800017 	ldw	r2,0(r18)
  807e18:	ba000404 	addi	r8,r23,16
  807e1c:	91000204 	addi	r4,r18,8
  807e20:	b8800215 	stw	r2,8(r23)
  807e24:	90c00117 	ldw	r3,4(r18)
  807e28:	008006c4 	movi	r2,27
  807e2c:	b8c00315 	stw	r3,12(r23)
  807e30:	1180072e 	bgeu	r2,r6,807e50 <_realloc_r+0x204>
  807e34:	90c00217 	ldw	r3,8(r18)
  807e38:	ba000604 	addi	r8,r23,24
  807e3c:	91000404 	addi	r4,r18,16
  807e40:	b8c00415 	stw	r3,16(r23)
  807e44:	90800317 	ldw	r2,12(r18)
  807e48:	b8800515 	stw	r2,20(r23)
  807e4c:	3140e726 	beq	r6,r5,8081ec <_realloc_r+0x5a0>
  807e50:	20800017 	ldw	r2,0(r4)
  807e54:	dd000017 	ldw	r20,0(sp)
  807e58:	b80f883a 	mov	r7,r23
  807e5c:	40800015 	stw	r2,0(r8)
  807e60:	20c00117 	ldw	r3,4(r4)
  807e64:	40c00115 	stw	r3,4(r8)
  807e68:	20800217 	ldw	r2,8(r4)
  807e6c:	40800215 	stw	r2,8(r8)
  807e70:	003f9706 	br	807cd0 <_realloc_r+0x84>
  807e74:	98a9883a 	add	r20,r19,r2
  807e78:	a1c01f16 	blt	r20,r7,807ef8 <_realloc_r+0x2ac>
  807e7c:	b8c00317 	ldw	r3,12(r23)
  807e80:	b8800217 	ldw	r2,8(r23)
  807e84:	99bfff04 	addi	r6,r19,-4
  807e88:	01400904 	movi	r5,36
  807e8c:	b82b883a 	mov	r21,r23
  807e90:	18800215 	stw	r2,8(r3)
  807e94:	10c00315 	stw	r3,12(r2)
  807e98:	bc000204 	addi	r16,r23,8
  807e9c:	2980c336 	bltu	r5,r6,8081ac <_realloc_r+0x560>
  807ea0:	008004c4 	movi	r2,19
  807ea4:	9009883a 	mov	r4,r18
  807ea8:	8011883a 	mov	r8,r16
  807eac:	11800f2e 	bgeu	r2,r6,807eec <_realloc_r+0x2a0>
  807eb0:	90800017 	ldw	r2,0(r18)
  807eb4:	ba000404 	addi	r8,r23,16
  807eb8:	91000204 	addi	r4,r18,8
  807ebc:	b8800215 	stw	r2,8(r23)
  807ec0:	90c00117 	ldw	r3,4(r18)
  807ec4:	008006c4 	movi	r2,27
  807ec8:	b8c00315 	stw	r3,12(r23)
  807ecc:	1180072e 	bgeu	r2,r6,807eec <_realloc_r+0x2a0>
  807ed0:	90c00217 	ldw	r3,8(r18)
  807ed4:	ba000604 	addi	r8,r23,24
  807ed8:	91000404 	addi	r4,r18,16
  807edc:	b8c00415 	stw	r3,16(r23)
  807ee0:	90800317 	ldw	r2,12(r18)
  807ee4:	b8800515 	stw	r2,20(r23)
  807ee8:	3140c726 	beq	r6,r5,808208 <_realloc_r+0x5bc>
  807eec:	20800017 	ldw	r2,0(r4)
  807ef0:	b80f883a 	mov	r7,r23
  807ef4:	003fd906 	br	807e5c <_realloc_r+0x210>
  807ef8:	880b883a 	mov	r5,r17
  807efc:	b009883a 	mov	r4,r22
  807f00:	08014500 	call	801450 <_malloc_r>
  807f04:	1023883a 	mov	r17,r2
  807f08:	10002526 	beq	r2,zero,807fa0 <_realloc_r+0x354>
  807f0c:	80800117 	ldw	r2,4(r16)
  807f10:	00ffff84 	movi	r3,-2
  807f14:	893ffe04 	addi	r4,r17,-8
  807f18:	10c4703a 	and	r2,r2,r3
  807f1c:	8085883a 	add	r2,r16,r2
  807f20:	20809526 	beq	r4,r2,808178 <_realloc_r+0x52c>
  807f24:	99bfff04 	addi	r6,r19,-4
  807f28:	01c00904 	movi	r7,36
  807f2c:	39804536 	bltu	r7,r6,808044 <_realloc_r+0x3f8>
  807f30:	008004c4 	movi	r2,19
  807f34:	9009883a 	mov	r4,r18
  807f38:	880b883a 	mov	r5,r17
  807f3c:	11800f2e 	bgeu	r2,r6,807f7c <_realloc_r+0x330>
  807f40:	90800017 	ldw	r2,0(r18)
  807f44:	89400204 	addi	r5,r17,8
  807f48:	91000204 	addi	r4,r18,8
  807f4c:	88800015 	stw	r2,0(r17)
  807f50:	90c00117 	ldw	r3,4(r18)
  807f54:	008006c4 	movi	r2,27
  807f58:	88c00115 	stw	r3,4(r17)
  807f5c:	1180072e 	bgeu	r2,r6,807f7c <_realloc_r+0x330>
  807f60:	90c00217 	ldw	r3,8(r18)
  807f64:	89400404 	addi	r5,r17,16
  807f68:	91000404 	addi	r4,r18,16
  807f6c:	88c00215 	stw	r3,8(r17)
  807f70:	90800317 	ldw	r2,12(r18)
  807f74:	88800315 	stw	r2,12(r17)
  807f78:	31c09126 	beq	r6,r7,8081c0 <_realloc_r+0x574>
  807f7c:	20800017 	ldw	r2,0(r4)
  807f80:	28800015 	stw	r2,0(r5)
  807f84:	20c00117 	ldw	r3,4(r4)
  807f88:	28c00115 	stw	r3,4(r5)
  807f8c:	20800217 	ldw	r2,8(r4)
  807f90:	28800215 	stw	r2,8(r5)
  807f94:	900b883a 	mov	r5,r18
  807f98:	b009883a 	mov	r4,r22
  807f9c:	08060800 	call	806080 <_free_r>
  807fa0:	b009883a 	mov	r4,r22
  807fa4:	080ae8c0 	call	80ae8c <__malloc_unlock>
  807fa8:	003f5e06 	br	807d24 <_realloc_r+0xd8>
  807fac:	300b883a 	mov	r5,r6
  807fb0:	dfc00b17 	ldw	ra,44(sp)
  807fb4:	df000a17 	ldw	fp,40(sp)
  807fb8:	ddc00917 	ldw	r23,36(sp)
  807fbc:	dd800817 	ldw	r22,32(sp)
  807fc0:	dd400717 	ldw	r21,28(sp)
  807fc4:	dd000617 	ldw	r20,24(sp)
  807fc8:	dcc00517 	ldw	r19,20(sp)
  807fcc:	dc800417 	ldw	r18,16(sp)
  807fd0:	dc400317 	ldw	r17,12(sp)
  807fd4:	dc000217 	ldw	r16,8(sp)
  807fd8:	dec00c04 	addi	sp,sp,48
  807fdc:	08014501 	jmpi	801450 <_malloc_r>
  807fe0:	38800117 	ldw	r2,4(r7)
  807fe4:	e54b883a 	add	r5,fp,r21
  807fe8:	31000054 	ori	r4,r6,1
  807fec:	1080004c 	andi	r2,r2,1
  807ff0:	1704b03a 	or	r2,r2,fp
  807ff4:	38800115 	stw	r2,4(r7)
  807ff8:	29000115 	stw	r4,4(r5)
  807ffc:	2987883a 	add	r3,r5,r6
  808000:	18800117 	ldw	r2,4(r3)
  808004:	29400204 	addi	r5,r5,8
  808008:	b009883a 	mov	r4,r22
  80800c:	10800054 	ori	r2,r2,1
  808010:	18800115 	stw	r2,4(r3)
  808014:	08060800 	call	806080 <_free_r>
  808018:	003f3806 	br	807cfc <_realloc_r+0xb0>
  80801c:	000d883a 	mov	r6,zero
  808020:	0009883a 	mov	r4,zero
  808024:	003f5d06 	br	807d9c <_realloc_r+0x150>
  808028:	30c00217 	ldw	r3,8(r6)
  80802c:	30800317 	ldw	r2,12(r6)
  808030:	800f883a 	mov	r7,r16
  808034:	84000204 	addi	r16,r16,8
  808038:	10c00215 	stw	r3,8(r2)
  80803c:	18800315 	stw	r2,12(r3)
  808040:	003f2306 	br	807cd0 <_realloc_r+0x84>
  808044:	8809883a 	mov	r4,r17
  808048:	900b883a 	mov	r5,r18
  80804c:	0806b000 	call	806b00 <memmove>
  808050:	003fd006 	br	807f94 <_realloc_r+0x348>
  808054:	30800117 	ldw	r2,4(r6)
  808058:	e0c00404 	addi	r3,fp,16
  80805c:	1108703a 	and	r4,r2,r4
  808060:	9905883a 	add	r2,r19,r4
  808064:	10ff4d16 	blt	r2,r3,807d9c <_realloc_r+0x150>
  808068:	1705c83a 	sub	r2,r2,fp
  80806c:	870b883a 	add	r5,r16,fp
  808070:	10800054 	ori	r2,r2,1
  808074:	28800115 	stw	r2,4(r5)
  808078:	80c00117 	ldw	r3,4(r16)
  80807c:	00802074 	movhi	r2,129
  808080:	10b8e004 	addi	r2,r2,-7296
  808084:	b009883a 	mov	r4,r22
  808088:	18c0004c 	andi	r3,r3,1
  80808c:	e0c6b03a 	or	r3,fp,r3
  808090:	11400215 	stw	r5,8(r2)
  808094:	80c00115 	stw	r3,4(r16)
  808098:	080ae8c0 	call	80ae8c <__malloc_unlock>
  80809c:	84400204 	addi	r17,r16,8
  8080a0:	003f2006 	br	807d24 <_realloc_r+0xd8>
  8080a4:	98a9883a 	add	r20,r19,r2
  8080a8:	2509883a 	add	r4,r4,r20
  8080ac:	e0800404 	addi	r2,fp,16
  8080b0:	d9000115 	stw	r4,4(sp)
  8080b4:	20bf7016 	blt	r4,r2,807e78 <_realloc_r+0x22c>
  8080b8:	b8c00317 	ldw	r3,12(r23)
  8080bc:	b8800217 	ldw	r2,8(r23)
  8080c0:	99bfff04 	addi	r6,r19,-4
  8080c4:	01400904 	movi	r5,36
  8080c8:	18800215 	stw	r2,8(r3)
  8080cc:	10c00315 	stw	r3,12(r2)
  8080d0:	bc400204 	addi	r17,r23,8
  8080d4:	29804136 	bltu	r5,r6,8081dc <_realloc_r+0x590>
  8080d8:	008004c4 	movi	r2,19
  8080dc:	9009883a 	mov	r4,r18
  8080e0:	880f883a 	mov	r7,r17
  8080e4:	11800f2e 	bgeu	r2,r6,808124 <_realloc_r+0x4d8>
  8080e8:	90800017 	ldw	r2,0(r18)
  8080ec:	b9c00404 	addi	r7,r23,16
  8080f0:	91000204 	addi	r4,r18,8
  8080f4:	b8800215 	stw	r2,8(r23)
  8080f8:	90c00117 	ldw	r3,4(r18)
  8080fc:	008006c4 	movi	r2,27
  808100:	b8c00315 	stw	r3,12(r23)
  808104:	1180072e 	bgeu	r2,r6,808124 <_realloc_r+0x4d8>
  808108:	90c00217 	ldw	r3,8(r18)
  80810c:	b9c00604 	addi	r7,r23,24
  808110:	91000404 	addi	r4,r18,16
  808114:	b8c00415 	stw	r3,16(r23)
  808118:	90800317 	ldw	r2,12(r18)
  80811c:	b8800515 	stw	r2,20(r23)
  808120:	31404026 	beq	r6,r5,808224 <_realloc_r+0x5d8>
  808124:	20800017 	ldw	r2,0(r4)
  808128:	38800015 	stw	r2,0(r7)
  80812c:	20c00117 	ldw	r3,4(r4)
  808130:	38c00115 	stw	r3,4(r7)
  808134:	20800217 	ldw	r2,8(r4)
  808138:	38800215 	stw	r2,8(r7)
  80813c:	d8c00117 	ldw	r3,4(sp)
  808140:	bf0b883a 	add	r5,r23,fp
  808144:	b009883a 	mov	r4,r22
  808148:	1f05c83a 	sub	r2,r3,fp
  80814c:	10800054 	ori	r2,r2,1
  808150:	28800115 	stw	r2,4(r5)
  808154:	b8c00117 	ldw	r3,4(r23)
  808158:	00802074 	movhi	r2,129
  80815c:	10b8e004 	addi	r2,r2,-7296
  808160:	11400215 	stw	r5,8(r2)
  808164:	18c0004c 	andi	r3,r3,1
  808168:	e0c6b03a 	or	r3,fp,r3
  80816c:	b8c00115 	stw	r3,4(r23)
  808170:	080ae8c0 	call	80ae8c <__malloc_unlock>
  808174:	003eeb06 	br	807d24 <_realloc_r+0xd8>
  808178:	20800117 	ldw	r2,4(r4)
  80817c:	00ffff04 	movi	r3,-4
  808180:	800f883a 	mov	r7,r16
  808184:	10c4703a 	and	r2,r2,r3
  808188:	98a9883a 	add	r20,r19,r2
  80818c:	84000204 	addi	r16,r16,8
  808190:	003ecf06 	br	807cd0 <_realloc_r+0x84>
  808194:	900b883a 	mov	r5,r18
  808198:	8009883a 	mov	r4,r16
  80819c:	0806b000 	call	806b00 <memmove>
  8081a0:	dd000017 	ldw	r20,0(sp)
  8081a4:	b80f883a 	mov	r7,r23
  8081a8:	003ec906 	br	807cd0 <_realloc_r+0x84>
  8081ac:	900b883a 	mov	r5,r18
  8081b0:	8009883a 	mov	r4,r16
  8081b4:	0806b000 	call	806b00 <memmove>
  8081b8:	b80f883a 	mov	r7,r23
  8081bc:	003ec406 	br	807cd0 <_realloc_r+0x84>
  8081c0:	90c00417 	ldw	r3,16(r18)
  8081c4:	89400604 	addi	r5,r17,24
  8081c8:	91000604 	addi	r4,r18,24
  8081cc:	88c00415 	stw	r3,16(r17)
  8081d0:	90800517 	ldw	r2,20(r18)
  8081d4:	88800515 	stw	r2,20(r17)
  8081d8:	003f6806 	br	807f7c <_realloc_r+0x330>
  8081dc:	900b883a 	mov	r5,r18
  8081e0:	8809883a 	mov	r4,r17
  8081e4:	0806b000 	call	806b00 <memmove>
  8081e8:	003fd406 	br	80813c <_realloc_r+0x4f0>
  8081ec:	90c00417 	ldw	r3,16(r18)
  8081f0:	91000604 	addi	r4,r18,24
  8081f4:	ba000804 	addi	r8,r23,32
  8081f8:	b8c00615 	stw	r3,24(r23)
  8081fc:	90800517 	ldw	r2,20(r18)
  808200:	b8800715 	stw	r2,28(r23)
  808204:	003f1206 	br	807e50 <_realloc_r+0x204>
  808208:	90c00417 	ldw	r3,16(r18)
  80820c:	91000604 	addi	r4,r18,24
  808210:	ba000804 	addi	r8,r23,32
  808214:	b8c00615 	stw	r3,24(r23)
  808218:	90800517 	ldw	r2,20(r18)
  80821c:	b8800715 	stw	r2,28(r23)
  808220:	003f3206 	br	807eec <_realloc_r+0x2a0>
  808224:	90c00417 	ldw	r3,16(r18)
  808228:	91000604 	addi	r4,r18,24
  80822c:	b9c00804 	addi	r7,r23,32
  808230:	b8c00615 	stw	r3,24(r23)
  808234:	90800517 	ldw	r2,20(r18)
  808238:	b8800715 	stw	r2,28(r23)
  80823c:	003fb906 	br	808124 <_realloc_r+0x4d8>

00808240 <__isinfd>:
  808240:	200d883a 	mov	r6,r4
  808244:	0109c83a 	sub	r4,zero,r4
  808248:	2188b03a 	or	r4,r4,r6
  80824c:	2008d7fa 	srli	r4,r4,31
  808250:	00a00034 	movhi	r2,32768
  808254:	10bfffc4 	addi	r2,r2,-1
  808258:	1144703a 	and	r2,r2,r5
  80825c:	2088b03a 	or	r4,r4,r2
  808260:	009ffc34 	movhi	r2,32752
  808264:	1105c83a 	sub	r2,r2,r4
  808268:	0087c83a 	sub	r3,zero,r2
  80826c:	10c4b03a 	or	r2,r2,r3
  808270:	1004d7fa 	srli	r2,r2,31
  808274:	00c00044 	movi	r3,1
  808278:	1885c83a 	sub	r2,r3,r2
  80827c:	f800283a 	ret

00808280 <__isnand>:
  808280:	200d883a 	mov	r6,r4
  808284:	0109c83a 	sub	r4,zero,r4
  808288:	2188b03a 	or	r4,r4,r6
  80828c:	2008d7fa 	srli	r4,r4,31
  808290:	00a00034 	movhi	r2,32768
  808294:	10bfffc4 	addi	r2,r2,-1
  808298:	1144703a 	and	r2,r2,r5
  80829c:	2088b03a 	or	r4,r4,r2
  8082a0:	009ffc34 	movhi	r2,32752
  8082a4:	1105c83a 	sub	r2,r2,r4
  8082a8:	1004d7fa 	srli	r2,r2,31
  8082ac:	f800283a 	ret

008082b0 <strcmp>:
  8082b0:	2144b03a 	or	r2,r4,r5
  8082b4:	108000cc 	andi	r2,r2,3
  8082b8:	10001d1e 	bne	r2,zero,808330 <strcmp+0x80>
  8082bc:	200f883a 	mov	r7,r4
  8082c0:	28800017 	ldw	r2,0(r5)
  8082c4:	21000017 	ldw	r4,0(r4)
  8082c8:	280d883a 	mov	r6,r5
  8082cc:	2080161e 	bne	r4,r2,808328 <strcmp+0x78>
  8082d0:	023fbff4 	movhi	r8,65279
  8082d4:	423fbfc4 	addi	r8,r8,-257
  8082d8:	2207883a 	add	r3,r4,r8
  8082dc:	01602074 	movhi	r5,32897
  8082e0:	29602004 	addi	r5,r5,-32640
  8082e4:	1946703a 	and	r3,r3,r5
  8082e8:	0104303a 	nor	r2,zero,r4
  8082ec:	10c4703a 	and	r2,r2,r3
  8082f0:	10001c1e 	bne	r2,zero,808364 <strcmp+0xb4>
  8082f4:	4013883a 	mov	r9,r8
  8082f8:	2811883a 	mov	r8,r5
  8082fc:	00000106 	br	808304 <strcmp+0x54>
  808300:	1800181e 	bne	r3,zero,808364 <strcmp+0xb4>
  808304:	39c00104 	addi	r7,r7,4
  808308:	39000017 	ldw	r4,0(r7)
  80830c:	31800104 	addi	r6,r6,4
  808310:	31400017 	ldw	r5,0(r6)
  808314:	2245883a 	add	r2,r4,r9
  808318:	1204703a 	and	r2,r2,r8
  80831c:	0106303a 	nor	r3,zero,r4
  808320:	1886703a 	and	r3,r3,r2
  808324:	217ff626 	beq	r4,r5,808300 <strcmp+0x50>
  808328:	3809883a 	mov	r4,r7
  80832c:	300b883a 	mov	r5,r6
  808330:	20c00007 	ldb	r3,0(r4)
  808334:	1800051e 	bne	r3,zero,80834c <strcmp+0x9c>
  808338:	00000606 	br	808354 <strcmp+0xa4>
  80833c:	21000044 	addi	r4,r4,1
  808340:	20c00007 	ldb	r3,0(r4)
  808344:	29400044 	addi	r5,r5,1
  808348:	18000226 	beq	r3,zero,808354 <strcmp+0xa4>
  80834c:	28800007 	ldb	r2,0(r5)
  808350:	18bffa26 	beq	r3,r2,80833c <strcmp+0x8c>
  808354:	20c00003 	ldbu	r3,0(r4)
  808358:	28800003 	ldbu	r2,0(r5)
  80835c:	1885c83a 	sub	r2,r3,r2
  808360:	f800283a 	ret
  808364:	0005883a 	mov	r2,zero
  808368:	f800283a 	ret

0080836c <_calloc_r>:
  80836c:	298b383a 	mul	r5,r5,r6
  808370:	defffe04 	addi	sp,sp,-8
  808374:	dc000015 	stw	r16,0(sp)
  808378:	dfc00115 	stw	ra,4(sp)
  80837c:	08014500 	call	801450 <_malloc_r>
  808380:	1021883a 	mov	r16,r2
  808384:	01c00904 	movi	r7,36
  808388:	10000d26 	beq	r2,zero,8083c0 <_calloc_r+0x54>
  80838c:	10ffff17 	ldw	r3,-4(r2)
  808390:	1009883a 	mov	r4,r2
  808394:	00bfff04 	movi	r2,-4
  808398:	1886703a 	and	r3,r3,r2
  80839c:	1887883a 	add	r3,r3,r2
  8083a0:	180d883a 	mov	r6,r3
  8083a4:	000b883a 	mov	r5,zero
  8083a8:	38c01736 	bltu	r7,r3,808408 <_calloc_r+0x9c>
  8083ac:	008004c4 	movi	r2,19
  8083b0:	10c00836 	bltu	r2,r3,8083d4 <_calloc_r+0x68>
  8083b4:	20000215 	stw	zero,8(r4)
  8083b8:	20000015 	stw	zero,0(r4)
  8083bc:	20000115 	stw	zero,4(r4)
  8083c0:	8005883a 	mov	r2,r16
  8083c4:	dfc00117 	ldw	ra,4(sp)
  8083c8:	dc000017 	ldw	r16,0(sp)
  8083cc:	dec00204 	addi	sp,sp,8
  8083d0:	f800283a 	ret
  8083d4:	008006c4 	movi	r2,27
  8083d8:	80000015 	stw	zero,0(r16)
  8083dc:	80000115 	stw	zero,4(r16)
  8083e0:	81000204 	addi	r4,r16,8
  8083e4:	10fff32e 	bgeu	r2,r3,8083b4 <_calloc_r+0x48>
  8083e8:	80000215 	stw	zero,8(r16)
  8083ec:	80000315 	stw	zero,12(r16)
  8083f0:	81000404 	addi	r4,r16,16
  8083f4:	19ffef1e 	bne	r3,r7,8083b4 <_calloc_r+0x48>
  8083f8:	81000604 	addi	r4,r16,24
  8083fc:	80000415 	stw	zero,16(r16)
  808400:	80000515 	stw	zero,20(r16)
  808404:	003feb06 	br	8083b4 <_calloc_r+0x48>
  808408:	0801d140 	call	801d14 <memset>
  80840c:	8005883a 	mov	r2,r16
  808410:	dfc00117 	ldw	ra,4(sp)
  808414:	dc000017 	ldw	r16,0(sp)
  808418:	dec00204 	addi	sp,sp,8
  80841c:	f800283a 	ret

00808420 <_fstat_r>:
  808420:	defffd04 	addi	sp,sp,-12
  808424:	dc000015 	stw	r16,0(sp)
  808428:	04002074 	movhi	r16,129
  80842c:	84074f04 	addi	r16,r16,7484
  808430:	dc400115 	stw	r17,4(sp)
  808434:	80000015 	stw	zero,0(r16)
  808438:	2023883a 	mov	r17,r4
  80843c:	2809883a 	mov	r4,r5
  808440:	300b883a 	mov	r5,r6
  808444:	dfc00215 	stw	ra,8(sp)
  808448:	080a9700 	call	80a970 <fstat>
  80844c:	1007883a 	mov	r3,r2
  808450:	00bfffc4 	movi	r2,-1
  808454:	18800626 	beq	r3,r2,808470 <_fstat_r+0x50>
  808458:	1805883a 	mov	r2,r3
  80845c:	dfc00217 	ldw	ra,8(sp)
  808460:	dc400117 	ldw	r17,4(sp)
  808464:	dc000017 	ldw	r16,0(sp)
  808468:	dec00304 	addi	sp,sp,12
  80846c:	f800283a 	ret
  808470:	80800017 	ldw	r2,0(r16)
  808474:	103ff826 	beq	r2,zero,808458 <_fstat_r+0x38>
  808478:	88800015 	stw	r2,0(r17)
  80847c:	1805883a 	mov	r2,r3
  808480:	dfc00217 	ldw	ra,8(sp)
  808484:	dc400117 	ldw	r17,4(sp)
  808488:	dc000017 	ldw	r16,0(sp)
  80848c:	dec00304 	addi	sp,sp,12
  808490:	f800283a 	ret

00808494 <_isatty_r>:
  808494:	defffd04 	addi	sp,sp,-12
  808498:	dc000015 	stw	r16,0(sp)
  80849c:	04002074 	movhi	r16,129
  8084a0:	84074f04 	addi	r16,r16,7484
  8084a4:	dc400115 	stw	r17,4(sp)
  8084a8:	80000015 	stw	zero,0(r16)
  8084ac:	2023883a 	mov	r17,r4
  8084b0:	2809883a 	mov	r4,r5
  8084b4:	dfc00215 	stw	ra,8(sp)
  8084b8:	080aaa40 	call	80aaa4 <isatty>
  8084bc:	1007883a 	mov	r3,r2
  8084c0:	00bfffc4 	movi	r2,-1
  8084c4:	18800626 	beq	r3,r2,8084e0 <_isatty_r+0x4c>
  8084c8:	1805883a 	mov	r2,r3
  8084cc:	dfc00217 	ldw	ra,8(sp)
  8084d0:	dc400117 	ldw	r17,4(sp)
  8084d4:	dc000017 	ldw	r16,0(sp)
  8084d8:	dec00304 	addi	sp,sp,12
  8084dc:	f800283a 	ret
  8084e0:	80800017 	ldw	r2,0(r16)
  8084e4:	103ff826 	beq	r2,zero,8084c8 <_isatty_r+0x34>
  8084e8:	88800015 	stw	r2,0(r17)
  8084ec:	1805883a 	mov	r2,r3
  8084f0:	dfc00217 	ldw	ra,8(sp)
  8084f4:	dc400117 	ldw	r17,4(sp)
  8084f8:	dc000017 	ldw	r16,0(sp)
  8084fc:	dec00304 	addi	sp,sp,12
  808500:	f800283a 	ret

00808504 <__udivdi3>:
  808504:	defff004 	addi	sp,sp,-64
  808508:	2005883a 	mov	r2,r4
  80850c:	3011883a 	mov	r8,r6
  808510:	df000e15 	stw	fp,56(sp)
  808514:	dd000a15 	stw	r20,40(sp)
  808518:	dc000615 	stw	r16,24(sp)
  80851c:	dfc00f15 	stw	ra,60(sp)
  808520:	ddc00d15 	stw	r23,52(sp)
  808524:	dd800c15 	stw	r22,48(sp)
  808528:	dd400b15 	stw	r21,44(sp)
  80852c:	dcc00915 	stw	r19,36(sp)
  808530:	dc800815 	stw	r18,32(sp)
  808534:	dc400715 	stw	r17,28(sp)
  808538:	4021883a 	mov	r16,r8
  80853c:	1039883a 	mov	fp,r2
  808540:	2829883a 	mov	r20,r5
  808544:	38003b1e 	bne	r7,zero,808634 <__udivdi3+0x130>
  808548:	2a005c36 	bltu	r5,r8,8086bc <__udivdi3+0x1b8>
  80854c:	4000a626 	beq	r8,zero,8087e8 <__udivdi3+0x2e4>
  808550:	00bfffd4 	movui	r2,65535
  808554:	14009e36 	bltu	r2,r16,8087d0 <__udivdi3+0x2cc>
  808558:	00803fc4 	movi	r2,255
  80855c:	14013d36 	bltu	r2,r16,808a54 <__udivdi3+0x550>
  808560:	000b883a 	mov	r5,zero
  808564:	0005883a 	mov	r2,zero
  808568:	8084d83a 	srl	r2,r16,r2
  80856c:	01002074 	movhi	r4,129
  808570:	21355604 	addi	r4,r4,-10920
  808574:	01800804 	movi	r6,32
  808578:	1105883a 	add	r2,r2,r4
  80857c:	10c00003 	ldbu	r3,0(r2)
  808580:	28c7883a 	add	r3,r5,r3
  808584:	30edc83a 	sub	r22,r6,r3
  808588:	b000ee1e 	bne	r22,zero,808944 <__udivdi3+0x440>
  80858c:	802ad43a 	srli	r21,r16,16
  808590:	00800044 	movi	r2,1
  808594:	a423c83a 	sub	r17,r20,r16
  808598:	85ffffcc 	andi	r23,r16,65535
  80859c:	d8800315 	stw	r2,12(sp)
  8085a0:	8809883a 	mov	r4,r17
  8085a4:	a80b883a 	mov	r5,r21
  8085a8:	0800e6c0 	call	800e6c <__udivsi3>
  8085ac:	8809883a 	mov	r4,r17
  8085b0:	a80b883a 	mov	r5,r21
  8085b4:	102d883a 	mov	r22,r2
  8085b8:	0800e740 	call	800e74 <__umodsi3>
  8085bc:	1004943a 	slli	r2,r2,16
  8085c0:	e006d43a 	srli	r3,fp,16
  8085c4:	bda3383a 	mul	r17,r23,r22
  8085c8:	10c4b03a 	or	r2,r2,r3
  8085cc:	1440042e 	bgeu	r2,r17,8085e0 <__udivdi3+0xdc>
  8085d0:	1405883a 	add	r2,r2,r16
  8085d4:	b5bfffc4 	addi	r22,r22,-1
  8085d8:	14000136 	bltu	r2,r16,8085e0 <__udivdi3+0xdc>
  8085dc:	14413d36 	bltu	r2,r17,808ad4 <__udivdi3+0x5d0>
  8085e0:	1463c83a 	sub	r17,r2,r17
  8085e4:	8809883a 	mov	r4,r17
  8085e8:	a80b883a 	mov	r5,r21
  8085ec:	0800e6c0 	call	800e6c <__udivsi3>
  8085f0:	8809883a 	mov	r4,r17
  8085f4:	a80b883a 	mov	r5,r21
  8085f8:	1029883a 	mov	r20,r2
  8085fc:	0800e740 	call	800e74 <__umodsi3>
  808600:	1004943a 	slli	r2,r2,16
  808604:	bd09383a 	mul	r4,r23,r20
  808608:	e0ffffcc 	andi	r3,fp,65535
  80860c:	10c4b03a 	or	r2,r2,r3
  808610:	1100042e 	bgeu	r2,r4,808624 <__udivdi3+0x120>
  808614:	8085883a 	add	r2,r16,r2
  808618:	a53fffc4 	addi	r20,r20,-1
  80861c:	14000136 	bltu	r2,r16,808624 <__udivdi3+0x120>
  808620:	11012036 	bltu	r2,r4,808aa4 <__udivdi3+0x5a0>
  808624:	b004943a 	slli	r2,r22,16
  808628:	d9000317 	ldw	r4,12(sp)
  80862c:	a084b03a 	or	r2,r20,r2
  808630:	00001506 	br	808688 <__udivdi3+0x184>
  808634:	380d883a 	mov	r6,r7
  808638:	29c06236 	bltu	r5,r7,8087c4 <__udivdi3+0x2c0>
  80863c:	00bfffd4 	movui	r2,65535
  808640:	11c05a36 	bltu	r2,r7,8087ac <__udivdi3+0x2a8>
  808644:	00803fc4 	movi	r2,255
  808648:	11c0fc36 	bltu	r2,r7,808a3c <__udivdi3+0x538>
  80864c:	000b883a 	mov	r5,zero
  808650:	0005883a 	mov	r2,zero
  808654:	3084d83a 	srl	r2,r6,r2
  808658:	01002074 	movhi	r4,129
  80865c:	21355604 	addi	r4,r4,-10920
  808660:	01c00804 	movi	r7,32
  808664:	1105883a 	add	r2,r2,r4
  808668:	10c00003 	ldbu	r3,0(r2)
  80866c:	28c7883a 	add	r3,r5,r3
  808670:	38efc83a 	sub	r23,r7,r3
  808674:	b800691e 	bne	r23,zero,80881c <__udivdi3+0x318>
  808678:	35000136 	bltu	r6,r20,808680 <__udivdi3+0x17c>
  80867c:	e4005136 	bltu	fp,r16,8087c4 <__udivdi3+0x2c0>
  808680:	00800044 	movi	r2,1
  808684:	0009883a 	mov	r4,zero
  808688:	2007883a 	mov	r3,r4
  80868c:	dfc00f17 	ldw	ra,60(sp)
  808690:	df000e17 	ldw	fp,56(sp)
  808694:	ddc00d17 	ldw	r23,52(sp)
  808698:	dd800c17 	ldw	r22,48(sp)
  80869c:	dd400b17 	ldw	r21,44(sp)
  8086a0:	dd000a17 	ldw	r20,40(sp)
  8086a4:	dcc00917 	ldw	r19,36(sp)
  8086a8:	dc800817 	ldw	r18,32(sp)
  8086ac:	dc400717 	ldw	r17,28(sp)
  8086b0:	dc000617 	ldw	r16,24(sp)
  8086b4:	dec01004 	addi	sp,sp,64
  8086b8:	f800283a 	ret
  8086bc:	00bfffd4 	movui	r2,65535
  8086c0:	12005036 	bltu	r2,r8,808804 <__udivdi3+0x300>
  8086c4:	00803fc4 	movi	r2,255
  8086c8:	1200e836 	bltu	r2,r8,808a6c <__udivdi3+0x568>
  8086cc:	000b883a 	mov	r5,zero
  8086d0:	0005883a 	mov	r2,zero
  8086d4:	8084d83a 	srl	r2,r16,r2
  8086d8:	01002074 	movhi	r4,129
  8086dc:	21355604 	addi	r4,r4,-10920
  8086e0:	01800804 	movi	r6,32
  8086e4:	1105883a 	add	r2,r2,r4
  8086e8:	10c00003 	ldbu	r3,0(r2)
  8086ec:	28c7883a 	add	r3,r5,r3
  8086f0:	30cbc83a 	sub	r5,r6,r3
  8086f4:	28000626 	beq	r5,zero,808710 <__udivdi3+0x20c>
  8086f8:	3145c83a 	sub	r2,r6,r5
  8086fc:	e084d83a 	srl	r2,fp,r2
  808700:	a146983a 	sll	r3,r20,r5
  808704:	e178983a 	sll	fp,fp,r5
  808708:	8160983a 	sll	r16,r16,r5
  80870c:	18a8b03a 	or	r20,r3,r2
  808710:	802ad43a 	srli	r21,r16,16
  808714:	a009883a 	mov	r4,r20
  808718:	85ffffcc 	andi	r23,r16,65535
  80871c:	a80b883a 	mov	r5,r21
  808720:	0800e6c0 	call	800e6c <__udivsi3>
  808724:	a009883a 	mov	r4,r20
  808728:	a80b883a 	mov	r5,r21
  80872c:	102d883a 	mov	r22,r2
  808730:	0800e740 	call	800e74 <__umodsi3>
  808734:	1004943a 	slli	r2,r2,16
  808738:	e006d43a 	srli	r3,fp,16
  80873c:	bda3383a 	mul	r17,r23,r22
  808740:	10c4b03a 	or	r2,r2,r3
  808744:	1440042e 	bgeu	r2,r17,808758 <__udivdi3+0x254>
  808748:	1405883a 	add	r2,r2,r16
  80874c:	b5bfffc4 	addi	r22,r22,-1
  808750:	14000136 	bltu	r2,r16,808758 <__udivdi3+0x254>
  808754:	1440d536 	bltu	r2,r17,808aac <__udivdi3+0x5a8>
  808758:	1463c83a 	sub	r17,r2,r17
  80875c:	8809883a 	mov	r4,r17
  808760:	a80b883a 	mov	r5,r21
  808764:	0800e6c0 	call	800e6c <__udivsi3>
  808768:	8809883a 	mov	r4,r17
  80876c:	a80b883a 	mov	r5,r21
  808770:	1029883a 	mov	r20,r2
  808774:	0800e740 	call	800e74 <__umodsi3>
  808778:	1004943a 	slli	r2,r2,16
  80877c:	bd09383a 	mul	r4,r23,r20
  808780:	e0ffffcc 	andi	r3,fp,65535
  808784:	10c4b03a 	or	r2,r2,r3
  808788:	1100042e 	bgeu	r2,r4,80879c <__udivdi3+0x298>
  80878c:	8085883a 	add	r2,r16,r2
  808790:	a53fffc4 	addi	r20,r20,-1
  808794:	14000136 	bltu	r2,r16,80879c <__udivdi3+0x298>
  808798:	1100c736 	bltu	r2,r4,808ab8 <__udivdi3+0x5b4>
  80879c:	b004943a 	slli	r2,r22,16
  8087a0:	0009883a 	mov	r4,zero
  8087a4:	a084b03a 	or	r2,r20,r2
  8087a8:	003fb706 	br	808688 <__udivdi3+0x184>
  8087ac:	00804034 	movhi	r2,256
  8087b0:	10bfffc4 	addi	r2,r2,-1
  8087b4:	11c0a436 	bltu	r2,r7,808a48 <__udivdi3+0x544>
  8087b8:	01400404 	movi	r5,16
  8087bc:	2805883a 	mov	r2,r5
  8087c0:	003fa406 	br	808654 <__udivdi3+0x150>
  8087c4:	0005883a 	mov	r2,zero
  8087c8:	0009883a 	mov	r4,zero
  8087cc:	003fae06 	br	808688 <__udivdi3+0x184>
  8087d0:	00804034 	movhi	r2,256
  8087d4:	10bfffc4 	addi	r2,r2,-1
  8087d8:	1400a136 	bltu	r2,r16,808a60 <__udivdi3+0x55c>
  8087dc:	01400404 	movi	r5,16
  8087e0:	2805883a 	mov	r2,r5
  8087e4:	003f6006 	br	808568 <__udivdi3+0x64>
  8087e8:	01000044 	movi	r4,1
  8087ec:	000b883a 	mov	r5,zero
  8087f0:	0800e6c0 	call	800e6c <__udivsi3>
  8087f4:	1021883a 	mov	r16,r2
  8087f8:	00bfffd4 	movui	r2,65535
  8087fc:	143ff436 	bltu	r2,r16,8087d0 <__udivdi3+0x2cc>
  808800:	003f5506 	br	808558 <__udivdi3+0x54>
  808804:	00804034 	movhi	r2,256
  808808:	10bfffc4 	addi	r2,r2,-1
  80880c:	12009a36 	bltu	r2,r8,808a78 <__udivdi3+0x574>
  808810:	01400404 	movi	r5,16
  808814:	2805883a 	mov	r2,r5
  808818:	003fae06 	br	8086d4 <__udivdi3+0x1d0>
  80881c:	3dc5c83a 	sub	r2,r7,r23
  808820:	35c8983a 	sll	r4,r6,r23
  808824:	8086d83a 	srl	r3,r16,r2
  808828:	a0a2d83a 	srl	r17,r20,r2
  80882c:	e084d83a 	srl	r2,fp,r2
  808830:	20eab03a 	or	r21,r4,r3
  808834:	a82cd43a 	srli	r22,r21,16
  808838:	a5c6983a 	sll	r3,r20,r23
  80883c:	8809883a 	mov	r4,r17
  808840:	b00b883a 	mov	r5,r22
  808844:	1886b03a 	or	r3,r3,r2
  808848:	d8c00215 	stw	r3,8(sp)
  80884c:	0800e6c0 	call	800e6c <__udivsi3>
  808850:	8809883a 	mov	r4,r17
  808854:	b00b883a 	mov	r5,r22
  808858:	1029883a 	mov	r20,r2
  80885c:	0800e740 	call	800e74 <__umodsi3>
  808860:	a8ffffcc 	andi	r3,r21,65535
  808864:	d8c00515 	stw	r3,20(sp)
  808868:	d9000217 	ldw	r4,8(sp)
  80886c:	d9400517 	ldw	r5,20(sp)
  808870:	1004943a 	slli	r2,r2,16
  808874:	2006d43a 	srli	r3,r4,16
  808878:	85e0983a 	sll	r16,r16,r23
  80887c:	2d23383a 	mul	r17,r5,r20
  808880:	10c4b03a 	or	r2,r2,r3
  808884:	dc000015 	stw	r16,0(sp)
  808888:	1440032e 	bgeu	r2,r17,808898 <__udivdi3+0x394>
  80888c:	1545883a 	add	r2,r2,r21
  808890:	a53fffc4 	addi	r20,r20,-1
  808894:	15407f2e 	bgeu	r2,r21,808a94 <__udivdi3+0x590>
  808898:	1463c83a 	sub	r17,r2,r17
  80889c:	8809883a 	mov	r4,r17
  8088a0:	b00b883a 	mov	r5,r22
  8088a4:	0800e6c0 	call	800e6c <__udivsi3>
  8088a8:	8809883a 	mov	r4,r17
  8088ac:	b00b883a 	mov	r5,r22
  8088b0:	1021883a 	mov	r16,r2
  8088b4:	0800e740 	call	800e74 <__umodsi3>
  8088b8:	d8c00517 	ldw	r3,20(sp)
  8088bc:	d9000217 	ldw	r4,8(sp)
  8088c0:	1004943a 	slli	r2,r2,16
  8088c4:	1c0f383a 	mul	r7,r3,r16
  8088c8:	20ffffcc 	andi	r3,r4,65535
  8088cc:	10e2b03a 	or	r17,r2,r3
  8088d0:	89c0032e 	bgeu	r17,r7,8088e0 <__udivdi3+0x3dc>
  8088d4:	8d63883a 	add	r17,r17,r21
  8088d8:	843fffc4 	addi	r16,r16,-1
  8088dc:	8d40692e 	bgeu	r17,r21,808a84 <__udivdi3+0x580>
  8088e0:	a008943a 	slli	r4,r20,16
  8088e4:	d9400017 	ldw	r5,0(sp)
  8088e8:	89e3c83a 	sub	r17,r17,r7
  8088ec:	8110b03a 	or	r8,r16,r4
  8088f0:	280cd43a 	srli	r6,r5,16
  8088f4:	28ffffcc 	andi	r3,r5,65535
  8088f8:	40bfffcc 	andi	r2,r8,65535
  8088fc:	400ad43a 	srli	r5,r8,16
  808900:	10d3383a 	mul	r9,r2,r3
  808904:	1185383a 	mul	r2,r2,r6
  808908:	28c7383a 	mul	r3,r5,r3
  80890c:	4808d43a 	srli	r4,r9,16
  808910:	298b383a 	mul	r5,r5,r6
  808914:	10c5883a 	add	r2,r2,r3
  808918:	2089883a 	add	r4,r4,r2
  80891c:	20c0022e 	bgeu	r4,r3,808928 <__udivdi3+0x424>
  808920:	00800074 	movhi	r2,1
  808924:	288b883a 	add	r5,r5,r2
  808928:	2004d43a 	srli	r2,r4,16
  80892c:	288b883a 	add	r5,r5,r2
  808930:	89403f36 	bltu	r17,r5,808a30 <__udivdi3+0x52c>
  808934:	89403926 	beq	r17,r5,808a1c <__udivdi3+0x518>
  808938:	4005883a 	mov	r2,r8
  80893c:	0009883a 	mov	r4,zero
  808940:	003f5106 	br	808688 <__udivdi3+0x184>
  808944:	85a0983a 	sll	r16,r16,r22
  808948:	3585c83a 	sub	r2,r6,r22
  80894c:	a0a2d83a 	srl	r17,r20,r2
  808950:	802ad43a 	srli	r21,r16,16
  808954:	e084d83a 	srl	r2,fp,r2
  808958:	a586983a 	sll	r3,r20,r22
  80895c:	8809883a 	mov	r4,r17
  808960:	a80b883a 	mov	r5,r21
  808964:	1886b03a 	or	r3,r3,r2
  808968:	d8c00115 	stw	r3,4(sp)
  80896c:	0800e6c0 	call	800e6c <__udivsi3>
  808970:	8809883a 	mov	r4,r17
  808974:	a80b883a 	mov	r5,r21
  808978:	d8800415 	stw	r2,16(sp)
  80897c:	0800e740 	call	800e74 <__umodsi3>
  808980:	d9000117 	ldw	r4,4(sp)
  808984:	d9400417 	ldw	r5,16(sp)
  808988:	1004943a 	slli	r2,r2,16
  80898c:	85ffffcc 	andi	r23,r16,65535
  808990:	2006d43a 	srli	r3,r4,16
  808994:	b963383a 	mul	r17,r23,r5
  808998:	10c4b03a 	or	r2,r2,r3
  80899c:	1440042e 	bgeu	r2,r17,8089b0 <__udivdi3+0x4ac>
  8089a0:	297fffc4 	addi	r5,r5,-1
  8089a4:	1405883a 	add	r2,r2,r16
  8089a8:	d9400415 	stw	r5,16(sp)
  8089ac:	1400442e 	bgeu	r2,r16,808ac0 <__udivdi3+0x5bc>
  8089b0:	1463c83a 	sub	r17,r2,r17
  8089b4:	8809883a 	mov	r4,r17
  8089b8:	a80b883a 	mov	r5,r21
  8089bc:	0800e6c0 	call	800e6c <__udivsi3>
  8089c0:	8809883a 	mov	r4,r17
  8089c4:	a80b883a 	mov	r5,r21
  8089c8:	1029883a 	mov	r20,r2
  8089cc:	0800e740 	call	800e74 <__umodsi3>
  8089d0:	d9400117 	ldw	r5,4(sp)
  8089d4:	1004943a 	slli	r2,r2,16
  8089d8:	bd09383a 	mul	r4,r23,r20
  8089dc:	28ffffcc 	andi	r3,r5,65535
  8089e0:	10c6b03a 	or	r3,r2,r3
  8089e4:	1900062e 	bgeu	r3,r4,808a00 <__udivdi3+0x4fc>
  8089e8:	1c07883a 	add	r3,r3,r16
  8089ec:	a53fffc4 	addi	r20,r20,-1
  8089f0:	1c000336 	bltu	r3,r16,808a00 <__udivdi3+0x4fc>
  8089f4:	1900022e 	bgeu	r3,r4,808a00 <__udivdi3+0x4fc>
  8089f8:	a53fffc4 	addi	r20,r20,-1
  8089fc:	1c07883a 	add	r3,r3,r16
  808a00:	d9400417 	ldw	r5,16(sp)
  808a04:	e5b8983a 	sll	fp,fp,r22
  808a08:	1923c83a 	sub	r17,r3,r4
  808a0c:	2804943a 	slli	r2,r5,16
  808a10:	a0a8b03a 	or	r20,r20,r2
  808a14:	dd000315 	stw	r20,12(sp)
  808a18:	003ee106 	br	8085a0 <__udivdi3+0x9c>
  808a1c:	2004943a 	slli	r2,r4,16
  808a20:	e5c8983a 	sll	r4,fp,r23
  808a24:	48ffffcc 	andi	r3,r9,65535
  808a28:	10c5883a 	add	r2,r2,r3
  808a2c:	20bfc22e 	bgeu	r4,r2,808938 <__udivdi3+0x434>
  808a30:	40bfffc4 	addi	r2,r8,-1
  808a34:	0009883a 	mov	r4,zero
  808a38:	003f1306 	br	808688 <__udivdi3+0x184>
  808a3c:	01400204 	movi	r5,8
  808a40:	2805883a 	mov	r2,r5
  808a44:	003f0306 	br	808654 <__udivdi3+0x150>
  808a48:	01400604 	movi	r5,24
  808a4c:	2805883a 	mov	r2,r5
  808a50:	003f0006 	br	808654 <__udivdi3+0x150>
  808a54:	01400204 	movi	r5,8
  808a58:	2805883a 	mov	r2,r5
  808a5c:	003ec206 	br	808568 <__udivdi3+0x64>
  808a60:	01400604 	movi	r5,24
  808a64:	2805883a 	mov	r2,r5
  808a68:	003ebf06 	br	808568 <__udivdi3+0x64>
  808a6c:	01400204 	movi	r5,8
  808a70:	2805883a 	mov	r2,r5
  808a74:	003f1706 	br	8086d4 <__udivdi3+0x1d0>
  808a78:	01400604 	movi	r5,24
  808a7c:	2805883a 	mov	r2,r5
  808a80:	003f1406 	br	8086d4 <__udivdi3+0x1d0>
  808a84:	89ff962e 	bgeu	r17,r7,8088e0 <__udivdi3+0x3dc>
  808a88:	8d63883a 	add	r17,r17,r21
  808a8c:	843fffc4 	addi	r16,r16,-1
  808a90:	003f9306 	br	8088e0 <__udivdi3+0x3dc>
  808a94:	147f802e 	bgeu	r2,r17,808898 <__udivdi3+0x394>
  808a98:	a53fffc4 	addi	r20,r20,-1
  808a9c:	1545883a 	add	r2,r2,r21
  808aa0:	003f7d06 	br	808898 <__udivdi3+0x394>
  808aa4:	a53fffc4 	addi	r20,r20,-1
  808aa8:	003ede06 	br	808624 <__udivdi3+0x120>
  808aac:	b5bfffc4 	addi	r22,r22,-1
  808ab0:	1405883a 	add	r2,r2,r16
  808ab4:	003f2806 	br	808758 <__udivdi3+0x254>
  808ab8:	a53fffc4 	addi	r20,r20,-1
  808abc:	003f3706 	br	80879c <__udivdi3+0x298>
  808ac0:	147fbb2e 	bgeu	r2,r17,8089b0 <__udivdi3+0x4ac>
  808ac4:	297fffc4 	addi	r5,r5,-1
  808ac8:	1405883a 	add	r2,r2,r16
  808acc:	d9400415 	stw	r5,16(sp)
  808ad0:	003fb706 	br	8089b0 <__udivdi3+0x4ac>
  808ad4:	b5bfffc4 	addi	r22,r22,-1
  808ad8:	1405883a 	add	r2,r2,r16
  808adc:	003ec006 	br	8085e0 <__udivdi3+0xdc>

00808ae0 <__umoddi3>:
  808ae0:	defff104 	addi	sp,sp,-60
  808ae4:	dd800b15 	stw	r22,44(sp)
  808ae8:	dd000915 	stw	r20,36(sp)
  808aec:	dc000515 	stw	r16,20(sp)
  808af0:	dfc00e15 	stw	ra,56(sp)
  808af4:	df000d15 	stw	fp,52(sp)
  808af8:	ddc00c15 	stw	r23,48(sp)
  808afc:	dd400a15 	stw	r21,40(sp)
  808b00:	dcc00815 	stw	r19,32(sp)
  808b04:	dc800715 	stw	r18,28(sp)
  808b08:	dc400615 	stw	r17,24(sp)
  808b0c:	3021883a 	mov	r16,r6
  808b10:	202d883a 	mov	r22,r4
  808b14:	2829883a 	mov	r20,r5
  808b18:	38002b1e 	bne	r7,zero,808bc8 <__umoddi3+0xe8>
  808b1c:	29805036 	bltu	r5,r6,808c60 <__umoddi3+0x180>
  808b20:	30008a26 	beq	r6,zero,808d4c <__umoddi3+0x26c>
  808b24:	00bfffd4 	movui	r2,65535
  808b28:	14008236 	bltu	r2,r16,808d34 <__umoddi3+0x254>
  808b2c:	00803fc4 	movi	r2,255
  808b30:	14013636 	bltu	r2,r16,80900c <__umoddi3+0x52c>
  808b34:	000b883a 	mov	r5,zero
  808b38:	0005883a 	mov	r2,zero
  808b3c:	8084d83a 	srl	r2,r16,r2
  808b40:	01002074 	movhi	r4,129
  808b44:	21355604 	addi	r4,r4,-10920
  808b48:	01800804 	movi	r6,32
  808b4c:	1105883a 	add	r2,r2,r4
  808b50:	10c00003 	ldbu	r3,0(r2)
  808b54:	28c7883a 	add	r3,r5,r3
  808b58:	30efc83a 	sub	r23,r6,r3
  808b5c:	b800941e 	bne	r23,zero,808db0 <__umoddi3+0x2d0>
  808b60:	802ad43a 	srli	r21,r16,16
  808b64:	a423c83a 	sub	r17,r20,r16
  808b68:	0039883a 	mov	fp,zero
  808b6c:	853fffcc 	andi	r20,r16,65535
  808b70:	8809883a 	mov	r4,r17
  808b74:	a80b883a 	mov	r5,r21
  808b78:	0800e6c0 	call	800e6c <__udivsi3>
  808b7c:	8809883a 	mov	r4,r17
  808b80:	a80b883a 	mov	r5,r21
  808b84:	a0a3383a 	mul	r17,r20,r2
  808b88:	0800e740 	call	800e74 <__umodsi3>
  808b8c:	1004943a 	slli	r2,r2,16
  808b90:	b006d43a 	srli	r3,r22,16
  808b94:	10c4b03a 	or	r2,r2,r3
  808b98:	1440032e 	bgeu	r2,r17,808ba8 <__umoddi3+0xc8>
  808b9c:	1405883a 	add	r2,r2,r16
  808ba0:	14000136 	bltu	r2,r16,808ba8 <__umoddi3+0xc8>
  808ba4:	14413536 	bltu	r2,r17,80907c <__umoddi3+0x59c>
  808ba8:	1463c83a 	sub	r17,r2,r17
  808bac:	8809883a 	mov	r4,r17
  808bb0:	a80b883a 	mov	r5,r21
  808bb4:	0800e6c0 	call	800e6c <__udivsi3>
  808bb8:	8809883a 	mov	r4,r17
  808bbc:	a0a3383a 	mul	r17,r20,r2
  808bc0:	a80b883a 	mov	r5,r21
  808bc4:	00004d06 	br	808cfc <__umoddi3+0x21c>
  808bc8:	380d883a 	mov	r6,r7
  808bcc:	29c0102e 	bgeu	r5,r7,808c10 <__umoddi3+0x130>
  808bd0:	2011883a 	mov	r8,r4
  808bd4:	2813883a 	mov	r9,r5
  808bd8:	4005883a 	mov	r2,r8
  808bdc:	4807883a 	mov	r3,r9
  808be0:	dfc00e17 	ldw	ra,56(sp)
  808be4:	df000d17 	ldw	fp,52(sp)
  808be8:	ddc00c17 	ldw	r23,48(sp)
  808bec:	dd800b17 	ldw	r22,44(sp)
  808bf0:	dd400a17 	ldw	r21,40(sp)
  808bf4:	dd000917 	ldw	r20,36(sp)
  808bf8:	dcc00817 	ldw	r19,32(sp)
  808bfc:	dc800717 	ldw	r18,28(sp)
  808c00:	dc400617 	ldw	r17,24(sp)
  808c04:	dc000517 	ldw	r16,20(sp)
  808c08:	dec00f04 	addi	sp,sp,60
  808c0c:	f800283a 	ret
  808c10:	00bfffd4 	movui	r2,65535
  808c14:	11c05a36 	bltu	r2,r7,808d80 <__umoddi3+0x2a0>
  808c18:	00803fc4 	movi	r2,255
  808c1c:	11c0fe36 	bltu	r2,r7,809018 <__umoddi3+0x538>
  808c20:	000b883a 	mov	r5,zero
  808c24:	0005883a 	mov	r2,zero
  808c28:	3084d83a 	srl	r2,r6,r2
  808c2c:	01002074 	movhi	r4,129
  808c30:	21355604 	addi	r4,r4,-10920
  808c34:	01c00804 	movi	r7,32
  808c38:	1105883a 	add	r2,r2,r4
  808c3c:	10c00003 	ldbu	r3,0(r2)
  808c40:	28c7883a 	add	r3,r5,r3
  808c44:	38ebc83a 	sub	r21,r7,r3
  808c48:	a800851e 	bne	r21,zero,808e60 <__umoddi3+0x380>
  808c4c:	35005236 	bltu	r6,r20,808d98 <__umoddi3+0x2b8>
  808c50:	b400512e 	bgeu	r22,r16,808d98 <__umoddi3+0x2b8>
  808c54:	b011883a 	mov	r8,r22
  808c58:	a013883a 	mov	r9,r20
  808c5c:	003fde06 	br	808bd8 <__umoddi3+0xf8>
  808c60:	00bfffd4 	movui	r2,65535
  808c64:	11804036 	bltu	r2,r6,808d68 <__umoddi3+0x288>
  808c68:	00803fc4 	movi	r2,255
  808c6c:	1180ed36 	bltu	r2,r6,809024 <__umoddi3+0x544>
  808c70:	000b883a 	mov	r5,zero
  808c74:	0005883a 	mov	r2,zero
  808c78:	8084d83a 	srl	r2,r16,r2
  808c7c:	01002074 	movhi	r4,129
  808c80:	21355604 	addi	r4,r4,-10920
  808c84:	01800804 	movi	r6,32
  808c88:	1105883a 	add	r2,r2,r4
  808c8c:	10c00003 	ldbu	r3,0(r2)
  808c90:	28c7883a 	add	r3,r5,r3
  808c94:	30c7c83a 	sub	r3,r6,r3
  808c98:	1800bf1e 	bne	r3,zero,808f98 <__umoddi3+0x4b8>
  808c9c:	0039883a 	mov	fp,zero
  808ca0:	802ad43a 	srli	r21,r16,16
  808ca4:	a009883a 	mov	r4,r20
  808ca8:	85ffffcc 	andi	r23,r16,65535
  808cac:	a80b883a 	mov	r5,r21
  808cb0:	0800e6c0 	call	800e6c <__udivsi3>
  808cb4:	a009883a 	mov	r4,r20
  808cb8:	a80b883a 	mov	r5,r21
  808cbc:	b8a3383a 	mul	r17,r23,r2
  808cc0:	0800e740 	call	800e74 <__umodsi3>
  808cc4:	1004943a 	slli	r2,r2,16
  808cc8:	b006d43a 	srli	r3,r22,16
  808ccc:	10c4b03a 	or	r2,r2,r3
  808cd0:	1440032e 	bgeu	r2,r17,808ce0 <__umoddi3+0x200>
  808cd4:	1405883a 	add	r2,r2,r16
  808cd8:	14000136 	bltu	r2,r16,808ce0 <__umoddi3+0x200>
  808cdc:	1440e536 	bltu	r2,r17,809074 <__umoddi3+0x594>
  808ce0:	1463c83a 	sub	r17,r2,r17
  808ce4:	8809883a 	mov	r4,r17
  808ce8:	a80b883a 	mov	r5,r21
  808cec:	0800e6c0 	call	800e6c <__udivsi3>
  808cf0:	8809883a 	mov	r4,r17
  808cf4:	b8a3383a 	mul	r17,r23,r2
  808cf8:	a80b883a 	mov	r5,r21
  808cfc:	0800e740 	call	800e74 <__umodsi3>
  808d00:	1004943a 	slli	r2,r2,16
  808d04:	b0ffffcc 	andi	r3,r22,65535
  808d08:	10c4b03a 	or	r2,r2,r3
  808d0c:	1440042e 	bgeu	r2,r17,808d20 <__umoddi3+0x240>
  808d10:	1405883a 	add	r2,r2,r16
  808d14:	14000236 	bltu	r2,r16,808d20 <__umoddi3+0x240>
  808d18:	1440012e 	bgeu	r2,r17,808d20 <__umoddi3+0x240>
  808d1c:	1405883a 	add	r2,r2,r16
  808d20:	1445c83a 	sub	r2,r2,r17
  808d24:	1724d83a 	srl	r18,r2,fp
  808d28:	0013883a 	mov	r9,zero
  808d2c:	9011883a 	mov	r8,r18
  808d30:	003fa906 	br	808bd8 <__umoddi3+0xf8>
  808d34:	00804034 	movhi	r2,256
  808d38:	10bfffc4 	addi	r2,r2,-1
  808d3c:	1400b036 	bltu	r2,r16,809000 <__umoddi3+0x520>
  808d40:	01400404 	movi	r5,16
  808d44:	2805883a 	mov	r2,r5
  808d48:	003f7c06 	br	808b3c <__umoddi3+0x5c>
  808d4c:	01000044 	movi	r4,1
  808d50:	000b883a 	mov	r5,zero
  808d54:	0800e6c0 	call	800e6c <__udivsi3>
  808d58:	1021883a 	mov	r16,r2
  808d5c:	00bfffd4 	movui	r2,65535
  808d60:	143ff436 	bltu	r2,r16,808d34 <__umoddi3+0x254>
  808d64:	003f7106 	br	808b2c <__umoddi3+0x4c>
  808d68:	00804034 	movhi	r2,256
  808d6c:	10bfffc4 	addi	r2,r2,-1
  808d70:	1180af36 	bltu	r2,r6,809030 <__umoddi3+0x550>
  808d74:	01400404 	movi	r5,16
  808d78:	2805883a 	mov	r2,r5
  808d7c:	003fbe06 	br	808c78 <__umoddi3+0x198>
  808d80:	00804034 	movhi	r2,256
  808d84:	10bfffc4 	addi	r2,r2,-1
  808d88:	11c0ac36 	bltu	r2,r7,80903c <__umoddi3+0x55c>
  808d8c:	01400404 	movi	r5,16
  808d90:	2805883a 	mov	r2,r5
  808d94:	003fa406 	br	808c28 <__umoddi3+0x148>
  808d98:	b409c83a 	sub	r4,r22,r16
  808d9c:	b105803a 	cmpltu	r2,r22,r4
  808da0:	a187c83a 	sub	r3,r20,r6
  808da4:	18a9c83a 	sub	r20,r3,r2
  808da8:	202d883a 	mov	r22,r4
  808dac:	003fa906 	br	808c54 <__umoddi3+0x174>
  808db0:	85e0983a 	sll	r16,r16,r23
  808db4:	35c5c83a 	sub	r2,r6,r23
  808db8:	a0a2d83a 	srl	r17,r20,r2
  808dbc:	802ad43a 	srli	r21,r16,16
  808dc0:	b084d83a 	srl	r2,r22,r2
  808dc4:	a5c6983a 	sll	r3,r20,r23
  808dc8:	8809883a 	mov	r4,r17
  808dcc:	a80b883a 	mov	r5,r21
  808dd0:	1886b03a 	or	r3,r3,r2
  808dd4:	d8c00115 	stw	r3,4(sp)
  808dd8:	853fffcc 	andi	r20,r16,65535
  808ddc:	0800e6c0 	call	800e6c <__udivsi3>
  808de0:	8809883a 	mov	r4,r17
  808de4:	a80b883a 	mov	r5,r21
  808de8:	a0a3383a 	mul	r17,r20,r2
  808dec:	0800e740 	call	800e74 <__umodsi3>
  808df0:	d9000117 	ldw	r4,4(sp)
  808df4:	1004943a 	slli	r2,r2,16
  808df8:	b839883a 	mov	fp,r23
  808dfc:	2006d43a 	srli	r3,r4,16
  808e00:	10c4b03a 	or	r2,r2,r3
  808e04:	1440022e 	bgeu	r2,r17,808e10 <__umoddi3+0x330>
  808e08:	1405883a 	add	r2,r2,r16
  808e0c:	1400962e 	bgeu	r2,r16,809068 <__umoddi3+0x588>
  808e10:	1463c83a 	sub	r17,r2,r17
  808e14:	8809883a 	mov	r4,r17
  808e18:	a80b883a 	mov	r5,r21
  808e1c:	0800e6c0 	call	800e6c <__udivsi3>
  808e20:	8809883a 	mov	r4,r17
  808e24:	a80b883a 	mov	r5,r21
  808e28:	a0a3383a 	mul	r17,r20,r2
  808e2c:	0800e740 	call	800e74 <__umodsi3>
  808e30:	d9400117 	ldw	r5,4(sp)
  808e34:	1004943a 	slli	r2,r2,16
  808e38:	28ffffcc 	andi	r3,r5,65535
  808e3c:	10c4b03a 	or	r2,r2,r3
  808e40:	1440042e 	bgeu	r2,r17,808e54 <__umoddi3+0x374>
  808e44:	1405883a 	add	r2,r2,r16
  808e48:	14000236 	bltu	r2,r16,808e54 <__umoddi3+0x374>
  808e4c:	1440012e 	bgeu	r2,r17,808e54 <__umoddi3+0x374>
  808e50:	1405883a 	add	r2,r2,r16
  808e54:	b5ec983a 	sll	r22,r22,r23
  808e58:	1463c83a 	sub	r17,r2,r17
  808e5c:	003f4406 	br	808b70 <__umoddi3+0x90>
  808e60:	3d4fc83a 	sub	r7,r7,r21
  808e64:	3546983a 	sll	r3,r6,r21
  808e68:	81c4d83a 	srl	r2,r16,r7
  808e6c:	a1e2d83a 	srl	r17,r20,r7
  808e70:	a54c983a 	sll	r6,r20,r21
  808e74:	18aeb03a 	or	r23,r3,r2
  808e78:	b828d43a 	srli	r20,r23,16
  808e7c:	b1c4d83a 	srl	r2,r22,r7
  808e80:	8809883a 	mov	r4,r17
  808e84:	a00b883a 	mov	r5,r20
  808e88:	308cb03a 	or	r6,r6,r2
  808e8c:	d9c00315 	stw	r7,12(sp)
  808e90:	d9800215 	stw	r6,8(sp)
  808e94:	0800e6c0 	call	800e6c <__udivsi3>
  808e98:	8809883a 	mov	r4,r17
  808e9c:	a00b883a 	mov	r5,r20
  808ea0:	1039883a 	mov	fp,r2
  808ea4:	0800e740 	call	800e74 <__umodsi3>
  808ea8:	b8ffffcc 	andi	r3,r23,65535
  808eac:	d8c00415 	stw	r3,16(sp)
  808eb0:	d9000217 	ldw	r4,8(sp)
  808eb4:	d9400417 	ldw	r5,16(sp)
  808eb8:	1004943a 	slli	r2,r2,16
  808ebc:	2006d43a 	srli	r3,r4,16
  808ec0:	8560983a 	sll	r16,r16,r21
  808ec4:	2f23383a 	mul	r17,r5,fp
  808ec8:	10c4b03a 	or	r2,r2,r3
  808ecc:	dc000015 	stw	r16,0(sp)
  808ed0:	b56c983a 	sll	r22,r22,r21
  808ed4:	1440032e 	bgeu	r2,r17,808ee4 <__umoddi3+0x404>
  808ed8:	15c5883a 	add	r2,r2,r23
  808edc:	e73fffc4 	addi	fp,fp,-1
  808ee0:	15c05d2e 	bgeu	r2,r23,809058 <__umoddi3+0x578>
  808ee4:	1463c83a 	sub	r17,r2,r17
  808ee8:	8809883a 	mov	r4,r17
  808eec:	a00b883a 	mov	r5,r20
  808ef0:	0800e6c0 	call	800e6c <__udivsi3>
  808ef4:	8809883a 	mov	r4,r17
  808ef8:	a00b883a 	mov	r5,r20
  808efc:	1021883a 	mov	r16,r2
  808f00:	0800e740 	call	800e74 <__umodsi3>
  808f04:	d8c00417 	ldw	r3,16(sp)
  808f08:	d9000217 	ldw	r4,8(sp)
  808f0c:	1004943a 	slli	r2,r2,16
  808f10:	1c23383a 	mul	r17,r3,r16
  808f14:	20ffffcc 	andi	r3,r4,65535
  808f18:	10ceb03a 	or	r7,r2,r3
  808f1c:	3c40032e 	bgeu	r7,r17,808f2c <__umoddi3+0x44c>
  808f20:	3dcf883a 	add	r7,r7,r23
  808f24:	843fffc4 	addi	r16,r16,-1
  808f28:	3dc0472e 	bgeu	r7,r23,809048 <__umoddi3+0x568>
  808f2c:	e004943a 	slli	r2,fp,16
  808f30:	d9400017 	ldw	r5,0(sp)
  808f34:	3c4fc83a 	sub	r7,r7,r17
  808f38:	8084b03a 	or	r2,r16,r2
  808f3c:	28ffffcc 	andi	r3,r5,65535
  808f40:	280cd43a 	srli	r6,r5,16
  808f44:	100ad43a 	srli	r5,r2,16
  808f48:	10bfffcc 	andi	r2,r2,65535
  808f4c:	10d1383a 	mul	r8,r2,r3
  808f50:	28c7383a 	mul	r3,r5,r3
  808f54:	1185383a 	mul	r2,r2,r6
  808f58:	4008d43a 	srli	r4,r8,16
  808f5c:	298b383a 	mul	r5,r5,r6
  808f60:	10c5883a 	add	r2,r2,r3
  808f64:	2089883a 	add	r4,r4,r2
  808f68:	20c0022e 	bgeu	r4,r3,808f74 <__umoddi3+0x494>
  808f6c:	00800074 	movhi	r2,1
  808f70:	288b883a 	add	r5,r5,r2
  808f74:	2004d43a 	srli	r2,r4,16
  808f78:	2008943a 	slli	r4,r4,16
  808f7c:	40ffffcc 	andi	r3,r8,65535
  808f80:	288b883a 	add	r5,r5,r2
  808f84:	20c9883a 	add	r4,r4,r3
  808f88:	39400b36 	bltu	r7,r5,808fb8 <__umoddi3+0x4d8>
  808f8c:	39403d26 	beq	r7,r5,809084 <__umoddi3+0x5a4>
  808f90:	394bc83a 	sub	r5,r7,r5
  808f94:	00000f06 	br	808fd4 <__umoddi3+0x4f4>
  808f98:	30c5c83a 	sub	r2,r6,r3
  808f9c:	1839883a 	mov	fp,r3
  808fa0:	b084d83a 	srl	r2,r22,r2
  808fa4:	a0c6983a 	sll	r3,r20,r3
  808fa8:	8720983a 	sll	r16,r16,fp
  808fac:	b72c983a 	sll	r22,r22,fp
  808fb0:	18a8b03a 	or	r20,r3,r2
  808fb4:	003f3a06 	br	808ca0 <__umoddi3+0x1c0>
  808fb8:	d8c00017 	ldw	r3,0(sp)
  808fbc:	20c5c83a 	sub	r2,r4,r3
  808fc0:	2089803a 	cmpltu	r4,r4,r2
  808fc4:	2dc7c83a 	sub	r3,r5,r23
  808fc8:	1907c83a 	sub	r3,r3,r4
  808fcc:	38cbc83a 	sub	r5,r7,r3
  808fd0:	1009883a 	mov	r4,r2
  808fd4:	b105c83a 	sub	r2,r22,r4
  808fd8:	b087803a 	cmpltu	r3,r22,r2
  808fdc:	28c7c83a 	sub	r3,r5,r3
  808fe0:	d9400317 	ldw	r5,12(sp)
  808fe4:	1544d83a 	srl	r2,r2,r21
  808fe8:	1948983a 	sll	r4,r3,r5
  808fec:	1d46d83a 	srl	r3,r3,r21
  808ff0:	20a4b03a 	or	r18,r4,r2
  808ff4:	9011883a 	mov	r8,r18
  808ff8:	1813883a 	mov	r9,r3
  808ffc:	003ef606 	br	808bd8 <__umoddi3+0xf8>
  809000:	01400604 	movi	r5,24
  809004:	2805883a 	mov	r2,r5
  809008:	003ecc06 	br	808b3c <__umoddi3+0x5c>
  80900c:	01400204 	movi	r5,8
  809010:	2805883a 	mov	r2,r5
  809014:	003ec906 	br	808b3c <__umoddi3+0x5c>
  809018:	01400204 	movi	r5,8
  80901c:	2805883a 	mov	r2,r5
  809020:	003f0106 	br	808c28 <__umoddi3+0x148>
  809024:	01400204 	movi	r5,8
  809028:	2805883a 	mov	r2,r5
  80902c:	003f1206 	br	808c78 <__umoddi3+0x198>
  809030:	01400604 	movi	r5,24
  809034:	2805883a 	mov	r2,r5
  809038:	003f0f06 	br	808c78 <__umoddi3+0x198>
  80903c:	01400604 	movi	r5,24
  809040:	2805883a 	mov	r2,r5
  809044:	003ef806 	br	808c28 <__umoddi3+0x148>
  809048:	3c7fb82e 	bgeu	r7,r17,808f2c <__umoddi3+0x44c>
  80904c:	843fffc4 	addi	r16,r16,-1
  809050:	3dcf883a 	add	r7,r7,r23
  809054:	003fb506 	br	808f2c <__umoddi3+0x44c>
  809058:	147fa22e 	bgeu	r2,r17,808ee4 <__umoddi3+0x404>
  80905c:	e73fffc4 	addi	fp,fp,-1
  809060:	15c5883a 	add	r2,r2,r23
  809064:	003f9f06 	br	808ee4 <__umoddi3+0x404>
  809068:	147f692e 	bgeu	r2,r17,808e10 <__umoddi3+0x330>
  80906c:	1405883a 	add	r2,r2,r16
  809070:	003f6706 	br	808e10 <__umoddi3+0x330>
  809074:	1405883a 	add	r2,r2,r16
  809078:	003f1906 	br	808ce0 <__umoddi3+0x200>
  80907c:	1405883a 	add	r2,r2,r16
  809080:	003ec906 	br	808ba8 <__umoddi3+0xc8>
  809084:	b13fcc36 	bltu	r22,r4,808fb8 <__umoddi3+0x4d8>
  809088:	000b883a 	mov	r5,zero
  80908c:	003fd106 	br	808fd4 <__umoddi3+0x4f4>

00809090 <_fpadd_parts>:
  809090:	defff804 	addi	sp,sp,-32
  809094:	dcc00315 	stw	r19,12(sp)
  809098:	2027883a 	mov	r19,r4
  80909c:	21000017 	ldw	r4,0(r4)
  8090a0:	00c00044 	movi	r3,1
  8090a4:	dd400515 	stw	r21,20(sp)
  8090a8:	dd000415 	stw	r20,16(sp)
  8090ac:	ddc00715 	stw	r23,28(sp)
  8090b0:	dd800615 	stw	r22,24(sp)
  8090b4:	dc800215 	stw	r18,8(sp)
  8090b8:	dc400115 	stw	r17,4(sp)
  8090bc:	dc000015 	stw	r16,0(sp)
  8090c0:	282b883a 	mov	r21,r5
  8090c4:	3029883a 	mov	r20,r6
  8090c8:	1900632e 	bgeu	r3,r4,809258 <_fpadd_parts+0x1c8>
  8090cc:	28800017 	ldw	r2,0(r5)
  8090d0:	1880812e 	bgeu	r3,r2,8092d8 <_fpadd_parts+0x248>
  8090d4:	00c00104 	movi	r3,4
  8090d8:	20c0dc26 	beq	r4,r3,80944c <_fpadd_parts+0x3bc>
  8090dc:	10c07e26 	beq	r2,r3,8092d8 <_fpadd_parts+0x248>
  8090e0:	00c00084 	movi	r3,2
  8090e4:	10c06726 	beq	r2,r3,809284 <_fpadd_parts+0x1f4>
  8090e8:	20c07b26 	beq	r4,r3,8092d8 <_fpadd_parts+0x248>
  8090ec:	9dc00217 	ldw	r23,8(r19)
  8090f0:	28c00217 	ldw	r3,8(r5)
  8090f4:	9c400317 	ldw	r17,12(r19)
  8090f8:	2bc00317 	ldw	r15,12(r5)
  8090fc:	b8cdc83a 	sub	r6,r23,r3
  809100:	9c800417 	ldw	r18,16(r19)
  809104:	2c000417 	ldw	r16,16(r5)
  809108:	3009883a 	mov	r4,r6
  80910c:	30009716 	blt	r6,zero,80936c <_fpadd_parts+0x2dc>
  809110:	00800fc4 	movi	r2,63
  809114:	11806b16 	blt	r2,r6,8092c4 <_fpadd_parts+0x234>
  809118:	0100a40e 	bge	zero,r4,8093ac <_fpadd_parts+0x31c>
  80911c:	35bff804 	addi	r22,r6,-32
  809120:	b000bc16 	blt	r22,zero,809414 <_fpadd_parts+0x384>
  809124:	8596d83a 	srl	r11,r16,r22
  809128:	0019883a 	mov	r12,zero
  80912c:	0013883a 	mov	r9,zero
  809130:	01000044 	movi	r4,1
  809134:	0015883a 	mov	r10,zero
  809138:	b000be16 	blt	r22,zero,809434 <_fpadd_parts+0x3a4>
  80913c:	2590983a 	sll	r8,r4,r22
  809140:	000f883a 	mov	r7,zero
  809144:	00bfffc4 	movi	r2,-1
  809148:	3889883a 	add	r4,r7,r2
  80914c:	408b883a 	add	r5,r8,r2
  809150:	21cd803a 	cmpltu	r6,r4,r7
  809154:	314b883a 	add	r5,r6,r5
  809158:	7904703a 	and	r2,r15,r4
  80915c:	8146703a 	and	r3,r16,r5
  809160:	10c4b03a 	or	r2,r2,r3
  809164:	10000226 	beq	r2,zero,809170 <_fpadd_parts+0xe0>
  809168:	02400044 	movi	r9,1
  80916c:	0015883a 	mov	r10,zero
  809170:	5a5eb03a 	or	r15,r11,r9
  809174:	62a0b03a 	or	r16,r12,r10
  809178:	99400117 	ldw	r5,4(r19)
  80917c:	a8800117 	ldw	r2,4(r21)
  809180:	28806e26 	beq	r5,r2,80933c <_fpadd_parts+0x2ac>
  809184:	28006626 	beq	r5,zero,809320 <_fpadd_parts+0x290>
  809188:	7c45c83a 	sub	r2,r15,r17
  80918c:	7889803a 	cmpltu	r4,r15,r2
  809190:	8487c83a 	sub	r3,r16,r18
  809194:	1909c83a 	sub	r4,r3,r4
  809198:	100d883a 	mov	r6,r2
  80919c:	200f883a 	mov	r7,r4
  8091a0:	38007716 	blt	r7,zero,809380 <_fpadd_parts+0x2f0>
  8091a4:	a5c00215 	stw	r23,8(r20)
  8091a8:	a1c00415 	stw	r7,16(r20)
  8091ac:	a0000115 	stw	zero,4(r20)
  8091b0:	a1800315 	stw	r6,12(r20)
  8091b4:	a2000317 	ldw	r8,12(r20)
  8091b8:	a2400417 	ldw	r9,16(r20)
  8091bc:	00bfffc4 	movi	r2,-1
  8091c0:	408b883a 	add	r5,r8,r2
  8091c4:	2a09803a 	cmpltu	r4,r5,r8
  8091c8:	488d883a 	add	r6,r9,r2
  8091cc:	01c40034 	movhi	r7,4096
  8091d0:	39ffffc4 	addi	r7,r7,-1
  8091d4:	218d883a 	add	r6,r4,r6
  8091d8:	39801736 	bltu	r7,r6,809238 <_fpadd_parts+0x1a8>
  8091dc:	31c06526 	beq	r6,r7,809374 <_fpadd_parts+0x2e4>
  8091e0:	a3000217 	ldw	r12,8(r20)
  8091e4:	4209883a 	add	r4,r8,r8
  8091e8:	00bfffc4 	movi	r2,-1
  8091ec:	220f803a 	cmpltu	r7,r4,r8
  8091f0:	4a4b883a 	add	r5,r9,r9
  8091f4:	394f883a 	add	r7,r7,r5
  8091f8:	2095883a 	add	r10,r4,r2
  8091fc:	3897883a 	add	r11,r7,r2
  809200:	510d803a 	cmpltu	r6,r10,r4
  809204:	6099883a 	add	r12,r12,r2
  809208:	32d7883a 	add	r11,r6,r11
  80920c:	00840034 	movhi	r2,4096
  809210:	10bfffc4 	addi	r2,r2,-1
  809214:	2011883a 	mov	r8,r4
  809218:	3813883a 	mov	r9,r7
  80921c:	a1000315 	stw	r4,12(r20)
  809220:	a1c00415 	stw	r7,16(r20)
  809224:	a3000215 	stw	r12,8(r20)
  809228:	12c00336 	bltu	r2,r11,809238 <_fpadd_parts+0x1a8>
  80922c:	58bfed1e 	bne	r11,r2,8091e4 <_fpadd_parts+0x154>
  809230:	00bfff84 	movi	r2,-2
  809234:	12bfeb2e 	bgeu	r2,r10,8091e4 <_fpadd_parts+0x154>
  809238:	a2800417 	ldw	r10,16(r20)
  80923c:	008000c4 	movi	r2,3
  809240:	00c80034 	movhi	r3,8192
  809244:	18ffffc4 	addi	r3,r3,-1
  809248:	a2400317 	ldw	r9,12(r20)
  80924c:	a0800015 	stw	r2,0(r20)
  809250:	1a802336 	bltu	r3,r10,8092e0 <_fpadd_parts+0x250>
  809254:	a027883a 	mov	r19,r20
  809258:	9805883a 	mov	r2,r19
  80925c:	ddc00717 	ldw	r23,28(sp)
  809260:	dd800617 	ldw	r22,24(sp)
  809264:	dd400517 	ldw	r21,20(sp)
  809268:	dd000417 	ldw	r20,16(sp)
  80926c:	dcc00317 	ldw	r19,12(sp)
  809270:	dc800217 	ldw	r18,8(sp)
  809274:	dc400117 	ldw	r17,4(sp)
  809278:	dc000017 	ldw	r16,0(sp)
  80927c:	dec00804 	addi	sp,sp,32
  809280:	f800283a 	ret
  809284:	20fff41e 	bne	r4,r3,809258 <_fpadd_parts+0x1c8>
  809288:	31000015 	stw	r4,0(r6)
  80928c:	98800117 	ldw	r2,4(r19)
  809290:	30800115 	stw	r2,4(r6)
  809294:	98c00217 	ldw	r3,8(r19)
  809298:	30c00215 	stw	r3,8(r6)
  80929c:	98800317 	ldw	r2,12(r19)
  8092a0:	30800315 	stw	r2,12(r6)
  8092a4:	98c00417 	ldw	r3,16(r19)
  8092a8:	30c00415 	stw	r3,16(r6)
  8092ac:	98800117 	ldw	r2,4(r19)
  8092b0:	28c00117 	ldw	r3,4(r5)
  8092b4:	3027883a 	mov	r19,r6
  8092b8:	10c4703a 	and	r2,r2,r3
  8092bc:	30800115 	stw	r2,4(r6)
  8092c0:	003fe506 	br	809258 <_fpadd_parts+0x1c8>
  8092c4:	1dc02616 	blt	r3,r23,809360 <_fpadd_parts+0x2d0>
  8092c8:	0023883a 	mov	r17,zero
  8092cc:	182f883a 	mov	r23,r3
  8092d0:	0025883a 	mov	r18,zero
  8092d4:	003fa806 	br	809178 <_fpadd_parts+0xe8>
  8092d8:	a827883a 	mov	r19,r21
  8092dc:	003fde06 	br	809258 <_fpadd_parts+0x1c8>
  8092e0:	01800044 	movi	r6,1
  8092e4:	500497fa 	slli	r2,r10,31
  8092e8:	4808d07a 	srli	r4,r9,1
  8092ec:	518ad83a 	srl	r5,r10,r6
  8092f0:	a2000217 	ldw	r8,8(r20)
  8092f4:	1108b03a 	or	r4,r2,r4
  8092f8:	0007883a 	mov	r3,zero
  8092fc:	4984703a 	and	r2,r9,r6
  809300:	208cb03a 	or	r6,r4,r2
  809304:	28ceb03a 	or	r7,r5,r3
  809308:	42000044 	addi	r8,r8,1
  80930c:	a027883a 	mov	r19,r20
  809310:	a1c00415 	stw	r7,16(r20)
  809314:	a2000215 	stw	r8,8(r20)
  809318:	a1800315 	stw	r6,12(r20)
  80931c:	003fce06 	br	809258 <_fpadd_parts+0x1c8>
  809320:	8bc5c83a 	sub	r2,r17,r15
  809324:	8889803a 	cmpltu	r4,r17,r2
  809328:	9407c83a 	sub	r3,r18,r16
  80932c:	1909c83a 	sub	r4,r3,r4
  809330:	100d883a 	mov	r6,r2
  809334:	200f883a 	mov	r7,r4
  809338:	003f9906 	br	8091a0 <_fpadd_parts+0x110>
  80933c:	7c45883a 	add	r2,r15,r17
  809340:	13c9803a 	cmpltu	r4,r2,r15
  809344:	8487883a 	add	r3,r16,r18
  809348:	20c9883a 	add	r4,r4,r3
  80934c:	a1400115 	stw	r5,4(r20)
  809350:	a5c00215 	stw	r23,8(r20)
  809354:	a0800315 	stw	r2,12(r20)
  809358:	a1000415 	stw	r4,16(r20)
  80935c:	003fb606 	br	809238 <_fpadd_parts+0x1a8>
  809360:	001f883a 	mov	r15,zero
  809364:	0021883a 	mov	r16,zero
  809368:	003f8306 	br	809178 <_fpadd_parts+0xe8>
  80936c:	018dc83a 	sub	r6,zero,r6
  809370:	003f6706 	br	809110 <_fpadd_parts+0x80>
  809374:	00bfff84 	movi	r2,-2
  809378:	117faf36 	bltu	r2,r5,809238 <_fpadd_parts+0x1a8>
  80937c:	003f9806 	br	8091e0 <_fpadd_parts+0x150>
  809380:	0005883a 	mov	r2,zero
  809384:	1189c83a 	sub	r4,r2,r6
  809388:	1105803a 	cmpltu	r2,r2,r4
  80938c:	01cbc83a 	sub	r5,zero,r7
  809390:	2885c83a 	sub	r2,r5,r2
  809394:	01800044 	movi	r6,1
  809398:	a1800115 	stw	r6,4(r20)
  80939c:	a5c00215 	stw	r23,8(r20)
  8093a0:	a1000315 	stw	r4,12(r20)
  8093a4:	a0800415 	stw	r2,16(r20)
  8093a8:	003f8206 	br	8091b4 <_fpadd_parts+0x124>
  8093ac:	203f7226 	beq	r4,zero,809178 <_fpadd_parts+0xe8>
  8093b0:	35bff804 	addi	r22,r6,-32
  8093b4:	b9af883a 	add	r23,r23,r6
  8093b8:	b0003116 	blt	r22,zero,809480 <_fpadd_parts+0x3f0>
  8093bc:	959ad83a 	srl	r13,r18,r22
  8093c0:	001d883a 	mov	r14,zero
  8093c4:	000f883a 	mov	r7,zero
  8093c8:	01000044 	movi	r4,1
  8093cc:	0011883a 	mov	r8,zero
  8093d0:	b0002516 	blt	r22,zero,809468 <_fpadd_parts+0x3d8>
  8093d4:	2594983a 	sll	r10,r4,r22
  8093d8:	0013883a 	mov	r9,zero
  8093dc:	00bfffc4 	movi	r2,-1
  8093e0:	4889883a 	add	r4,r9,r2
  8093e4:	508b883a 	add	r5,r10,r2
  8093e8:	224d803a 	cmpltu	r6,r4,r9
  8093ec:	314b883a 	add	r5,r6,r5
  8093f0:	8904703a 	and	r2,r17,r4
  8093f4:	9146703a 	and	r3,r18,r5
  8093f8:	10c4b03a 	or	r2,r2,r3
  8093fc:	10000226 	beq	r2,zero,809408 <_fpadd_parts+0x378>
  809400:	01c00044 	movi	r7,1
  809404:	0011883a 	mov	r8,zero
  809408:	69e2b03a 	or	r17,r13,r7
  80940c:	7224b03a 	or	r18,r14,r8
  809410:	003f5906 	br	809178 <_fpadd_parts+0xe8>
  809414:	8407883a 	add	r3,r16,r16
  809418:	008007c4 	movi	r2,31
  80941c:	1185c83a 	sub	r2,r2,r6
  809420:	1886983a 	sll	r3,r3,r2
  809424:	7996d83a 	srl	r11,r15,r6
  809428:	8198d83a 	srl	r12,r16,r6
  80942c:	1ad6b03a 	or	r11,r3,r11
  809430:	003f3e06 	br	80912c <_fpadd_parts+0x9c>
  809434:	2006d07a 	srli	r3,r4,1
  809438:	008007c4 	movi	r2,31
  80943c:	1185c83a 	sub	r2,r2,r6
  809440:	1890d83a 	srl	r8,r3,r2
  809444:	218e983a 	sll	r7,r4,r6
  809448:	003f3e06 	br	809144 <_fpadd_parts+0xb4>
  80944c:	113f821e 	bne	r2,r4,809258 <_fpadd_parts+0x1c8>
  809450:	28c00117 	ldw	r3,4(r5)
  809454:	98800117 	ldw	r2,4(r19)
  809458:	10ff7f26 	beq	r2,r3,809258 <_fpadd_parts+0x1c8>
  80945c:	04c02074 	movhi	r19,129
  809460:	9cf55104 	addi	r19,r19,-10940
  809464:	003f7c06 	br	809258 <_fpadd_parts+0x1c8>
  809468:	2006d07a 	srli	r3,r4,1
  80946c:	008007c4 	movi	r2,31
  809470:	1185c83a 	sub	r2,r2,r6
  809474:	1894d83a 	srl	r10,r3,r2
  809478:	2192983a 	sll	r9,r4,r6
  80947c:	003fd706 	br	8093dc <_fpadd_parts+0x34c>
  809480:	9487883a 	add	r3,r18,r18
  809484:	008007c4 	movi	r2,31
  809488:	1185c83a 	sub	r2,r2,r6
  80948c:	1886983a 	sll	r3,r3,r2
  809490:	899ad83a 	srl	r13,r17,r6
  809494:	919cd83a 	srl	r14,r18,r6
  809498:	1b5ab03a 	or	r13,r3,r13
  80949c:	003fc906 	br	8093c4 <_fpadd_parts+0x334>

008094a0 <__subdf3>:
  8094a0:	deffea04 	addi	sp,sp,-88
  8094a4:	dcc01415 	stw	r19,80(sp)
  8094a8:	dcc00404 	addi	r19,sp,16
  8094ac:	2011883a 	mov	r8,r4
  8094b0:	2813883a 	mov	r9,r5
  8094b4:	dc401315 	stw	r17,76(sp)
  8094b8:	d809883a 	mov	r4,sp
  8094bc:	980b883a 	mov	r5,r19
  8094c0:	dc400904 	addi	r17,sp,36
  8094c4:	dfc01515 	stw	ra,84(sp)
  8094c8:	da400115 	stw	r9,4(sp)
  8094cc:	d9c00315 	stw	r7,12(sp)
  8094d0:	da000015 	stw	r8,0(sp)
  8094d4:	d9800215 	stw	r6,8(sp)
  8094d8:	080a5e80 	call	80a5e8 <__unpack_d>
  8094dc:	d9000204 	addi	r4,sp,8
  8094e0:	880b883a 	mov	r5,r17
  8094e4:	080a5e80 	call	80a5e8 <__unpack_d>
  8094e8:	d8800a17 	ldw	r2,40(sp)
  8094ec:	880b883a 	mov	r5,r17
  8094f0:	9809883a 	mov	r4,r19
  8094f4:	d9800e04 	addi	r6,sp,56
  8094f8:	1080005c 	xori	r2,r2,1
  8094fc:	d8800a15 	stw	r2,40(sp)
  809500:	08090900 	call	809090 <_fpadd_parts>
  809504:	1009883a 	mov	r4,r2
  809508:	080a2d40 	call	80a2d4 <__pack_d>
  80950c:	dfc01517 	ldw	ra,84(sp)
  809510:	dcc01417 	ldw	r19,80(sp)
  809514:	dc401317 	ldw	r17,76(sp)
  809518:	dec01604 	addi	sp,sp,88
  80951c:	f800283a 	ret

00809520 <__adddf3>:
  809520:	deffea04 	addi	sp,sp,-88
  809524:	dcc01415 	stw	r19,80(sp)
  809528:	dcc00404 	addi	r19,sp,16
  80952c:	2011883a 	mov	r8,r4
  809530:	2813883a 	mov	r9,r5
  809534:	dc401315 	stw	r17,76(sp)
  809538:	d809883a 	mov	r4,sp
  80953c:	980b883a 	mov	r5,r19
  809540:	dc400904 	addi	r17,sp,36
  809544:	dfc01515 	stw	ra,84(sp)
  809548:	da400115 	stw	r9,4(sp)
  80954c:	d9c00315 	stw	r7,12(sp)
  809550:	da000015 	stw	r8,0(sp)
  809554:	d9800215 	stw	r6,8(sp)
  809558:	080a5e80 	call	80a5e8 <__unpack_d>
  80955c:	d9000204 	addi	r4,sp,8
  809560:	880b883a 	mov	r5,r17
  809564:	080a5e80 	call	80a5e8 <__unpack_d>
  809568:	d9800e04 	addi	r6,sp,56
  80956c:	9809883a 	mov	r4,r19
  809570:	880b883a 	mov	r5,r17
  809574:	08090900 	call	809090 <_fpadd_parts>
  809578:	1009883a 	mov	r4,r2
  80957c:	080a2d40 	call	80a2d4 <__pack_d>
  809580:	dfc01517 	ldw	ra,84(sp)
  809584:	dcc01417 	ldw	r19,80(sp)
  809588:	dc401317 	ldw	r17,76(sp)
  80958c:	dec01604 	addi	sp,sp,88
  809590:	f800283a 	ret

00809594 <__muldf3>:
  809594:	deffe004 	addi	sp,sp,-128
  809598:	dc401815 	stw	r17,96(sp)
  80959c:	dc400404 	addi	r17,sp,16
  8095a0:	2011883a 	mov	r8,r4
  8095a4:	2813883a 	mov	r9,r5
  8095a8:	dc001715 	stw	r16,92(sp)
  8095ac:	d809883a 	mov	r4,sp
  8095b0:	880b883a 	mov	r5,r17
  8095b4:	dc000904 	addi	r16,sp,36
  8095b8:	dfc01f15 	stw	ra,124(sp)
  8095bc:	da400115 	stw	r9,4(sp)
  8095c0:	d9c00315 	stw	r7,12(sp)
  8095c4:	da000015 	stw	r8,0(sp)
  8095c8:	d9800215 	stw	r6,8(sp)
  8095cc:	ddc01e15 	stw	r23,120(sp)
  8095d0:	dd801d15 	stw	r22,116(sp)
  8095d4:	dd401c15 	stw	r21,112(sp)
  8095d8:	dd001b15 	stw	r20,108(sp)
  8095dc:	dcc01a15 	stw	r19,104(sp)
  8095e0:	dc801915 	stw	r18,100(sp)
  8095e4:	080a5e80 	call	80a5e8 <__unpack_d>
  8095e8:	d9000204 	addi	r4,sp,8
  8095ec:	800b883a 	mov	r5,r16
  8095f0:	080a5e80 	call	80a5e8 <__unpack_d>
  8095f4:	d9000417 	ldw	r4,16(sp)
  8095f8:	00800044 	movi	r2,1
  8095fc:	1100102e 	bgeu	r2,r4,809640 <__muldf3+0xac>
  809600:	d8c00917 	ldw	r3,36(sp)
  809604:	10c0062e 	bgeu	r2,r3,809620 <__muldf3+0x8c>
  809608:	00800104 	movi	r2,4
  80960c:	20800a26 	beq	r4,r2,809638 <__muldf3+0xa4>
  809610:	1880cc26 	beq	r3,r2,809944 <__muldf3+0x3b0>
  809614:	00800084 	movi	r2,2
  809618:	20800926 	beq	r4,r2,809640 <__muldf3+0xac>
  80961c:	1880191e 	bne	r3,r2,809684 <__muldf3+0xf0>
  809620:	d8c00a17 	ldw	r3,40(sp)
  809624:	d8800517 	ldw	r2,20(sp)
  809628:	8009883a 	mov	r4,r16
  80962c:	10c4c03a 	cmpne	r2,r2,r3
  809630:	d8800a15 	stw	r2,40(sp)
  809634:	00000706 	br	809654 <__muldf3+0xc0>
  809638:	00800084 	movi	r2,2
  80963c:	1880c326 	beq	r3,r2,80994c <__muldf3+0x3b8>
  809640:	d8800517 	ldw	r2,20(sp)
  809644:	d8c00a17 	ldw	r3,40(sp)
  809648:	8809883a 	mov	r4,r17
  80964c:	10c4c03a 	cmpne	r2,r2,r3
  809650:	d8800515 	stw	r2,20(sp)
  809654:	080a2d40 	call	80a2d4 <__pack_d>
  809658:	dfc01f17 	ldw	ra,124(sp)
  80965c:	ddc01e17 	ldw	r23,120(sp)
  809660:	dd801d17 	ldw	r22,116(sp)
  809664:	dd401c17 	ldw	r21,112(sp)
  809668:	dd001b17 	ldw	r20,108(sp)
  80966c:	dcc01a17 	ldw	r19,104(sp)
  809670:	dc801917 	ldw	r18,100(sp)
  809674:	dc401817 	ldw	r17,96(sp)
  809678:	dc001717 	ldw	r16,92(sp)
  80967c:	dec02004 	addi	sp,sp,128
  809680:	f800283a 	ret
  809684:	dd800717 	ldw	r22,28(sp)
  809688:	dc800c17 	ldw	r18,48(sp)
  80968c:	002b883a 	mov	r21,zero
  809690:	0023883a 	mov	r17,zero
  809694:	a80b883a 	mov	r5,r21
  809698:	b00d883a 	mov	r6,r22
  80969c:	880f883a 	mov	r7,r17
  8096a0:	ddc00817 	ldw	r23,32(sp)
  8096a4:	dcc00d17 	ldw	r19,52(sp)
  8096a8:	9009883a 	mov	r4,r18
  8096ac:	080a1bc0 	call	80a1bc <__muldi3>
  8096b0:	001b883a 	mov	r13,zero
  8096b4:	680f883a 	mov	r7,r13
  8096b8:	b009883a 	mov	r4,r22
  8096bc:	000b883a 	mov	r5,zero
  8096c0:	980d883a 	mov	r6,r19
  8096c4:	b82d883a 	mov	r22,r23
  8096c8:	002f883a 	mov	r23,zero
  8096cc:	db401615 	stw	r13,88(sp)
  8096d0:	d8801315 	stw	r2,76(sp)
  8096d4:	d8c01415 	stw	r3,80(sp)
  8096d8:	dcc01515 	stw	r19,84(sp)
  8096dc:	080a1bc0 	call	80a1bc <__muldi3>
  8096e0:	b00d883a 	mov	r6,r22
  8096e4:	000b883a 	mov	r5,zero
  8096e8:	9009883a 	mov	r4,r18
  8096ec:	b80f883a 	mov	r7,r23
  8096f0:	1021883a 	mov	r16,r2
  8096f4:	1823883a 	mov	r17,r3
  8096f8:	080a1bc0 	call	80a1bc <__muldi3>
  8096fc:	8085883a 	add	r2,r16,r2
  809700:	140d803a 	cmpltu	r6,r2,r16
  809704:	88c7883a 	add	r3,r17,r3
  809708:	30cd883a 	add	r6,r6,r3
  80970c:	1029883a 	mov	r20,r2
  809710:	302b883a 	mov	r21,r6
  809714:	da801317 	ldw	r10,76(sp)
  809718:	dac01417 	ldw	r11,80(sp)
  80971c:	db001517 	ldw	r12,84(sp)
  809720:	db401617 	ldw	r13,88(sp)
  809724:	3440612e 	bgeu	r6,r17,8098ac <__muldf3+0x318>
  809728:	0009883a 	mov	r4,zero
  80972c:	5105883a 	add	r2,r10,r4
  809730:	128d803a 	cmpltu	r6,r2,r10
  809734:	5d07883a 	add	r3,r11,r20
  809738:	30cd883a 	add	r6,r6,r3
  80973c:	0021883a 	mov	r16,zero
  809740:	04400044 	movi	r17,1
  809744:	1025883a 	mov	r18,r2
  809748:	3027883a 	mov	r19,r6
  80974c:	32c06236 	bltu	r6,r11,8098d8 <__muldf3+0x344>
  809750:	59807a26 	beq	r11,r6,80993c <__muldf3+0x3a8>
  809754:	680b883a 	mov	r5,r13
  809758:	b80f883a 	mov	r7,r23
  80975c:	6009883a 	mov	r4,r12
  809760:	b00d883a 	mov	r6,r22
  809764:	080a1bc0 	call	80a1bc <__muldi3>
  809768:	1009883a 	mov	r4,r2
  80976c:	000f883a 	mov	r7,zero
  809770:	1545883a 	add	r2,r2,r21
  809774:	1111803a 	cmpltu	r8,r2,r4
  809778:	19c7883a 	add	r3,r3,r7
  80977c:	40c7883a 	add	r3,r8,r3
  809780:	88cb883a 	add	r5,r17,r3
  809784:	d8c00617 	ldw	r3,24(sp)
  809788:	8089883a 	add	r4,r16,r2
  80978c:	d8800b17 	ldw	r2,44(sp)
  809790:	18c00104 	addi	r3,r3,4
  809794:	240d803a 	cmpltu	r6,r4,r16
  809798:	10c7883a 	add	r3,r2,r3
  80979c:	2013883a 	mov	r9,r4
  8097a0:	d8800a17 	ldw	r2,40(sp)
  8097a4:	d9000517 	ldw	r4,20(sp)
  8097a8:	314d883a 	add	r6,r6,r5
  8097ac:	3015883a 	mov	r10,r6
  8097b0:	2088c03a 	cmpne	r4,r4,r2
  8097b4:	00880034 	movhi	r2,8192
  8097b8:	10bfffc4 	addi	r2,r2,-1
  8097bc:	d9000f15 	stw	r4,60(sp)
  8097c0:	d8c01015 	stw	r3,64(sp)
  8097c4:	1180162e 	bgeu	r2,r6,809820 <__muldf3+0x28c>
  8097c8:	1811883a 	mov	r8,r3
  8097cc:	101f883a 	mov	r15,r2
  8097d0:	980497fa 	slli	r2,r19,31
  8097d4:	9016d07a 	srli	r11,r18,1
  8097d8:	500697fa 	slli	r3,r10,31
  8097dc:	480cd07a 	srli	r6,r9,1
  8097e0:	500ed07a 	srli	r7,r10,1
  8097e4:	12d6b03a 	or	r11,r2,r11
  8097e8:	00800044 	movi	r2,1
  8097ec:	198cb03a 	or	r6,r3,r6
  8097f0:	4888703a 	and	r4,r9,r2
  8097f4:	9818d07a 	srli	r12,r19,1
  8097f8:	001b883a 	mov	r13,zero
  8097fc:	03a00034 	movhi	r14,32768
  809800:	3013883a 	mov	r9,r6
  809804:	3815883a 	mov	r10,r7
  809808:	4091883a 	add	r8,r8,r2
  80980c:	20000226 	beq	r4,zero,809818 <__muldf3+0x284>
  809810:	5b64b03a 	or	r18,r11,r13
  809814:	63a6b03a 	or	r19,r12,r14
  809818:	7abfed36 	bltu	r15,r10,8097d0 <__muldf3+0x23c>
  80981c:	da001015 	stw	r8,64(sp)
  809820:	00840034 	movhi	r2,4096
  809824:	10bfffc4 	addi	r2,r2,-1
  809828:	12801436 	bltu	r2,r10,80987c <__muldf3+0x2e8>
  80982c:	da001017 	ldw	r8,64(sp)
  809830:	101f883a 	mov	r15,r2
  809834:	4a45883a 	add	r2,r9,r9
  809838:	124d803a 	cmpltu	r6,r2,r9
  80983c:	5287883a 	add	r3,r10,r10
  809840:	9497883a 	add	r11,r18,r18
  809844:	5c8f803a 	cmpltu	r7,r11,r18
  809848:	9cd9883a 	add	r12,r19,r19
  80984c:	01000044 	movi	r4,1
  809850:	30cd883a 	add	r6,r6,r3
  809854:	3b0f883a 	add	r7,r7,r12
  809858:	423fffc4 	addi	r8,r8,-1
  80985c:	1013883a 	mov	r9,r2
  809860:	3015883a 	mov	r10,r6
  809864:	111ab03a 	or	r13,r2,r4
  809868:	98003016 	blt	r19,zero,80992c <__muldf3+0x398>
  80986c:	5825883a 	mov	r18,r11
  809870:	3827883a 	mov	r19,r7
  809874:	7abfef2e 	bgeu	r15,r10,809834 <__muldf3+0x2a0>
  809878:	da001015 	stw	r8,64(sp)
  80987c:	00803fc4 	movi	r2,255
  809880:	488e703a 	and	r7,r9,r2
  809884:	00802004 	movi	r2,128
  809888:	0007883a 	mov	r3,zero
  80988c:	0011883a 	mov	r8,zero
  809890:	38801826 	beq	r7,r2,8098f4 <__muldf3+0x360>
  809894:	008000c4 	movi	r2,3
  809898:	d9000e04 	addi	r4,sp,56
  80989c:	da801215 	stw	r10,72(sp)
  8098a0:	d8800e15 	stw	r2,56(sp)
  8098a4:	da401115 	stw	r9,68(sp)
  8098a8:	003f6a06 	br	809654 <__muldf3+0xc0>
  8098ac:	89802126 	beq	r17,r6,809934 <__muldf3+0x3a0>
  8098b0:	0009883a 	mov	r4,zero
  8098b4:	5105883a 	add	r2,r10,r4
  8098b8:	128d803a 	cmpltu	r6,r2,r10
  8098bc:	5d07883a 	add	r3,r11,r20
  8098c0:	30cd883a 	add	r6,r6,r3
  8098c4:	0021883a 	mov	r16,zero
  8098c8:	0023883a 	mov	r17,zero
  8098cc:	1025883a 	mov	r18,r2
  8098d0:	3027883a 	mov	r19,r6
  8098d4:	32ff9e2e 	bgeu	r6,r11,809750 <__muldf3+0x1bc>
  8098d8:	00800044 	movi	r2,1
  8098dc:	8089883a 	add	r4,r16,r2
  8098e0:	240d803a 	cmpltu	r6,r4,r16
  8098e4:	344d883a 	add	r6,r6,r17
  8098e8:	2021883a 	mov	r16,r4
  8098ec:	3023883a 	mov	r17,r6
  8098f0:	003f9806 	br	809754 <__muldf3+0x1c0>
  8098f4:	403fe71e 	bne	r8,zero,809894 <__muldf3+0x300>
  8098f8:	01004004 	movi	r4,256
  8098fc:	4904703a 	and	r2,r9,r4
  809900:	10c4b03a 	or	r2,r2,r3
  809904:	103fe31e 	bne	r2,zero,809894 <__muldf3+0x300>
  809908:	94c4b03a 	or	r2,r18,r19
  80990c:	103fe126 	beq	r2,zero,809894 <__muldf3+0x300>
  809910:	49c5883a 	add	r2,r9,r7
  809914:	1251803a 	cmpltu	r8,r2,r9
  809918:	4291883a 	add	r8,r8,r10
  80991c:	013fc004 	movi	r4,-256
  809920:	1112703a 	and	r9,r2,r4
  809924:	4015883a 	mov	r10,r8
  809928:	003fda06 	br	809894 <__muldf3+0x300>
  80992c:	6813883a 	mov	r9,r13
  809930:	003fce06 	br	80986c <__muldf3+0x2d8>
  809934:	143f7c36 	bltu	r2,r16,809728 <__muldf3+0x194>
  809938:	003fdd06 	br	8098b0 <__muldf3+0x31c>
  80993c:	12bf852e 	bgeu	r2,r10,809754 <__muldf3+0x1c0>
  809940:	003fe506 	br	8098d8 <__muldf3+0x344>
  809944:	00800084 	movi	r2,2
  809948:	20bf351e 	bne	r4,r2,809620 <__muldf3+0x8c>
  80994c:	01002074 	movhi	r4,129
  809950:	21355104 	addi	r4,r4,-10940
  809954:	003f3f06 	br	809654 <__muldf3+0xc0>

00809958 <__divdf3>:
  809958:	deffed04 	addi	sp,sp,-76
  80995c:	dcc01115 	stw	r19,68(sp)
  809960:	dcc00404 	addi	r19,sp,16
  809964:	2011883a 	mov	r8,r4
  809968:	2813883a 	mov	r9,r5
  80996c:	dc000e15 	stw	r16,56(sp)
  809970:	d809883a 	mov	r4,sp
  809974:	980b883a 	mov	r5,r19
  809978:	dc000904 	addi	r16,sp,36
  80997c:	dfc01215 	stw	ra,72(sp)
  809980:	da400115 	stw	r9,4(sp)
  809984:	d9c00315 	stw	r7,12(sp)
  809988:	da000015 	stw	r8,0(sp)
  80998c:	d9800215 	stw	r6,8(sp)
  809990:	dc801015 	stw	r18,64(sp)
  809994:	dc400f15 	stw	r17,60(sp)
  809998:	080a5e80 	call	80a5e8 <__unpack_d>
  80999c:	d9000204 	addi	r4,sp,8
  8099a0:	800b883a 	mov	r5,r16
  8099a4:	080a5e80 	call	80a5e8 <__unpack_d>
  8099a8:	d9000417 	ldw	r4,16(sp)
  8099ac:	00800044 	movi	r2,1
  8099b0:	11000b2e 	bgeu	r2,r4,8099e0 <__divdf3+0x88>
  8099b4:	d9400917 	ldw	r5,36(sp)
  8099b8:	1140762e 	bgeu	r2,r5,809b94 <__divdf3+0x23c>
  8099bc:	d8800517 	ldw	r2,20(sp)
  8099c0:	d8c00a17 	ldw	r3,40(sp)
  8099c4:	01800104 	movi	r6,4
  8099c8:	10c4f03a 	xor	r2,r2,r3
  8099cc:	d8800515 	stw	r2,20(sp)
  8099d0:	21800226 	beq	r4,r6,8099dc <__divdf3+0x84>
  8099d4:	00800084 	movi	r2,2
  8099d8:	2080141e 	bne	r4,r2,809a2c <__divdf3+0xd4>
  8099dc:	29000926 	beq	r5,r4,809a04 <__divdf3+0xac>
  8099e0:	9809883a 	mov	r4,r19
  8099e4:	080a2d40 	call	80a2d4 <__pack_d>
  8099e8:	dfc01217 	ldw	ra,72(sp)
  8099ec:	dcc01117 	ldw	r19,68(sp)
  8099f0:	dc801017 	ldw	r18,64(sp)
  8099f4:	dc400f17 	ldw	r17,60(sp)
  8099f8:	dc000e17 	ldw	r16,56(sp)
  8099fc:	dec01304 	addi	sp,sp,76
  809a00:	f800283a 	ret
  809a04:	01002074 	movhi	r4,129
  809a08:	21355104 	addi	r4,r4,-10940
  809a0c:	080a2d40 	call	80a2d4 <__pack_d>
  809a10:	dfc01217 	ldw	ra,72(sp)
  809a14:	dcc01117 	ldw	r19,68(sp)
  809a18:	dc801017 	ldw	r18,64(sp)
  809a1c:	dc400f17 	ldw	r17,60(sp)
  809a20:	dc000e17 	ldw	r16,56(sp)
  809a24:	dec01304 	addi	sp,sp,76
  809a28:	f800283a 	ret
  809a2c:	29805b26 	beq	r5,r6,809b9c <__divdf3+0x244>
  809a30:	28802d26 	beq	r5,r2,809ae8 <__divdf3+0x190>
  809a34:	d8c00617 	ldw	r3,24(sp)
  809a38:	d8800b17 	ldw	r2,44(sp)
  809a3c:	d9c00817 	ldw	r7,32(sp)
  809a40:	dc400d17 	ldw	r17,52(sp)
  809a44:	188bc83a 	sub	r5,r3,r2
  809a48:	d9800717 	ldw	r6,28(sp)
  809a4c:	dc000c17 	ldw	r16,48(sp)
  809a50:	d9400615 	stw	r5,24(sp)
  809a54:	3c403836 	bltu	r7,r17,809b38 <__divdf3+0x1e0>
  809a58:	89c03626 	beq	r17,r7,809b34 <__divdf3+0x1dc>
  809a5c:	0015883a 	mov	r10,zero
  809a60:	001d883a 	mov	r14,zero
  809a64:	02c40034 	movhi	r11,4096
  809a68:	001f883a 	mov	r15,zero
  809a6c:	003f883a 	mov	ra,zero
  809a70:	04800f44 	movi	r18,61
  809a74:	00000f06 	br	809ab4 <__divdf3+0x15c>
  809a78:	601d883a 	mov	r14,r12
  809a7c:	681f883a 	mov	r15,r13
  809a80:	400d883a 	mov	r6,r8
  809a84:	100f883a 	mov	r7,r2
  809a88:	3191883a 	add	r8,r6,r6
  809a8c:	5808d07a 	srli	r4,r11,1
  809a90:	4185803a 	cmpltu	r2,r8,r6
  809a94:	39d3883a 	add	r9,r7,r7
  809a98:	28c6b03a 	or	r3,r5,r3
  809a9c:	1245883a 	add	r2,r2,r9
  809aa0:	1815883a 	mov	r10,r3
  809aa4:	2017883a 	mov	r11,r4
  809aa8:	400d883a 	mov	r6,r8
  809aac:	100f883a 	mov	r7,r2
  809ab0:	fc801726 	beq	ra,r18,809b10 <__divdf3+0x1b8>
  809ab4:	580a97fa 	slli	r5,r11,31
  809ab8:	5006d07a 	srli	r3,r10,1
  809abc:	ffc00044 	addi	ra,ra,1
  809ac0:	3c7ff136 	bltu	r7,r17,809a88 <__divdf3+0x130>
  809ac4:	3411c83a 	sub	r8,r6,r16
  809ac8:	3205803a 	cmpltu	r2,r6,r8
  809acc:	3c53c83a 	sub	r9,r7,r17
  809ad0:	7298b03a 	or	r12,r14,r10
  809ad4:	7adab03a 	or	r13,r15,r11
  809ad8:	4885c83a 	sub	r2,r9,r2
  809adc:	89ffe61e 	bne	r17,r7,809a78 <__divdf3+0x120>
  809ae0:	343fe936 	bltu	r6,r16,809a88 <__divdf3+0x130>
  809ae4:	003fe406 	br	809a78 <__divdf3+0x120>
  809ae8:	9809883a 	mov	r4,r19
  809aec:	d9800415 	stw	r6,16(sp)
  809af0:	080a2d40 	call	80a2d4 <__pack_d>
  809af4:	dfc01217 	ldw	ra,72(sp)
  809af8:	dcc01117 	ldw	r19,68(sp)
  809afc:	dc801017 	ldw	r18,64(sp)
  809b00:	dc400f17 	ldw	r17,60(sp)
  809b04:	dc000e17 	ldw	r16,56(sp)
  809b08:	dec01304 	addi	sp,sp,76
  809b0c:	f800283a 	ret
  809b10:	00803fc4 	movi	r2,255
  809b14:	7090703a 	and	r8,r14,r2
  809b18:	00802004 	movi	r2,128
  809b1c:	0007883a 	mov	r3,zero
  809b20:	0013883a 	mov	r9,zero
  809b24:	40800d26 	beq	r8,r2,809b5c <__divdf3+0x204>
  809b28:	dbc00815 	stw	r15,32(sp)
  809b2c:	db800715 	stw	r14,28(sp)
  809b30:	003fab06 	br	8099e0 <__divdf3+0x88>
  809b34:	343fc92e 	bgeu	r6,r16,809a5c <__divdf3+0x104>
  809b38:	3185883a 	add	r2,r6,r6
  809b3c:	1189803a 	cmpltu	r4,r2,r6
  809b40:	39c7883a 	add	r3,r7,r7
  809b44:	20c9883a 	add	r4,r4,r3
  809b48:	297fffc4 	addi	r5,r5,-1
  809b4c:	100d883a 	mov	r6,r2
  809b50:	200f883a 	mov	r7,r4
  809b54:	d9400615 	stw	r5,24(sp)
  809b58:	003fc006 	br	809a5c <__divdf3+0x104>
  809b5c:	483ff21e 	bne	r9,zero,809b28 <__divdf3+0x1d0>
  809b60:	01004004 	movi	r4,256
  809b64:	7104703a 	and	r2,r14,r4
  809b68:	10c4b03a 	or	r2,r2,r3
  809b6c:	103fee1e 	bne	r2,zero,809b28 <__divdf3+0x1d0>
  809b70:	31c4b03a 	or	r2,r6,r7
  809b74:	103fec26 	beq	r2,zero,809b28 <__divdf3+0x1d0>
  809b78:	7205883a 	add	r2,r14,r8
  809b7c:	1391803a 	cmpltu	r8,r2,r14
  809b80:	43d1883a 	add	r8,r8,r15
  809b84:	013fc004 	movi	r4,-256
  809b88:	111c703a 	and	r14,r2,r4
  809b8c:	401f883a 	mov	r15,r8
  809b90:	003fe506 	br	809b28 <__divdf3+0x1d0>
  809b94:	8009883a 	mov	r4,r16
  809b98:	003f9206 	br	8099e4 <__divdf3+0x8c>
  809b9c:	9809883a 	mov	r4,r19
  809ba0:	d8000715 	stw	zero,28(sp)
  809ba4:	d8000815 	stw	zero,32(sp)
  809ba8:	d8000615 	stw	zero,24(sp)
  809bac:	003f8d06 	br	8099e4 <__divdf3+0x8c>

00809bb0 <__eqdf2>:
  809bb0:	deffef04 	addi	sp,sp,-68
  809bb4:	dc400f15 	stw	r17,60(sp)
  809bb8:	dc400404 	addi	r17,sp,16
  809bbc:	2005883a 	mov	r2,r4
  809bc0:	2807883a 	mov	r3,r5
  809bc4:	dc000e15 	stw	r16,56(sp)
  809bc8:	d809883a 	mov	r4,sp
  809bcc:	880b883a 	mov	r5,r17
  809bd0:	dc000904 	addi	r16,sp,36
  809bd4:	d8c00115 	stw	r3,4(sp)
  809bd8:	d8800015 	stw	r2,0(sp)
  809bdc:	d9800215 	stw	r6,8(sp)
  809be0:	dfc01015 	stw	ra,64(sp)
  809be4:	d9c00315 	stw	r7,12(sp)
  809be8:	080a5e80 	call	80a5e8 <__unpack_d>
  809bec:	d9000204 	addi	r4,sp,8
  809bf0:	800b883a 	mov	r5,r16
  809bf4:	080a5e80 	call	80a5e8 <__unpack_d>
  809bf8:	d8800417 	ldw	r2,16(sp)
  809bfc:	00c00044 	movi	r3,1
  809c00:	180d883a 	mov	r6,r3
  809c04:	1880062e 	bgeu	r3,r2,809c20 <__eqdf2+0x70>
  809c08:	d8800917 	ldw	r2,36(sp)
  809c0c:	8809883a 	mov	r4,r17
  809c10:	800b883a 	mov	r5,r16
  809c14:	1880022e 	bgeu	r3,r2,809c20 <__eqdf2+0x70>
  809c18:	080a7200 	call	80a720 <__fpcmp_parts_d>
  809c1c:	100d883a 	mov	r6,r2
  809c20:	3005883a 	mov	r2,r6
  809c24:	dfc01017 	ldw	ra,64(sp)
  809c28:	dc400f17 	ldw	r17,60(sp)
  809c2c:	dc000e17 	ldw	r16,56(sp)
  809c30:	dec01104 	addi	sp,sp,68
  809c34:	f800283a 	ret

00809c38 <__nedf2>:
  809c38:	deffef04 	addi	sp,sp,-68
  809c3c:	dc400f15 	stw	r17,60(sp)
  809c40:	dc400404 	addi	r17,sp,16
  809c44:	2005883a 	mov	r2,r4
  809c48:	2807883a 	mov	r3,r5
  809c4c:	dc000e15 	stw	r16,56(sp)
  809c50:	d809883a 	mov	r4,sp
  809c54:	880b883a 	mov	r5,r17
  809c58:	dc000904 	addi	r16,sp,36
  809c5c:	d8c00115 	stw	r3,4(sp)
  809c60:	d8800015 	stw	r2,0(sp)
  809c64:	d9800215 	stw	r6,8(sp)
  809c68:	dfc01015 	stw	ra,64(sp)
  809c6c:	d9c00315 	stw	r7,12(sp)
  809c70:	080a5e80 	call	80a5e8 <__unpack_d>
  809c74:	d9000204 	addi	r4,sp,8
  809c78:	800b883a 	mov	r5,r16
  809c7c:	080a5e80 	call	80a5e8 <__unpack_d>
  809c80:	d8800417 	ldw	r2,16(sp)
  809c84:	00c00044 	movi	r3,1
  809c88:	180d883a 	mov	r6,r3
  809c8c:	1880062e 	bgeu	r3,r2,809ca8 <__nedf2+0x70>
  809c90:	d8800917 	ldw	r2,36(sp)
  809c94:	8809883a 	mov	r4,r17
  809c98:	800b883a 	mov	r5,r16
  809c9c:	1880022e 	bgeu	r3,r2,809ca8 <__nedf2+0x70>
  809ca0:	080a7200 	call	80a720 <__fpcmp_parts_d>
  809ca4:	100d883a 	mov	r6,r2
  809ca8:	3005883a 	mov	r2,r6
  809cac:	dfc01017 	ldw	ra,64(sp)
  809cb0:	dc400f17 	ldw	r17,60(sp)
  809cb4:	dc000e17 	ldw	r16,56(sp)
  809cb8:	dec01104 	addi	sp,sp,68
  809cbc:	f800283a 	ret

00809cc0 <__gtdf2>:
  809cc0:	deffef04 	addi	sp,sp,-68
  809cc4:	dc400f15 	stw	r17,60(sp)
  809cc8:	dc400404 	addi	r17,sp,16
  809ccc:	2005883a 	mov	r2,r4
  809cd0:	2807883a 	mov	r3,r5
  809cd4:	dc000e15 	stw	r16,56(sp)
  809cd8:	d809883a 	mov	r4,sp
  809cdc:	880b883a 	mov	r5,r17
  809ce0:	dc000904 	addi	r16,sp,36
  809ce4:	d8c00115 	stw	r3,4(sp)
  809ce8:	d8800015 	stw	r2,0(sp)
  809cec:	d9800215 	stw	r6,8(sp)
  809cf0:	dfc01015 	stw	ra,64(sp)
  809cf4:	d9c00315 	stw	r7,12(sp)
  809cf8:	080a5e80 	call	80a5e8 <__unpack_d>
  809cfc:	d9000204 	addi	r4,sp,8
  809d00:	800b883a 	mov	r5,r16
  809d04:	080a5e80 	call	80a5e8 <__unpack_d>
  809d08:	d8800417 	ldw	r2,16(sp)
  809d0c:	00c00044 	movi	r3,1
  809d10:	01bfffc4 	movi	r6,-1
  809d14:	1880062e 	bgeu	r3,r2,809d30 <__gtdf2+0x70>
  809d18:	d8800917 	ldw	r2,36(sp)
  809d1c:	8809883a 	mov	r4,r17
  809d20:	800b883a 	mov	r5,r16
  809d24:	1880022e 	bgeu	r3,r2,809d30 <__gtdf2+0x70>
  809d28:	080a7200 	call	80a720 <__fpcmp_parts_d>
  809d2c:	100d883a 	mov	r6,r2
  809d30:	3005883a 	mov	r2,r6
  809d34:	dfc01017 	ldw	ra,64(sp)
  809d38:	dc400f17 	ldw	r17,60(sp)
  809d3c:	dc000e17 	ldw	r16,56(sp)
  809d40:	dec01104 	addi	sp,sp,68
  809d44:	f800283a 	ret

00809d48 <__gedf2>:
  809d48:	deffef04 	addi	sp,sp,-68
  809d4c:	dc400f15 	stw	r17,60(sp)
  809d50:	dc400404 	addi	r17,sp,16
  809d54:	2005883a 	mov	r2,r4
  809d58:	2807883a 	mov	r3,r5
  809d5c:	dc000e15 	stw	r16,56(sp)
  809d60:	d809883a 	mov	r4,sp
  809d64:	880b883a 	mov	r5,r17
  809d68:	dc000904 	addi	r16,sp,36
  809d6c:	d8c00115 	stw	r3,4(sp)
  809d70:	d8800015 	stw	r2,0(sp)
  809d74:	d9800215 	stw	r6,8(sp)
  809d78:	dfc01015 	stw	ra,64(sp)
  809d7c:	d9c00315 	stw	r7,12(sp)
  809d80:	080a5e80 	call	80a5e8 <__unpack_d>
  809d84:	d9000204 	addi	r4,sp,8
  809d88:	800b883a 	mov	r5,r16
  809d8c:	080a5e80 	call	80a5e8 <__unpack_d>
  809d90:	d8800417 	ldw	r2,16(sp)
  809d94:	00c00044 	movi	r3,1
  809d98:	01bfffc4 	movi	r6,-1
  809d9c:	1880062e 	bgeu	r3,r2,809db8 <__gedf2+0x70>
  809da0:	d8800917 	ldw	r2,36(sp)
  809da4:	8809883a 	mov	r4,r17
  809da8:	800b883a 	mov	r5,r16
  809dac:	1880022e 	bgeu	r3,r2,809db8 <__gedf2+0x70>
  809db0:	080a7200 	call	80a720 <__fpcmp_parts_d>
  809db4:	100d883a 	mov	r6,r2
  809db8:	3005883a 	mov	r2,r6
  809dbc:	dfc01017 	ldw	ra,64(sp)
  809dc0:	dc400f17 	ldw	r17,60(sp)
  809dc4:	dc000e17 	ldw	r16,56(sp)
  809dc8:	dec01104 	addi	sp,sp,68
  809dcc:	f800283a 	ret

00809dd0 <__ltdf2>:
  809dd0:	deffef04 	addi	sp,sp,-68
  809dd4:	dc400f15 	stw	r17,60(sp)
  809dd8:	dc400404 	addi	r17,sp,16
  809ddc:	2005883a 	mov	r2,r4
  809de0:	2807883a 	mov	r3,r5
  809de4:	dc000e15 	stw	r16,56(sp)
  809de8:	d809883a 	mov	r4,sp
  809dec:	880b883a 	mov	r5,r17
  809df0:	dc000904 	addi	r16,sp,36
  809df4:	d8c00115 	stw	r3,4(sp)
  809df8:	d8800015 	stw	r2,0(sp)
  809dfc:	d9800215 	stw	r6,8(sp)
  809e00:	dfc01015 	stw	ra,64(sp)
  809e04:	d9c00315 	stw	r7,12(sp)
  809e08:	080a5e80 	call	80a5e8 <__unpack_d>
  809e0c:	d9000204 	addi	r4,sp,8
  809e10:	800b883a 	mov	r5,r16
  809e14:	080a5e80 	call	80a5e8 <__unpack_d>
  809e18:	d8800417 	ldw	r2,16(sp)
  809e1c:	00c00044 	movi	r3,1
  809e20:	180d883a 	mov	r6,r3
  809e24:	1880062e 	bgeu	r3,r2,809e40 <__ltdf2+0x70>
  809e28:	d8800917 	ldw	r2,36(sp)
  809e2c:	8809883a 	mov	r4,r17
  809e30:	800b883a 	mov	r5,r16
  809e34:	1880022e 	bgeu	r3,r2,809e40 <__ltdf2+0x70>
  809e38:	080a7200 	call	80a720 <__fpcmp_parts_d>
  809e3c:	100d883a 	mov	r6,r2
  809e40:	3005883a 	mov	r2,r6
  809e44:	dfc01017 	ldw	ra,64(sp)
  809e48:	dc400f17 	ldw	r17,60(sp)
  809e4c:	dc000e17 	ldw	r16,56(sp)
  809e50:	dec01104 	addi	sp,sp,68
  809e54:	f800283a 	ret

00809e58 <__floatsidf>:
  809e58:	2006d7fa 	srli	r3,r4,31
  809e5c:	defff604 	addi	sp,sp,-40
  809e60:	008000c4 	movi	r2,3
  809e64:	dfc00915 	stw	ra,36(sp)
  809e68:	dcc00815 	stw	r19,32(sp)
  809e6c:	dc800715 	stw	r18,28(sp)
  809e70:	dc400615 	stw	r17,24(sp)
  809e74:	dc000515 	stw	r16,20(sp)
  809e78:	d8800015 	stw	r2,0(sp)
  809e7c:	d8c00115 	stw	r3,4(sp)
  809e80:	20000f1e 	bne	r4,zero,809ec0 <__floatsidf+0x68>
  809e84:	00800084 	movi	r2,2
  809e88:	d8800015 	stw	r2,0(sp)
  809e8c:	d809883a 	mov	r4,sp
  809e90:	080a2d40 	call	80a2d4 <__pack_d>
  809e94:	1009883a 	mov	r4,r2
  809e98:	180b883a 	mov	r5,r3
  809e9c:	2005883a 	mov	r2,r4
  809ea0:	2807883a 	mov	r3,r5
  809ea4:	dfc00917 	ldw	ra,36(sp)
  809ea8:	dcc00817 	ldw	r19,32(sp)
  809eac:	dc800717 	ldw	r18,28(sp)
  809eb0:	dc400617 	ldw	r17,24(sp)
  809eb4:	dc000517 	ldw	r16,20(sp)
  809eb8:	dec00a04 	addi	sp,sp,40
  809ebc:	f800283a 	ret
  809ec0:	00800f04 	movi	r2,60
  809ec4:	1807003a 	cmpeq	r3,r3,zero
  809ec8:	d8800215 	stw	r2,8(sp)
  809ecc:	18001126 	beq	r3,zero,809f14 <__floatsidf+0xbc>
  809ed0:	0027883a 	mov	r19,zero
  809ed4:	2025883a 	mov	r18,r4
  809ed8:	d9000315 	stw	r4,12(sp)
  809edc:	dcc00415 	stw	r19,16(sp)
  809ee0:	080a2540 	call	80a254 <__clzsi2>
  809ee4:	11000744 	addi	r4,r2,29
  809ee8:	013fe80e 	bge	zero,r4,809e8c <__floatsidf+0x34>
  809eec:	10bfff44 	addi	r2,r2,-3
  809ef0:	10000c16 	blt	r2,zero,809f24 <__floatsidf+0xcc>
  809ef4:	90a2983a 	sll	r17,r18,r2
  809ef8:	0021883a 	mov	r16,zero
  809efc:	d8800217 	ldw	r2,8(sp)
  809f00:	dc400415 	stw	r17,16(sp)
  809f04:	dc000315 	stw	r16,12(sp)
  809f08:	1105c83a 	sub	r2,r2,r4
  809f0c:	d8800215 	stw	r2,8(sp)
  809f10:	003fde06 	br	809e8c <__floatsidf+0x34>
  809f14:	00a00034 	movhi	r2,32768
  809f18:	20800a26 	beq	r4,r2,809f44 <__floatsidf+0xec>
  809f1c:	0109c83a 	sub	r4,zero,r4
  809f20:	003feb06 	br	809ed0 <__floatsidf+0x78>
  809f24:	9006d07a 	srli	r3,r18,1
  809f28:	008007c4 	movi	r2,31
  809f2c:	1105c83a 	sub	r2,r2,r4
  809f30:	1886d83a 	srl	r3,r3,r2
  809f34:	9922983a 	sll	r17,r19,r4
  809f38:	9120983a 	sll	r16,r18,r4
  809f3c:	1c62b03a 	or	r17,r3,r17
  809f40:	003fee06 	br	809efc <__floatsidf+0xa4>
  809f44:	0009883a 	mov	r4,zero
  809f48:	01707834 	movhi	r5,49632
  809f4c:	003fd306 	br	809e9c <__floatsidf+0x44>

00809f50 <__fixdfsi>:
  809f50:	defff804 	addi	sp,sp,-32
  809f54:	2005883a 	mov	r2,r4
  809f58:	2807883a 	mov	r3,r5
  809f5c:	d809883a 	mov	r4,sp
  809f60:	d9400204 	addi	r5,sp,8
  809f64:	d8c00115 	stw	r3,4(sp)
  809f68:	d8800015 	stw	r2,0(sp)
  809f6c:	dfc00715 	stw	ra,28(sp)
  809f70:	080a5e80 	call	80a5e8 <__unpack_d>
  809f74:	d8c00217 	ldw	r3,8(sp)
  809f78:	00800084 	movi	r2,2
  809f7c:	1880051e 	bne	r3,r2,809f94 <__fixdfsi+0x44>
  809f80:	0007883a 	mov	r3,zero
  809f84:	1805883a 	mov	r2,r3
  809f88:	dfc00717 	ldw	ra,28(sp)
  809f8c:	dec00804 	addi	sp,sp,32
  809f90:	f800283a 	ret
  809f94:	00800044 	movi	r2,1
  809f98:	10fff92e 	bgeu	r2,r3,809f80 <__fixdfsi+0x30>
  809f9c:	00800104 	movi	r2,4
  809fa0:	18800426 	beq	r3,r2,809fb4 <__fixdfsi+0x64>
  809fa4:	d8c00417 	ldw	r3,16(sp)
  809fa8:	183ff516 	blt	r3,zero,809f80 <__fixdfsi+0x30>
  809fac:	00800784 	movi	r2,30
  809fb0:	10c0080e 	bge	r2,r3,809fd4 <__fixdfsi+0x84>
  809fb4:	d8800317 	ldw	r2,12(sp)
  809fb8:	1000121e 	bne	r2,zero,80a004 <__fixdfsi+0xb4>
  809fbc:	00e00034 	movhi	r3,32768
  809fc0:	18ffffc4 	addi	r3,r3,-1
  809fc4:	1805883a 	mov	r2,r3
  809fc8:	dfc00717 	ldw	ra,28(sp)
  809fcc:	dec00804 	addi	sp,sp,32
  809fd0:	f800283a 	ret
  809fd4:	00800f04 	movi	r2,60
  809fd8:	10d1c83a 	sub	r8,r2,r3
  809fdc:	40bff804 	addi	r2,r8,-32
  809fe0:	d9800517 	ldw	r6,20(sp)
  809fe4:	d9c00617 	ldw	r7,24(sp)
  809fe8:	10000816 	blt	r2,zero,80a00c <__fixdfsi+0xbc>
  809fec:	3888d83a 	srl	r4,r7,r2
  809ff0:	d8800317 	ldw	r2,12(sp)
  809ff4:	2007883a 	mov	r3,r4
  809ff8:	103fe226 	beq	r2,zero,809f84 <__fixdfsi+0x34>
  809ffc:	0107c83a 	sub	r3,zero,r4
  80a000:	003fe006 	br	809f84 <__fixdfsi+0x34>
  80a004:	00e00034 	movhi	r3,32768
  80a008:	003fde06 	br	809f84 <__fixdfsi+0x34>
  80a00c:	39c7883a 	add	r3,r7,r7
  80a010:	008007c4 	movi	r2,31
  80a014:	1205c83a 	sub	r2,r2,r8
  80a018:	1886983a 	sll	r3,r3,r2
  80a01c:	3208d83a 	srl	r4,r6,r8
  80a020:	1908b03a 	or	r4,r3,r4
  80a024:	003ff206 	br	809ff0 <__fixdfsi+0xa0>

0080a028 <__floatunsidf>:
  80a028:	defff204 	addi	sp,sp,-56
  80a02c:	dfc00d15 	stw	ra,52(sp)
  80a030:	ddc00c15 	stw	r23,48(sp)
  80a034:	dd800b15 	stw	r22,44(sp)
  80a038:	dd400a15 	stw	r21,40(sp)
  80a03c:	dd000915 	stw	r20,36(sp)
  80a040:	dcc00815 	stw	r19,32(sp)
  80a044:	dc800715 	stw	r18,28(sp)
  80a048:	dc400615 	stw	r17,24(sp)
  80a04c:	dc000515 	stw	r16,20(sp)
  80a050:	d8000115 	stw	zero,4(sp)
  80a054:	20000f1e 	bne	r4,zero,80a094 <__floatunsidf+0x6c>
  80a058:	00800084 	movi	r2,2
  80a05c:	d8800015 	stw	r2,0(sp)
  80a060:	d809883a 	mov	r4,sp
  80a064:	080a2d40 	call	80a2d4 <__pack_d>
  80a068:	dfc00d17 	ldw	ra,52(sp)
  80a06c:	ddc00c17 	ldw	r23,48(sp)
  80a070:	dd800b17 	ldw	r22,44(sp)
  80a074:	dd400a17 	ldw	r21,40(sp)
  80a078:	dd000917 	ldw	r20,36(sp)
  80a07c:	dcc00817 	ldw	r19,32(sp)
  80a080:	dc800717 	ldw	r18,28(sp)
  80a084:	dc400617 	ldw	r17,24(sp)
  80a088:	dc000517 	ldw	r16,20(sp)
  80a08c:	dec00e04 	addi	sp,sp,56
  80a090:	f800283a 	ret
  80a094:	008000c4 	movi	r2,3
  80a098:	00c00f04 	movi	r3,60
  80a09c:	002f883a 	mov	r23,zero
  80a0a0:	202d883a 	mov	r22,r4
  80a0a4:	d8800015 	stw	r2,0(sp)
  80a0a8:	d8c00215 	stw	r3,8(sp)
  80a0ac:	d9000315 	stw	r4,12(sp)
  80a0b0:	ddc00415 	stw	r23,16(sp)
  80a0b4:	080a2540 	call	80a254 <__clzsi2>
  80a0b8:	12400744 	addi	r9,r2,29
  80a0bc:	48000b16 	blt	r9,zero,80a0ec <__floatunsidf+0xc4>
  80a0c0:	483fe726 	beq	r9,zero,80a060 <__floatunsidf+0x38>
  80a0c4:	10bfff44 	addi	r2,r2,-3
  80a0c8:	10002e16 	blt	r2,zero,80a184 <__floatunsidf+0x15c>
  80a0cc:	b0a2983a 	sll	r17,r22,r2
  80a0d0:	0021883a 	mov	r16,zero
  80a0d4:	d8800217 	ldw	r2,8(sp)
  80a0d8:	dc400415 	stw	r17,16(sp)
  80a0dc:	dc000315 	stw	r16,12(sp)
  80a0e0:	1245c83a 	sub	r2,r2,r9
  80a0e4:	d8800215 	stw	r2,8(sp)
  80a0e8:	003fdd06 	br	80a060 <__floatunsidf+0x38>
  80a0ec:	0255c83a 	sub	r10,zero,r9
  80a0f0:	51bff804 	addi	r6,r10,-32
  80a0f4:	30001b16 	blt	r6,zero,80a164 <__floatunsidf+0x13c>
  80a0f8:	b9a8d83a 	srl	r20,r23,r6
  80a0fc:	002b883a 	mov	r21,zero
  80a100:	000f883a 	mov	r7,zero
  80a104:	01000044 	movi	r4,1
  80a108:	0011883a 	mov	r8,zero
  80a10c:	30002516 	blt	r6,zero,80a1a4 <__floatunsidf+0x17c>
  80a110:	21a6983a 	sll	r19,r4,r6
  80a114:	0025883a 	mov	r18,zero
  80a118:	00bfffc4 	movi	r2,-1
  80a11c:	9089883a 	add	r4,r18,r2
  80a120:	988b883a 	add	r5,r19,r2
  80a124:	248d803a 	cmpltu	r6,r4,r18
  80a128:	314b883a 	add	r5,r6,r5
  80a12c:	b104703a 	and	r2,r22,r4
  80a130:	b946703a 	and	r3,r23,r5
  80a134:	10c4b03a 	or	r2,r2,r3
  80a138:	10000226 	beq	r2,zero,80a144 <__floatunsidf+0x11c>
  80a13c:	01c00044 	movi	r7,1
  80a140:	0011883a 	mov	r8,zero
  80a144:	d9000217 	ldw	r4,8(sp)
  80a148:	a1c4b03a 	or	r2,r20,r7
  80a14c:	aa06b03a 	or	r3,r21,r8
  80a150:	2249c83a 	sub	r4,r4,r9
  80a154:	d8c00415 	stw	r3,16(sp)
  80a158:	d9000215 	stw	r4,8(sp)
  80a15c:	d8800315 	stw	r2,12(sp)
  80a160:	003fbf06 	br	80a060 <__floatunsidf+0x38>
  80a164:	bdc7883a 	add	r3,r23,r23
  80a168:	008007c4 	movi	r2,31
  80a16c:	1285c83a 	sub	r2,r2,r10
  80a170:	1886983a 	sll	r3,r3,r2
  80a174:	b2a8d83a 	srl	r20,r22,r10
  80a178:	baaad83a 	srl	r21,r23,r10
  80a17c:	1d28b03a 	or	r20,r3,r20
  80a180:	003fdf06 	br	80a100 <__floatunsidf+0xd8>
  80a184:	b006d07a 	srli	r3,r22,1
  80a188:	008007c4 	movi	r2,31
  80a18c:	1245c83a 	sub	r2,r2,r9
  80a190:	1886d83a 	srl	r3,r3,r2
  80a194:	ba62983a 	sll	r17,r23,r9
  80a198:	b260983a 	sll	r16,r22,r9
  80a19c:	1c62b03a 	or	r17,r3,r17
  80a1a0:	003fcc06 	br	80a0d4 <__floatunsidf+0xac>
  80a1a4:	2006d07a 	srli	r3,r4,1
  80a1a8:	008007c4 	movi	r2,31
  80a1ac:	1285c83a 	sub	r2,r2,r10
  80a1b0:	18a6d83a 	srl	r19,r3,r2
  80a1b4:	22a4983a 	sll	r18,r4,r10
  80a1b8:	003fd706 	br	80a118 <__floatunsidf+0xf0>

0080a1bc <__muldi3>:
  80a1bc:	2011883a 	mov	r8,r4
  80a1c0:	427fffcc 	andi	r9,r8,65535
  80a1c4:	4018d43a 	srli	r12,r8,16
  80a1c8:	32bfffcc 	andi	r10,r6,65535
  80a1cc:	3016d43a 	srli	r11,r6,16
  80a1d0:	4a85383a 	mul	r2,r9,r10
  80a1d4:	6295383a 	mul	r10,r12,r10
  80a1d8:	4ad3383a 	mul	r9,r9,r11
  80a1dc:	113fffcc 	andi	r4,r2,65535
  80a1e0:	1004d43a 	srli	r2,r2,16
  80a1e4:	4a93883a 	add	r9,r9,r10
  80a1e8:	3807883a 	mov	r3,r7
  80a1ec:	1245883a 	add	r2,r2,r9
  80a1f0:	280f883a 	mov	r7,r5
  80a1f4:	180b883a 	mov	r5,r3
  80a1f8:	1006943a 	slli	r3,r2,16
  80a1fc:	defffd04 	addi	sp,sp,-12
  80a200:	dc800215 	stw	r18,8(sp)
  80a204:	1907883a 	add	r3,r3,r4
  80a208:	dc400115 	stw	r17,4(sp)
  80a20c:	dc000015 	stw	r16,0(sp)
  80a210:	4165383a 	mul	r18,r8,r5
  80a214:	31e3383a 	mul	r17,r6,r7
  80a218:	1012d43a 	srli	r9,r2,16
  80a21c:	62d9383a 	mul	r12,r12,r11
  80a220:	181f883a 	mov	r15,r3
  80a224:	1280022e 	bgeu	r2,r10,80a230 <__muldi3+0x74>
  80a228:	00800074 	movhi	r2,1
  80a22c:	6099883a 	add	r12,r12,r2
  80a230:	624d883a 	add	r6,r12,r9
  80a234:	9187883a 	add	r3,r18,r6
  80a238:	88c7883a 	add	r3,r17,r3
  80a23c:	7805883a 	mov	r2,r15
  80a240:	dc800217 	ldw	r18,8(sp)
  80a244:	dc400117 	ldw	r17,4(sp)
  80a248:	dc000017 	ldw	r16,0(sp)
  80a24c:	dec00304 	addi	sp,sp,12
  80a250:	f800283a 	ret

0080a254 <__clzsi2>:
  80a254:	00bfffd4 	movui	r2,65535
  80a258:	11000e36 	bltu	r2,r4,80a294 <__clzsi2+0x40>
  80a25c:	00803fc4 	movi	r2,255
  80a260:	01400204 	movi	r5,8
  80a264:	0007883a 	mov	r3,zero
  80a268:	11001036 	bltu	r2,r4,80a2ac <__clzsi2+0x58>
  80a26c:	000b883a 	mov	r5,zero
  80a270:	20c6d83a 	srl	r3,r4,r3
  80a274:	00802074 	movhi	r2,129
  80a278:	10b55604 	addi	r2,r2,-10920
  80a27c:	1887883a 	add	r3,r3,r2
  80a280:	18800003 	ldbu	r2,0(r3)
  80a284:	00c00804 	movi	r3,32
  80a288:	2885883a 	add	r2,r5,r2
  80a28c:	1885c83a 	sub	r2,r3,r2
  80a290:	f800283a 	ret
  80a294:	01400404 	movi	r5,16
  80a298:	00804034 	movhi	r2,256
  80a29c:	10bfffc4 	addi	r2,r2,-1
  80a2a0:	2807883a 	mov	r3,r5
  80a2a4:	113ff22e 	bgeu	r2,r4,80a270 <__clzsi2+0x1c>
  80a2a8:	01400604 	movi	r5,24
  80a2ac:	2807883a 	mov	r3,r5
  80a2b0:	20c6d83a 	srl	r3,r4,r3
  80a2b4:	00802074 	movhi	r2,129
  80a2b8:	10b55604 	addi	r2,r2,-10920
  80a2bc:	1887883a 	add	r3,r3,r2
  80a2c0:	18800003 	ldbu	r2,0(r3)
  80a2c4:	00c00804 	movi	r3,32
  80a2c8:	2885883a 	add	r2,r5,r2
  80a2cc:	1885c83a 	sub	r2,r3,r2
  80a2d0:	f800283a 	ret

0080a2d4 <__pack_d>:
  80a2d4:	20c00017 	ldw	r3,0(r4)
  80a2d8:	defffd04 	addi	sp,sp,-12
  80a2dc:	dc000015 	stw	r16,0(sp)
  80a2e0:	dc800215 	stw	r18,8(sp)
  80a2e4:	dc400115 	stw	r17,4(sp)
  80a2e8:	00800044 	movi	r2,1
  80a2ec:	22000317 	ldw	r8,12(r4)
  80a2f0:	001f883a 	mov	r15,zero
  80a2f4:	22400417 	ldw	r9,16(r4)
  80a2f8:	24000117 	ldw	r16,4(r4)
  80a2fc:	10c0552e 	bgeu	r2,r3,80a454 <__pack_d+0x180>
  80a300:	00800104 	movi	r2,4
  80a304:	18804f26 	beq	r3,r2,80a444 <__pack_d+0x170>
  80a308:	00800084 	movi	r2,2
  80a30c:	18800226 	beq	r3,r2,80a318 <__pack_d+0x44>
  80a310:	4244b03a 	or	r2,r8,r9
  80a314:	10001a1e 	bne	r2,zero,80a380 <__pack_d+0xac>
  80a318:	000d883a 	mov	r6,zero
  80a31c:	000f883a 	mov	r7,zero
  80a320:	0011883a 	mov	r8,zero
  80a324:	00800434 	movhi	r2,16
  80a328:	10bfffc4 	addi	r2,r2,-1
  80a32c:	301d883a 	mov	r14,r6
  80a330:	3884703a 	and	r2,r7,r2
  80a334:	400a953a 	slli	r5,r8,20
  80a338:	79bffc2c 	andhi	r6,r15,65520
  80a33c:	308cb03a 	or	r6,r6,r2
  80a340:	00e00434 	movhi	r3,32784
  80a344:	18ffffc4 	addi	r3,r3,-1
  80a348:	800497fa 	slli	r2,r16,31
  80a34c:	30c6703a 	and	r3,r6,r3
  80a350:	1946b03a 	or	r3,r3,r5
  80a354:	01600034 	movhi	r5,32768
  80a358:	297fffc4 	addi	r5,r5,-1
  80a35c:	194a703a 	and	r5,r3,r5
  80a360:	288ab03a 	or	r5,r5,r2
  80a364:	2807883a 	mov	r3,r5
  80a368:	7005883a 	mov	r2,r14
  80a36c:	dc800217 	ldw	r18,8(sp)
  80a370:	dc400117 	ldw	r17,4(sp)
  80a374:	dc000017 	ldw	r16,0(sp)
  80a378:	dec00304 	addi	sp,sp,12
  80a37c:	f800283a 	ret
  80a380:	21000217 	ldw	r4,8(r4)
  80a384:	00bf0084 	movi	r2,-1022
  80a388:	20803f16 	blt	r4,r2,80a488 <__pack_d+0x1b4>
  80a38c:	0080ffc4 	movi	r2,1023
  80a390:	11002c16 	blt	r2,r4,80a444 <__pack_d+0x170>
  80a394:	00803fc4 	movi	r2,255
  80a398:	408c703a 	and	r6,r8,r2
  80a39c:	00802004 	movi	r2,128
  80a3a0:	0007883a 	mov	r3,zero
  80a3a4:	000f883a 	mov	r7,zero
  80a3a8:	2280ffc4 	addi	r10,r4,1023
  80a3ac:	30801e26 	beq	r6,r2,80a428 <__pack_d+0x154>
  80a3b0:	00801fc4 	movi	r2,127
  80a3b4:	4089883a 	add	r4,r8,r2
  80a3b8:	220d803a 	cmpltu	r6,r4,r8
  80a3bc:	324d883a 	add	r6,r6,r9
  80a3c0:	2011883a 	mov	r8,r4
  80a3c4:	3013883a 	mov	r9,r6
  80a3c8:	00880034 	movhi	r2,8192
  80a3cc:	10bfffc4 	addi	r2,r2,-1
  80a3d0:	12400d36 	bltu	r2,r9,80a408 <__pack_d+0x134>
  80a3d4:	4804963a 	slli	r2,r9,24
  80a3d8:	400cd23a 	srli	r6,r8,8
  80a3dc:	480ed23a 	srli	r7,r9,8
  80a3e0:	013fffc4 	movi	r4,-1
  80a3e4:	118cb03a 	or	r6,r2,r6
  80a3e8:	01400434 	movhi	r5,16
  80a3ec:	297fffc4 	addi	r5,r5,-1
  80a3f0:	3104703a 	and	r2,r6,r4
  80a3f4:	3946703a 	and	r3,r7,r5
  80a3f8:	5201ffcc 	andi	r8,r10,2047
  80a3fc:	100d883a 	mov	r6,r2
  80a400:	180f883a 	mov	r7,r3
  80a404:	003fc706 	br	80a324 <__pack_d+0x50>
  80a408:	480897fa 	slli	r4,r9,31
  80a40c:	4004d07a 	srli	r2,r8,1
  80a410:	4806d07a 	srli	r3,r9,1
  80a414:	52800044 	addi	r10,r10,1
  80a418:	2084b03a 	or	r2,r4,r2
  80a41c:	1011883a 	mov	r8,r2
  80a420:	1813883a 	mov	r9,r3
  80a424:	003feb06 	br	80a3d4 <__pack_d+0x100>
  80a428:	383fe11e 	bne	r7,zero,80a3b0 <__pack_d+0xdc>
  80a42c:	01004004 	movi	r4,256
  80a430:	4104703a 	and	r2,r8,r4
  80a434:	10c4b03a 	or	r2,r2,r3
  80a438:	103fe326 	beq	r2,zero,80a3c8 <__pack_d+0xf4>
  80a43c:	3005883a 	mov	r2,r6
  80a440:	003fdc06 	br	80a3b4 <__pack_d+0xe0>
  80a444:	000d883a 	mov	r6,zero
  80a448:	000f883a 	mov	r7,zero
  80a44c:	0201ffc4 	movi	r8,2047
  80a450:	003fb406 	br	80a324 <__pack_d+0x50>
  80a454:	0005883a 	mov	r2,zero
  80a458:	00c00234 	movhi	r3,8
  80a45c:	408cb03a 	or	r6,r8,r2
  80a460:	48ceb03a 	or	r7,r9,r3
  80a464:	013fffc4 	movi	r4,-1
  80a468:	01400434 	movhi	r5,16
  80a46c:	297fffc4 	addi	r5,r5,-1
  80a470:	3104703a 	and	r2,r6,r4
  80a474:	3946703a 	and	r3,r7,r5
  80a478:	100d883a 	mov	r6,r2
  80a47c:	180f883a 	mov	r7,r3
  80a480:	0201ffc4 	movi	r8,2047
  80a484:	003fa706 	br	80a324 <__pack_d+0x50>
  80a488:	1109c83a 	sub	r4,r2,r4
  80a48c:	00800e04 	movi	r2,56
  80a490:	11004316 	blt	r2,r4,80a5a0 <__pack_d+0x2cc>
  80a494:	21fff804 	addi	r7,r4,-32
  80a498:	38004516 	blt	r7,zero,80a5b0 <__pack_d+0x2dc>
  80a49c:	49d8d83a 	srl	r12,r9,r7
  80a4a0:	001b883a 	mov	r13,zero
  80a4a4:	0023883a 	mov	r17,zero
  80a4a8:	01400044 	movi	r5,1
  80a4ac:	0025883a 	mov	r18,zero
  80a4b0:	38004716 	blt	r7,zero,80a5d0 <__pack_d+0x2fc>
  80a4b4:	29d6983a 	sll	r11,r5,r7
  80a4b8:	0015883a 	mov	r10,zero
  80a4bc:	00bfffc4 	movi	r2,-1
  80a4c0:	5089883a 	add	r4,r10,r2
  80a4c4:	588b883a 	add	r5,r11,r2
  80a4c8:	228d803a 	cmpltu	r6,r4,r10
  80a4cc:	314b883a 	add	r5,r6,r5
  80a4d0:	4104703a 	and	r2,r8,r4
  80a4d4:	4946703a 	and	r3,r9,r5
  80a4d8:	10c4b03a 	or	r2,r2,r3
  80a4dc:	10000226 	beq	r2,zero,80a4e8 <__pack_d+0x214>
  80a4e0:	04400044 	movi	r17,1
  80a4e4:	0025883a 	mov	r18,zero
  80a4e8:	00803fc4 	movi	r2,255
  80a4ec:	644eb03a 	or	r7,r12,r17
  80a4f0:	3892703a 	and	r9,r7,r2
  80a4f4:	00802004 	movi	r2,128
  80a4f8:	6c90b03a 	or	r8,r13,r18
  80a4fc:	0015883a 	mov	r10,zero
  80a500:	48801626 	beq	r9,r2,80a55c <__pack_d+0x288>
  80a504:	01001fc4 	movi	r4,127
  80a508:	3905883a 	add	r2,r7,r4
  80a50c:	11cd803a 	cmpltu	r6,r2,r7
  80a510:	320d883a 	add	r6,r6,r8
  80a514:	100f883a 	mov	r7,r2
  80a518:	00840034 	movhi	r2,4096
  80a51c:	10bfffc4 	addi	r2,r2,-1
  80a520:	3011883a 	mov	r8,r6
  80a524:	0007883a 	mov	r3,zero
  80a528:	11801b36 	bltu	r2,r6,80a598 <__pack_d+0x2c4>
  80a52c:	4004963a 	slli	r2,r8,24
  80a530:	3808d23a 	srli	r4,r7,8
  80a534:	400ad23a 	srli	r5,r8,8
  80a538:	1813883a 	mov	r9,r3
  80a53c:	1108b03a 	or	r4,r2,r4
  80a540:	00bfffc4 	movi	r2,-1
  80a544:	00c00434 	movhi	r3,16
  80a548:	18ffffc4 	addi	r3,r3,-1
  80a54c:	208c703a 	and	r6,r4,r2
  80a550:	28ce703a 	and	r7,r5,r3
  80a554:	4a01ffcc 	andi	r8,r9,2047
  80a558:	003f7206 	br	80a324 <__pack_d+0x50>
  80a55c:	503fe91e 	bne	r10,zero,80a504 <__pack_d+0x230>
  80a560:	01004004 	movi	r4,256
  80a564:	3904703a 	and	r2,r7,r4
  80a568:	0007883a 	mov	r3,zero
  80a56c:	10c4b03a 	or	r2,r2,r3
  80a570:	10000626 	beq	r2,zero,80a58c <__pack_d+0x2b8>
  80a574:	3a45883a 	add	r2,r7,r9
  80a578:	11cd803a 	cmpltu	r6,r2,r7
  80a57c:	320d883a 	add	r6,r6,r8
  80a580:	100f883a 	mov	r7,r2
  80a584:	3011883a 	mov	r8,r6
  80a588:	0007883a 	mov	r3,zero
  80a58c:	00840034 	movhi	r2,4096
  80a590:	10bfffc4 	addi	r2,r2,-1
  80a594:	123fe52e 	bgeu	r2,r8,80a52c <__pack_d+0x258>
  80a598:	00c00044 	movi	r3,1
  80a59c:	003fe306 	br	80a52c <__pack_d+0x258>
  80a5a0:	0009883a 	mov	r4,zero
  80a5a4:	0013883a 	mov	r9,zero
  80a5a8:	000b883a 	mov	r5,zero
  80a5ac:	003fe406 	br	80a540 <__pack_d+0x26c>
  80a5b0:	4a47883a 	add	r3,r9,r9
  80a5b4:	008007c4 	movi	r2,31
  80a5b8:	1105c83a 	sub	r2,r2,r4
  80a5bc:	1886983a 	sll	r3,r3,r2
  80a5c0:	4118d83a 	srl	r12,r8,r4
  80a5c4:	491ad83a 	srl	r13,r9,r4
  80a5c8:	1b18b03a 	or	r12,r3,r12
  80a5cc:	003fb506 	br	80a4a4 <__pack_d+0x1d0>
  80a5d0:	2806d07a 	srli	r3,r5,1
  80a5d4:	008007c4 	movi	r2,31
  80a5d8:	1105c83a 	sub	r2,r2,r4
  80a5dc:	1896d83a 	srl	r11,r3,r2
  80a5e0:	2914983a 	sll	r10,r5,r4
  80a5e4:	003fb506 	br	80a4bc <__pack_d+0x1e8>

0080a5e8 <__unpack_d>:
  80a5e8:	20c00117 	ldw	r3,4(r4)
  80a5ec:	22400017 	ldw	r9,0(r4)
  80a5f0:	00800434 	movhi	r2,16
  80a5f4:	10bfffc4 	addi	r2,r2,-1
  80a5f8:	1808d53a 	srli	r4,r3,20
  80a5fc:	180cd7fa 	srli	r6,r3,31
  80a600:	1894703a 	and	r10,r3,r2
  80a604:	2201ffcc 	andi	r8,r4,2047
  80a608:	281b883a 	mov	r13,r5
  80a60c:	4817883a 	mov	r11,r9
  80a610:	29800115 	stw	r6,4(r5)
  80a614:	5019883a 	mov	r12,r10
  80a618:	40001e1e 	bne	r8,zero,80a694 <__unpack_d+0xac>
  80a61c:	4a84b03a 	or	r2,r9,r10
  80a620:	10001926 	beq	r2,zero,80a688 <__unpack_d+0xa0>
  80a624:	4804d63a 	srli	r2,r9,24
  80a628:	500c923a 	slli	r6,r10,8
  80a62c:	013f0084 	movi	r4,-1022
  80a630:	00c40034 	movhi	r3,4096
  80a634:	18ffffc4 	addi	r3,r3,-1
  80a638:	118cb03a 	or	r6,r2,r6
  80a63c:	008000c4 	movi	r2,3
  80a640:	480a923a 	slli	r5,r9,8
  80a644:	68800015 	stw	r2,0(r13)
  80a648:	69000215 	stw	r4,8(r13)
  80a64c:	19800b36 	bltu	r3,r6,80a67c <__unpack_d+0x94>
  80a650:	200f883a 	mov	r7,r4
  80a654:	1811883a 	mov	r8,r3
  80a658:	2945883a 	add	r2,r5,r5
  80a65c:	1149803a 	cmpltu	r4,r2,r5
  80a660:	3187883a 	add	r3,r6,r6
  80a664:	20c9883a 	add	r4,r4,r3
  80a668:	100b883a 	mov	r5,r2
  80a66c:	200d883a 	mov	r6,r4
  80a670:	39ffffc4 	addi	r7,r7,-1
  80a674:	413ff82e 	bgeu	r8,r4,80a658 <__unpack_d+0x70>
  80a678:	69c00215 	stw	r7,8(r13)
  80a67c:	69800415 	stw	r6,16(r13)
  80a680:	69400315 	stw	r5,12(r13)
  80a684:	f800283a 	ret
  80a688:	00800084 	movi	r2,2
  80a68c:	28800015 	stw	r2,0(r5)
  80a690:	f800283a 	ret
  80a694:	0081ffc4 	movi	r2,2047
  80a698:	40800f26 	beq	r8,r2,80a6d8 <__unpack_d+0xf0>
  80a69c:	480cd63a 	srli	r6,r9,24
  80a6a0:	5006923a 	slli	r3,r10,8
  80a6a4:	4804923a 	slli	r2,r9,8
  80a6a8:	0009883a 	mov	r4,zero
  80a6ac:	30c6b03a 	or	r3,r6,r3
  80a6b0:	01440034 	movhi	r5,4096
  80a6b4:	110cb03a 	or	r6,r2,r4
  80a6b8:	423f0044 	addi	r8,r8,-1023
  80a6bc:	194eb03a 	or	r7,r3,r5
  80a6c0:	008000c4 	movi	r2,3
  80a6c4:	69c00415 	stw	r7,16(r13)
  80a6c8:	6a000215 	stw	r8,8(r13)
  80a6cc:	68800015 	stw	r2,0(r13)
  80a6d0:	69800315 	stw	r6,12(r13)
  80a6d4:	f800283a 	ret
  80a6d8:	4a84b03a 	or	r2,r9,r10
  80a6dc:	1000031e 	bne	r2,zero,80a6ec <__unpack_d+0x104>
  80a6e0:	00800104 	movi	r2,4
  80a6e4:	28800015 	stw	r2,0(r5)
  80a6e8:	f800283a 	ret
  80a6ec:	0009883a 	mov	r4,zero
  80a6f0:	01400234 	movhi	r5,8
  80a6f4:	4904703a 	and	r2,r9,r4
  80a6f8:	5146703a 	and	r3,r10,r5
  80a6fc:	10c4b03a 	or	r2,r2,r3
  80a700:	10000526 	beq	r2,zero,80a718 <__unpack_d+0x130>
  80a704:	00800044 	movi	r2,1
  80a708:	68800015 	stw	r2,0(r13)
  80a70c:	6b000415 	stw	r12,16(r13)
  80a710:	6ac00315 	stw	r11,12(r13)
  80a714:	f800283a 	ret
  80a718:	68000015 	stw	zero,0(r13)
  80a71c:	003ffb06 	br	80a70c <__unpack_d+0x124>

0080a720 <__fpcmp_parts_d>:
  80a720:	21800017 	ldw	r6,0(r4)
  80a724:	00c00044 	movi	r3,1
  80a728:	19800a2e 	bgeu	r3,r6,80a754 <__fpcmp_parts_d+0x34>
  80a72c:	28800017 	ldw	r2,0(r5)
  80a730:	1880082e 	bgeu	r3,r2,80a754 <__fpcmp_parts_d+0x34>
  80a734:	00c00104 	movi	r3,4
  80a738:	30c02626 	beq	r6,r3,80a7d4 <__fpcmp_parts_d+0xb4>
  80a73c:	10c02226 	beq	r2,r3,80a7c8 <__fpcmp_parts_d+0xa8>
  80a740:	00c00084 	movi	r3,2
  80a744:	30c00526 	beq	r6,r3,80a75c <__fpcmp_parts_d+0x3c>
  80a748:	10c0071e 	bne	r2,r3,80a768 <__fpcmp_parts_d+0x48>
  80a74c:	20800117 	ldw	r2,4(r4)
  80a750:	1000091e 	bne	r2,zero,80a778 <__fpcmp_parts_d+0x58>
  80a754:	00800044 	movi	r2,1
  80a758:	f800283a 	ret
  80a75c:	10c01a1e 	bne	r2,r3,80a7c8 <__fpcmp_parts_d+0xa8>
  80a760:	0005883a 	mov	r2,zero
  80a764:	f800283a 	ret
  80a768:	22000117 	ldw	r8,4(r4)
  80a76c:	28800117 	ldw	r2,4(r5)
  80a770:	40800326 	beq	r8,r2,80a780 <__fpcmp_parts_d+0x60>
  80a774:	403ff726 	beq	r8,zero,80a754 <__fpcmp_parts_d+0x34>
  80a778:	00bfffc4 	movi	r2,-1
  80a77c:	f800283a 	ret
  80a780:	20c00217 	ldw	r3,8(r4)
  80a784:	28800217 	ldw	r2,8(r5)
  80a788:	10fffa16 	blt	r2,r3,80a774 <__fpcmp_parts_d+0x54>
  80a78c:	18800916 	blt	r3,r2,80a7b4 <__fpcmp_parts_d+0x94>
  80a790:	21c00417 	ldw	r7,16(r4)
  80a794:	28c00417 	ldw	r3,16(r5)
  80a798:	21800317 	ldw	r6,12(r4)
  80a79c:	28800317 	ldw	r2,12(r5)
  80a7a0:	19fff436 	bltu	r3,r7,80a774 <__fpcmp_parts_d+0x54>
  80a7a4:	38c00526 	beq	r7,r3,80a7bc <__fpcmp_parts_d+0x9c>
  80a7a8:	38c00236 	bltu	r7,r3,80a7b4 <__fpcmp_parts_d+0x94>
  80a7ac:	19ffec1e 	bne	r3,r7,80a760 <__fpcmp_parts_d+0x40>
  80a7b0:	30bfeb2e 	bgeu	r6,r2,80a760 <__fpcmp_parts_d+0x40>
  80a7b4:	403fe71e 	bne	r8,zero,80a754 <__fpcmp_parts_d+0x34>
  80a7b8:	003fef06 	br	80a778 <__fpcmp_parts_d+0x58>
  80a7bc:	11bffa2e 	bgeu	r2,r6,80a7a8 <__fpcmp_parts_d+0x88>
  80a7c0:	403fe426 	beq	r8,zero,80a754 <__fpcmp_parts_d+0x34>
  80a7c4:	003fec06 	br	80a778 <__fpcmp_parts_d+0x58>
  80a7c8:	28800117 	ldw	r2,4(r5)
  80a7cc:	103fe11e 	bne	r2,zero,80a754 <__fpcmp_parts_d+0x34>
  80a7d0:	003fe906 	br	80a778 <__fpcmp_parts_d+0x58>
  80a7d4:	11bfdd1e 	bne	r2,r6,80a74c <__fpcmp_parts_d+0x2c>
  80a7d8:	28c00117 	ldw	r3,4(r5)
  80a7dc:	20800117 	ldw	r2,4(r4)
  80a7e0:	1885c83a 	sub	r2,r3,r2
  80a7e4:	f800283a 	ret

0080a7e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80a7e8:	defff804 	addi	sp,sp,-32
  80a7ec:	dfc00715 	stw	ra,28(sp)
  80a7f0:	df000615 	stw	fp,24(sp)
  80a7f4:	df000604 	addi	fp,sp,24
  80a7f8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80a7fc:	e0bffc17 	ldw	r2,-16(fp)
  80a800:	1004803a 	cmplt	r2,r2,zero
  80a804:	1000081e 	bne	r2,zero,80a828 <close+0x40>
  80a808:	e0bffc17 	ldw	r2,-16(fp)
  80a80c:	10800324 	muli	r2,r2,12
  80a810:	1007883a 	mov	r3,r2
  80a814:	00802074 	movhi	r2,129
  80a818:	10b9ef04 	addi	r2,r2,-6212
  80a81c:	1887883a 	add	r3,r3,r2
  80a820:	e0ffff15 	stw	r3,-4(fp)
  80a824:	00000106 	br	80a82c <close+0x44>
  80a828:	e03fff15 	stw	zero,-4(fp)
  80a82c:	e0bfff17 	ldw	r2,-4(fp)
  80a830:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80a834:	e0bffb17 	ldw	r2,-20(fp)
  80a838:	1005003a 	cmpeq	r2,r2,zero
  80a83c:	10001d1e 	bne	r2,zero,80a8b4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80a840:	e0bffb17 	ldw	r2,-20(fp)
  80a844:	10800017 	ldw	r2,0(r2)
  80a848:	10800417 	ldw	r2,16(r2)
  80a84c:	1005003a 	cmpeq	r2,r2,zero
  80a850:	1000071e 	bne	r2,zero,80a870 <close+0x88>
  80a854:	e0bffb17 	ldw	r2,-20(fp)
  80a858:	10800017 	ldw	r2,0(r2)
  80a85c:	10800417 	ldw	r2,16(r2)
  80a860:	e13ffb17 	ldw	r4,-20(fp)
  80a864:	103ee83a 	callr	r2
  80a868:	e0bffe15 	stw	r2,-8(fp)
  80a86c:	00000106 	br	80a874 <close+0x8c>
  80a870:	e03ffe15 	stw	zero,-8(fp)
  80a874:	e0bffe17 	ldw	r2,-8(fp)
  80a878:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80a87c:	e13ffc17 	ldw	r4,-16(fp)
  80a880:	080b02c0 	call	80b02c <alt_release_fd>
    if (rval < 0)
  80a884:	e0bffa17 	ldw	r2,-24(fp)
  80a888:	1004403a 	cmpge	r2,r2,zero
  80a88c:	1000071e 	bne	r2,zero,80a8ac <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80a890:	080a8e40 	call	80a8e4 <alt_get_errno>
  80a894:	e0fffa17 	ldw	r3,-24(fp)
  80a898:	00c7c83a 	sub	r3,zero,r3
  80a89c:	10c00015 	stw	r3,0(r2)
      return -1;
  80a8a0:	00bfffc4 	movi	r2,-1
  80a8a4:	e0bffd15 	stw	r2,-12(fp)
  80a8a8:	00000806 	br	80a8cc <close+0xe4>
    }
    return 0;
  80a8ac:	e03ffd15 	stw	zero,-12(fp)
  80a8b0:	00000606 	br	80a8cc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a8b4:	080a8e40 	call	80a8e4 <alt_get_errno>
  80a8b8:	1007883a 	mov	r3,r2
  80a8bc:	00801444 	movi	r2,81
  80a8c0:	18800015 	stw	r2,0(r3)
    return -1;
  80a8c4:	00bfffc4 	movi	r2,-1
  80a8c8:	e0bffd15 	stw	r2,-12(fp)
  80a8cc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80a8d0:	e037883a 	mov	sp,fp
  80a8d4:	dfc00117 	ldw	ra,4(sp)
  80a8d8:	df000017 	ldw	fp,0(sp)
  80a8dc:	dec00204 	addi	sp,sp,8
  80a8e0:	f800283a 	ret

0080a8e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a8e4:	defffd04 	addi	sp,sp,-12
  80a8e8:	dfc00215 	stw	ra,8(sp)
  80a8ec:	df000115 	stw	fp,4(sp)
  80a8f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a8f4:	00802074 	movhi	r2,129
  80a8f8:	10be7204 	addi	r2,r2,-1592
  80a8fc:	10800017 	ldw	r2,0(r2)
  80a900:	1005003a 	cmpeq	r2,r2,zero
  80a904:	1000061e 	bne	r2,zero,80a920 <alt_get_errno+0x3c>
  80a908:	00802074 	movhi	r2,129
  80a90c:	10be7204 	addi	r2,r2,-1592
  80a910:	10800017 	ldw	r2,0(r2)
  80a914:	103ee83a 	callr	r2
  80a918:	e0bfff15 	stw	r2,-4(fp)
  80a91c:	00000306 	br	80a92c <alt_get_errno+0x48>
  80a920:	00802074 	movhi	r2,129
  80a924:	10874f04 	addi	r2,r2,7484
  80a928:	e0bfff15 	stw	r2,-4(fp)
  80a92c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a930:	e037883a 	mov	sp,fp
  80a934:	dfc00117 	ldw	ra,4(sp)
  80a938:	df000017 	ldw	fp,0(sp)
  80a93c:	dec00204 	addi	sp,sp,8
  80a940:	f800283a 	ret

0080a944 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80a944:	defffc04 	addi	sp,sp,-16
  80a948:	df000315 	stw	fp,12(sp)
  80a94c:	df000304 	addi	fp,sp,12
  80a950:	e13ffd15 	stw	r4,-12(fp)
  80a954:	e17ffe15 	stw	r5,-8(fp)
  80a958:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80a95c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a960:	e037883a 	mov	sp,fp
  80a964:	df000017 	ldw	fp,0(sp)
  80a968:	dec00104 	addi	sp,sp,4
  80a96c:	f800283a 	ret

0080a970 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80a970:	defff904 	addi	sp,sp,-28
  80a974:	dfc00615 	stw	ra,24(sp)
  80a978:	df000515 	stw	fp,20(sp)
  80a97c:	df000504 	addi	fp,sp,20
  80a980:	e13ffc15 	stw	r4,-16(fp)
  80a984:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a988:	e0bffc17 	ldw	r2,-16(fp)
  80a98c:	1004803a 	cmplt	r2,r2,zero
  80a990:	1000081e 	bne	r2,zero,80a9b4 <fstat+0x44>
  80a994:	e0bffc17 	ldw	r2,-16(fp)
  80a998:	10800324 	muli	r2,r2,12
  80a99c:	1007883a 	mov	r3,r2
  80a9a0:	00802074 	movhi	r2,129
  80a9a4:	10b9ef04 	addi	r2,r2,-6212
  80a9a8:	1887883a 	add	r3,r3,r2
  80a9ac:	e0ffff15 	stw	r3,-4(fp)
  80a9b0:	00000106 	br	80a9b8 <fstat+0x48>
  80a9b4:	e03fff15 	stw	zero,-4(fp)
  80a9b8:	e0bfff17 	ldw	r2,-4(fp)
  80a9bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a9c0:	e0bffb17 	ldw	r2,-20(fp)
  80a9c4:	1005003a 	cmpeq	r2,r2,zero
  80a9c8:	1000121e 	bne	r2,zero,80aa14 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80a9cc:	e0bffb17 	ldw	r2,-20(fp)
  80a9d0:	10800017 	ldw	r2,0(r2)
  80a9d4:	10800817 	ldw	r2,32(r2)
  80a9d8:	1005003a 	cmpeq	r2,r2,zero
  80a9dc:	1000081e 	bne	r2,zero,80aa00 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80a9e0:	e0bffb17 	ldw	r2,-20(fp)
  80a9e4:	10800017 	ldw	r2,0(r2)
  80a9e8:	10800817 	ldw	r2,32(r2)
  80a9ec:	e13ffb17 	ldw	r4,-20(fp)
  80a9f0:	e17ffd17 	ldw	r5,-12(fp)
  80a9f4:	103ee83a 	callr	r2
  80a9f8:	e0bffe15 	stw	r2,-8(fp)
  80a9fc:	00000b06 	br	80aa2c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80aa00:	e0fffd17 	ldw	r3,-12(fp)
  80aa04:	00880004 	movi	r2,8192
  80aa08:	18800115 	stw	r2,4(r3)
      return 0;
  80aa0c:	e03ffe15 	stw	zero,-8(fp)
  80aa10:	00000606 	br	80aa2c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80aa14:	080aa440 	call	80aa44 <alt_get_errno>
  80aa18:	1007883a 	mov	r3,r2
  80aa1c:	00801444 	movi	r2,81
  80aa20:	18800015 	stw	r2,0(r3)
    return -1;
  80aa24:	00bfffc4 	movi	r2,-1
  80aa28:	e0bffe15 	stw	r2,-8(fp)
  80aa2c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80aa30:	e037883a 	mov	sp,fp
  80aa34:	dfc00117 	ldw	ra,4(sp)
  80aa38:	df000017 	ldw	fp,0(sp)
  80aa3c:	dec00204 	addi	sp,sp,8
  80aa40:	f800283a 	ret

0080aa44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80aa44:	defffd04 	addi	sp,sp,-12
  80aa48:	dfc00215 	stw	ra,8(sp)
  80aa4c:	df000115 	stw	fp,4(sp)
  80aa50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80aa54:	00802074 	movhi	r2,129
  80aa58:	10be7204 	addi	r2,r2,-1592
  80aa5c:	10800017 	ldw	r2,0(r2)
  80aa60:	1005003a 	cmpeq	r2,r2,zero
  80aa64:	1000061e 	bne	r2,zero,80aa80 <alt_get_errno+0x3c>
  80aa68:	00802074 	movhi	r2,129
  80aa6c:	10be7204 	addi	r2,r2,-1592
  80aa70:	10800017 	ldw	r2,0(r2)
  80aa74:	103ee83a 	callr	r2
  80aa78:	e0bfff15 	stw	r2,-4(fp)
  80aa7c:	00000306 	br	80aa8c <alt_get_errno+0x48>
  80aa80:	00802074 	movhi	r2,129
  80aa84:	10874f04 	addi	r2,r2,7484
  80aa88:	e0bfff15 	stw	r2,-4(fp)
  80aa8c:	e0bfff17 	ldw	r2,-4(fp)
}
  80aa90:	e037883a 	mov	sp,fp
  80aa94:	dfc00117 	ldw	ra,4(sp)
  80aa98:	df000017 	ldw	fp,0(sp)
  80aa9c:	dec00204 	addi	sp,sp,8
  80aaa0:	f800283a 	ret

0080aaa4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80aaa4:	deffeb04 	addi	sp,sp,-84
  80aaa8:	dfc01415 	stw	ra,80(sp)
  80aaac:	df001315 	stw	fp,76(sp)
  80aab0:	df001304 	addi	fp,sp,76
  80aab4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80aab8:	e0bffd17 	ldw	r2,-12(fp)
  80aabc:	1004803a 	cmplt	r2,r2,zero
  80aac0:	1000081e 	bne	r2,zero,80aae4 <isatty+0x40>
  80aac4:	e0bffd17 	ldw	r2,-12(fp)
  80aac8:	10800324 	muli	r2,r2,12
  80aacc:	1007883a 	mov	r3,r2
  80aad0:	00802074 	movhi	r2,129
  80aad4:	10b9ef04 	addi	r2,r2,-6212
  80aad8:	1887883a 	add	r3,r3,r2
  80aadc:	e0ffff15 	stw	r3,-4(fp)
  80aae0:	00000106 	br	80aae8 <isatty+0x44>
  80aae4:	e03fff15 	stw	zero,-4(fp)
  80aae8:	e0bfff17 	ldw	r2,-4(fp)
  80aaec:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80aaf0:	e0bfed17 	ldw	r2,-76(fp)
  80aaf4:	1005003a 	cmpeq	r2,r2,zero
  80aaf8:	10000f1e 	bne	r2,zero,80ab38 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80aafc:	e0bfed17 	ldw	r2,-76(fp)
  80ab00:	10800017 	ldw	r2,0(r2)
  80ab04:	10800817 	ldw	r2,32(r2)
  80ab08:	1004c03a 	cmpne	r2,r2,zero
  80ab0c:	1000031e 	bne	r2,zero,80ab1c <isatty+0x78>
    {
      return 1;
  80ab10:	00800044 	movi	r2,1
  80ab14:	e0bffe15 	stw	r2,-8(fp)
  80ab18:	00000c06 	br	80ab4c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80ab1c:	e17fee04 	addi	r5,fp,-72
  80ab20:	e13ffd17 	ldw	r4,-12(fp)
  80ab24:	080a9700 	call	80a970 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80ab28:	e0bfef17 	ldw	r2,-68(fp)
  80ab2c:	10880020 	cmpeqi	r2,r2,8192
  80ab30:	e0bffe15 	stw	r2,-8(fp)
  80ab34:	00000506 	br	80ab4c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ab38:	080ab640 	call	80ab64 <alt_get_errno>
  80ab3c:	1007883a 	mov	r3,r2
  80ab40:	00801444 	movi	r2,81
  80ab44:	18800015 	stw	r2,0(r3)
    return 0;
  80ab48:	e03ffe15 	stw	zero,-8(fp)
  80ab4c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80ab50:	e037883a 	mov	sp,fp
  80ab54:	dfc00117 	ldw	ra,4(sp)
  80ab58:	df000017 	ldw	fp,0(sp)
  80ab5c:	dec00204 	addi	sp,sp,8
  80ab60:	f800283a 	ret

0080ab64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ab64:	defffd04 	addi	sp,sp,-12
  80ab68:	dfc00215 	stw	ra,8(sp)
  80ab6c:	df000115 	stw	fp,4(sp)
  80ab70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ab74:	00802074 	movhi	r2,129
  80ab78:	10be7204 	addi	r2,r2,-1592
  80ab7c:	10800017 	ldw	r2,0(r2)
  80ab80:	1005003a 	cmpeq	r2,r2,zero
  80ab84:	1000061e 	bne	r2,zero,80aba0 <alt_get_errno+0x3c>
  80ab88:	00802074 	movhi	r2,129
  80ab8c:	10be7204 	addi	r2,r2,-1592
  80ab90:	10800017 	ldw	r2,0(r2)
  80ab94:	103ee83a 	callr	r2
  80ab98:	e0bfff15 	stw	r2,-4(fp)
  80ab9c:	00000306 	br	80abac <alt_get_errno+0x48>
  80aba0:	00802074 	movhi	r2,129
  80aba4:	10874f04 	addi	r2,r2,7484
  80aba8:	e0bfff15 	stw	r2,-4(fp)
  80abac:	e0bfff17 	ldw	r2,-4(fp)
}
  80abb0:	e037883a 	mov	sp,fp
  80abb4:	dfc00117 	ldw	ra,4(sp)
  80abb8:	df000017 	ldw	fp,0(sp)
  80abbc:	dec00204 	addi	sp,sp,8
  80abc0:	f800283a 	ret

0080abc4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80abc4:	defffe04 	addi	sp,sp,-8
  80abc8:	dfc00115 	stw	ra,4(sp)
  80abcc:	df000015 	stw	fp,0(sp)
  80abd0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80abd4:	01002074 	movhi	r4,129
  80abd8:	213e7704 	addi	r4,r4,-1572
  80abdc:	01402074 	movhi	r5,129
  80abe0:	2975a304 	addi	r5,r5,-10612
  80abe4:	01802074 	movhi	r6,129
  80abe8:	31be7704 	addi	r6,r6,-1572
  80abec:	080ac440 	call	80ac44 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80abf0:	01002034 	movhi	r4,128
  80abf4:	21000804 	addi	r4,r4,32
  80abf8:	01402034 	movhi	r5,128
  80abfc:	29400804 	addi	r5,r5,32
  80ac00:	01802034 	movhi	r6,128
  80ac04:	31806d04 	addi	r6,r6,436
  80ac08:	080ac440 	call	80ac44 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80ac0c:	01002074 	movhi	r4,129
  80ac10:	21346904 	addi	r4,r4,-11868
  80ac14:	01402074 	movhi	r5,129
  80ac18:	29746904 	addi	r5,r5,-11868
  80ac1c:	01802074 	movhi	r6,129
  80ac20:	31b5a304 	addi	r6,r6,-10612
  80ac24:	080ac440 	call	80ac44 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80ac28:	080bf780 	call	80bf78 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80ac2c:	080c1700 	call	80c170 <alt_icache_flush_all>
}
  80ac30:	e037883a 	mov	sp,fp
  80ac34:	dfc00117 	ldw	ra,4(sp)
  80ac38:	df000017 	ldw	fp,0(sp)
  80ac3c:	dec00204 	addi	sp,sp,8
  80ac40:	f800283a 	ret

0080ac44 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80ac44:	defffc04 	addi	sp,sp,-16
  80ac48:	df000315 	stw	fp,12(sp)
  80ac4c:	df000304 	addi	fp,sp,12
  80ac50:	e13ffd15 	stw	r4,-12(fp)
  80ac54:	e17ffe15 	stw	r5,-8(fp)
  80ac58:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80ac5c:	e0fffe17 	ldw	r3,-8(fp)
  80ac60:	e0bffd17 	ldw	r2,-12(fp)
  80ac64:	18800e26 	beq	r3,r2,80aca0 <alt_load_section+0x5c>
  {
    while( to != end )
  80ac68:	00000a06 	br	80ac94 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80ac6c:	e0bffd17 	ldw	r2,-12(fp)
  80ac70:	10c00017 	ldw	r3,0(r2)
  80ac74:	e0bffe17 	ldw	r2,-8(fp)
  80ac78:	10c00015 	stw	r3,0(r2)
  80ac7c:	e0bffe17 	ldw	r2,-8(fp)
  80ac80:	10800104 	addi	r2,r2,4
  80ac84:	e0bffe15 	stw	r2,-8(fp)
  80ac88:	e0bffd17 	ldw	r2,-12(fp)
  80ac8c:	10800104 	addi	r2,r2,4
  80ac90:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80ac94:	e0fffe17 	ldw	r3,-8(fp)
  80ac98:	e0bfff17 	ldw	r2,-4(fp)
  80ac9c:	18bff31e 	bne	r3,r2,80ac6c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80aca0:	e037883a 	mov	sp,fp
  80aca4:	df000017 	ldw	fp,0(sp)
  80aca8:	dec00104 	addi	sp,sp,4
  80acac:	f800283a 	ret

0080acb0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80acb0:	defff804 	addi	sp,sp,-32
  80acb4:	dfc00715 	stw	ra,28(sp)
  80acb8:	df000615 	stw	fp,24(sp)
  80acbc:	df000604 	addi	fp,sp,24
  80acc0:	e13ffc15 	stw	r4,-16(fp)
  80acc4:	e17ffd15 	stw	r5,-12(fp)
  80acc8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80accc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80acd0:	e0bffc17 	ldw	r2,-16(fp)
  80acd4:	1004803a 	cmplt	r2,r2,zero
  80acd8:	1000081e 	bne	r2,zero,80acfc <lseek+0x4c>
  80acdc:	e0bffc17 	ldw	r2,-16(fp)
  80ace0:	10800324 	muli	r2,r2,12
  80ace4:	1007883a 	mov	r3,r2
  80ace8:	00802074 	movhi	r2,129
  80acec:	10b9ef04 	addi	r2,r2,-6212
  80acf0:	1887883a 	add	r3,r3,r2
  80acf4:	e0ffff15 	stw	r3,-4(fp)
  80acf8:	00000106 	br	80ad00 <lseek+0x50>
  80acfc:	e03fff15 	stw	zero,-4(fp)
  80ad00:	e0bfff17 	ldw	r2,-4(fp)
  80ad04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80ad08:	e0bffb17 	ldw	r2,-20(fp)
  80ad0c:	1005003a 	cmpeq	r2,r2,zero
  80ad10:	1000111e 	bne	r2,zero,80ad58 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80ad14:	e0bffb17 	ldw	r2,-20(fp)
  80ad18:	10800017 	ldw	r2,0(r2)
  80ad1c:	10800717 	ldw	r2,28(r2)
  80ad20:	1005003a 	cmpeq	r2,r2,zero
  80ad24:	1000091e 	bne	r2,zero,80ad4c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80ad28:	e0bffb17 	ldw	r2,-20(fp)
  80ad2c:	10800017 	ldw	r2,0(r2)
  80ad30:	10800717 	ldw	r2,28(r2)
  80ad34:	e13ffb17 	ldw	r4,-20(fp)
  80ad38:	e17ffd17 	ldw	r5,-12(fp)
  80ad3c:	e1bffe17 	ldw	r6,-8(fp)
  80ad40:	103ee83a 	callr	r2
  80ad44:	e0bffa15 	stw	r2,-24(fp)
  80ad48:	00000506 	br	80ad60 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80ad4c:	00bfde84 	movi	r2,-134
  80ad50:	e0bffa15 	stw	r2,-24(fp)
  80ad54:	00000206 	br	80ad60 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80ad58:	00bfebc4 	movi	r2,-81
  80ad5c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80ad60:	e0bffa17 	ldw	r2,-24(fp)
  80ad64:	1004403a 	cmpge	r2,r2,zero
  80ad68:	1000071e 	bne	r2,zero,80ad88 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80ad6c:	080ada00 	call	80ada0 <alt_get_errno>
  80ad70:	1007883a 	mov	r3,r2
  80ad74:	e0bffa17 	ldw	r2,-24(fp)
  80ad78:	0085c83a 	sub	r2,zero,r2
  80ad7c:	18800015 	stw	r2,0(r3)
    rc = -1;
  80ad80:	00bfffc4 	movi	r2,-1
  80ad84:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80ad88:	e0bffa17 	ldw	r2,-24(fp)
}
  80ad8c:	e037883a 	mov	sp,fp
  80ad90:	dfc00117 	ldw	ra,4(sp)
  80ad94:	df000017 	ldw	fp,0(sp)
  80ad98:	dec00204 	addi	sp,sp,8
  80ad9c:	f800283a 	ret

0080ada0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ada0:	defffd04 	addi	sp,sp,-12
  80ada4:	dfc00215 	stw	ra,8(sp)
  80ada8:	df000115 	stw	fp,4(sp)
  80adac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80adb0:	00802074 	movhi	r2,129
  80adb4:	10be7204 	addi	r2,r2,-1592
  80adb8:	10800017 	ldw	r2,0(r2)
  80adbc:	1005003a 	cmpeq	r2,r2,zero
  80adc0:	1000061e 	bne	r2,zero,80addc <alt_get_errno+0x3c>
  80adc4:	00802074 	movhi	r2,129
  80adc8:	10be7204 	addi	r2,r2,-1592
  80adcc:	10800017 	ldw	r2,0(r2)
  80add0:	103ee83a 	callr	r2
  80add4:	e0bfff15 	stw	r2,-4(fp)
  80add8:	00000306 	br	80ade8 <alt_get_errno+0x48>
  80addc:	00802074 	movhi	r2,129
  80ade0:	10874f04 	addi	r2,r2,7484
  80ade4:	e0bfff15 	stw	r2,-4(fp)
  80ade8:	e0bfff17 	ldw	r2,-4(fp)
}
  80adec:	e037883a 	mov	sp,fp
  80adf0:	dfc00117 	ldw	ra,4(sp)
  80adf4:	df000017 	ldw	fp,0(sp)
  80adf8:	dec00204 	addi	sp,sp,8
  80adfc:	f800283a 	ret

0080ae00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80ae00:	defffd04 	addi	sp,sp,-12
  80ae04:	dfc00215 	stw	ra,8(sp)
  80ae08:	df000115 	stw	fp,4(sp)
  80ae0c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80ae10:	0009883a 	mov	r4,zero
  80ae14:	080b2c80 	call	80b2c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80ae18:	080b2fc0 	call	80b2fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80ae1c:	01002074 	movhi	r4,129
  80ae20:	21359904 	addi	r4,r4,-10652
  80ae24:	01402074 	movhi	r5,129
  80ae28:	29759904 	addi	r5,r5,-10652
  80ae2c:	01802074 	movhi	r6,129
  80ae30:	31b59904 	addi	r6,r6,-10652
  80ae34:	080c5300 	call	80c530 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80ae38:	080c0a80 	call	80c0a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80ae3c:	01002074 	movhi	r4,129
  80ae40:	21304304 	addi	r4,r4,-16116
  80ae44:	080cd2c0 	call	80cd2c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80ae48:	d128ec17 	ldw	r4,-23632(gp)
  80ae4c:	d168ed17 	ldw	r5,-23628(gp)
  80ae50:	d1a8ee17 	ldw	r6,-23624(gp)
  80ae54:	08001f00 	call	8001f0 <main>
  80ae58:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80ae5c:	01000044 	movi	r4,1
  80ae60:	080a7e80 	call	80a7e8 <close>
  exit (result);
  80ae64:	e13fff17 	ldw	r4,-4(fp)
  80ae68:	080cd400 	call	80cd40 <exit>

0080ae6c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80ae6c:	defffe04 	addi	sp,sp,-8
  80ae70:	df000115 	stw	fp,4(sp)
  80ae74:	df000104 	addi	fp,sp,4
  80ae78:	e13fff15 	stw	r4,-4(fp)
}
  80ae7c:	e037883a 	mov	sp,fp
  80ae80:	df000017 	ldw	fp,0(sp)
  80ae84:	dec00104 	addi	sp,sp,4
  80ae88:	f800283a 	ret

0080ae8c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80ae8c:	defffe04 	addi	sp,sp,-8
  80ae90:	df000115 	stw	fp,4(sp)
  80ae94:	df000104 	addi	fp,sp,4
  80ae98:	e13fff15 	stw	r4,-4(fp)
}
  80ae9c:	e037883a 	mov	sp,fp
  80aea0:	df000017 	ldw	fp,0(sp)
  80aea4:	dec00104 	addi	sp,sp,4
  80aea8:	f800283a 	ret

0080aeac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80aeac:	defff704 	addi	sp,sp,-36
  80aeb0:	dfc00815 	stw	ra,32(sp)
  80aeb4:	df000715 	stw	fp,28(sp)
  80aeb8:	df000704 	addi	fp,sp,28
  80aebc:	e13ffb15 	stw	r4,-20(fp)
  80aec0:	e17ffc15 	stw	r5,-16(fp)
  80aec4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80aec8:	e0bffb17 	ldw	r2,-20(fp)
  80aecc:	1004803a 	cmplt	r2,r2,zero
  80aed0:	1000081e 	bne	r2,zero,80aef4 <read+0x48>
  80aed4:	e0bffb17 	ldw	r2,-20(fp)
  80aed8:	10800324 	muli	r2,r2,12
  80aedc:	1007883a 	mov	r3,r2
  80aee0:	00802074 	movhi	r2,129
  80aee4:	10b9ef04 	addi	r2,r2,-6212
  80aee8:	1887883a 	add	r3,r3,r2
  80aeec:	e0ffff15 	stw	r3,-4(fp)
  80aef0:	00000106 	br	80aef8 <read+0x4c>
  80aef4:	e03fff15 	stw	zero,-4(fp)
  80aef8:	e0bfff17 	ldw	r2,-4(fp)
  80aefc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80af00:	e0bffa17 	ldw	r2,-24(fp)
  80af04:	1005003a 	cmpeq	r2,r2,zero
  80af08:	1000241e 	bne	r2,zero,80af9c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80af0c:	e0bffa17 	ldw	r2,-24(fp)
  80af10:	10800217 	ldw	r2,8(r2)
  80af14:	108000cc 	andi	r2,r2,3
  80af18:	10800060 	cmpeqi	r2,r2,1
  80af1c:	10001a1e 	bne	r2,zero,80af88 <read+0xdc>
  80af20:	e0bffa17 	ldw	r2,-24(fp)
  80af24:	10800017 	ldw	r2,0(r2)
  80af28:	10800517 	ldw	r2,20(r2)
  80af2c:	1005003a 	cmpeq	r2,r2,zero
  80af30:	1000151e 	bne	r2,zero,80af88 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80af34:	e0bffa17 	ldw	r2,-24(fp)
  80af38:	10800017 	ldw	r2,0(r2)
  80af3c:	10800517 	ldw	r2,20(r2)
  80af40:	e17ffc17 	ldw	r5,-16(fp)
  80af44:	e1bffd17 	ldw	r6,-12(fp)
  80af48:	e13ffa17 	ldw	r4,-24(fp)
  80af4c:	103ee83a 	callr	r2
  80af50:	e0bff915 	stw	r2,-28(fp)
  80af54:	e0bff917 	ldw	r2,-28(fp)
  80af58:	1004403a 	cmpge	r2,r2,zero
  80af5c:	1000071e 	bne	r2,zero,80af7c <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80af60:	080afcc0 	call	80afcc <alt_get_errno>
  80af64:	e0fff917 	ldw	r3,-28(fp)
  80af68:	00c7c83a 	sub	r3,zero,r3
  80af6c:	10c00015 	stw	r3,0(r2)
          return -1;
  80af70:	00bfffc4 	movi	r2,-1
  80af74:	e0bffe15 	stw	r2,-8(fp)
  80af78:	00000e06 	br	80afb4 <read+0x108>
        }
        return rval;
  80af7c:	e0bff917 	ldw	r2,-28(fp)
  80af80:	e0bffe15 	stw	r2,-8(fp)
  80af84:	00000b06 	br	80afb4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80af88:	080afcc0 	call	80afcc <alt_get_errno>
  80af8c:	1007883a 	mov	r3,r2
  80af90:	00800344 	movi	r2,13
  80af94:	18800015 	stw	r2,0(r3)
  80af98:	00000406 	br	80afac <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80af9c:	080afcc0 	call	80afcc <alt_get_errno>
  80afa0:	1007883a 	mov	r3,r2
  80afa4:	00801444 	movi	r2,81
  80afa8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80afac:	00bfffc4 	movi	r2,-1
  80afb0:	e0bffe15 	stw	r2,-8(fp)
  80afb4:	e0bffe17 	ldw	r2,-8(fp)
}
  80afb8:	e037883a 	mov	sp,fp
  80afbc:	dfc00117 	ldw	ra,4(sp)
  80afc0:	df000017 	ldw	fp,0(sp)
  80afc4:	dec00204 	addi	sp,sp,8
  80afc8:	f800283a 	ret

0080afcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80afcc:	defffd04 	addi	sp,sp,-12
  80afd0:	dfc00215 	stw	ra,8(sp)
  80afd4:	df000115 	stw	fp,4(sp)
  80afd8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80afdc:	00802074 	movhi	r2,129
  80afe0:	10be7204 	addi	r2,r2,-1592
  80afe4:	10800017 	ldw	r2,0(r2)
  80afe8:	1005003a 	cmpeq	r2,r2,zero
  80afec:	1000061e 	bne	r2,zero,80b008 <alt_get_errno+0x3c>
  80aff0:	00802074 	movhi	r2,129
  80aff4:	10be7204 	addi	r2,r2,-1592
  80aff8:	10800017 	ldw	r2,0(r2)
  80affc:	103ee83a 	callr	r2
  80b000:	e0bfff15 	stw	r2,-4(fp)
  80b004:	00000306 	br	80b014 <alt_get_errno+0x48>
  80b008:	00802074 	movhi	r2,129
  80b00c:	10874f04 	addi	r2,r2,7484
  80b010:	e0bfff15 	stw	r2,-4(fp)
  80b014:	e0bfff17 	ldw	r2,-4(fp)
}
  80b018:	e037883a 	mov	sp,fp
  80b01c:	dfc00117 	ldw	ra,4(sp)
  80b020:	df000017 	ldw	fp,0(sp)
  80b024:	dec00204 	addi	sp,sp,8
  80b028:	f800283a 	ret

0080b02c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80b02c:	defffe04 	addi	sp,sp,-8
  80b030:	df000115 	stw	fp,4(sp)
  80b034:	df000104 	addi	fp,sp,4
  80b038:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80b03c:	e0bfff17 	ldw	r2,-4(fp)
  80b040:	108000d0 	cmplti	r2,r2,3
  80b044:	10000d1e 	bne	r2,zero,80b07c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80b048:	e0bfff17 	ldw	r2,-4(fp)
  80b04c:	00c02074 	movhi	r3,129
  80b050:	18f9ef04 	addi	r3,r3,-6212
  80b054:	10800324 	muli	r2,r2,12
  80b058:	10c5883a 	add	r2,r2,r3
  80b05c:	10800204 	addi	r2,r2,8
  80b060:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80b064:	e0bfff17 	ldw	r2,-4(fp)
  80b068:	00c02074 	movhi	r3,129
  80b06c:	18f9ef04 	addi	r3,r3,-6212
  80b070:	10800324 	muli	r2,r2,12
  80b074:	10c5883a 	add	r2,r2,r3
  80b078:	10000015 	stw	zero,0(r2)
  }
}
  80b07c:	e037883a 	mov	sp,fp
  80b080:	df000017 	ldw	fp,0(sp)
  80b084:	dec00104 	addi	sp,sp,4
  80b088:	f800283a 	ret

0080b08c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80b08c:	defff804 	addi	sp,sp,-32
  80b090:	df000715 	stw	fp,28(sp)
  80b094:	df000704 	addi	fp,sp,28
  80b098:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b09c:	0005303a 	rdctl	r2,status
  80b0a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b0a4:	e0fffb17 	ldw	r3,-20(fp)
  80b0a8:	00bfff84 	movi	r2,-2
  80b0ac:	1884703a 	and	r2,r3,r2
  80b0b0:	1001703a 	wrctl	status,r2
  
  return context;
  80b0b4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80b0b8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80b0bc:	d0a00c17 	ldw	r2,-32720(gp)
  80b0c0:	10c000c4 	addi	r3,r2,3
  80b0c4:	00bfff04 	movi	r2,-4
  80b0c8:	1884703a 	and	r2,r3,r2
  80b0cc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80b0d0:	d0e00c17 	ldw	r3,-32720(gp)
  80b0d4:	e0bffe17 	ldw	r2,-8(fp)
  80b0d8:	1887883a 	add	r3,r3,r2
  80b0dc:	00804034 	movhi	r2,256
  80b0e0:	10800004 	addi	r2,r2,0
  80b0e4:	10c0072e 	bgeu	r2,r3,80b104 <sbrk+0x78>
  80b0e8:	e0bffd17 	ldw	r2,-12(fp)
  80b0ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b0f0:	e0bffa17 	ldw	r2,-24(fp)
  80b0f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80b0f8:	00bfffc4 	movi	r2,-1
  80b0fc:	e0bfff15 	stw	r2,-4(fp)
  80b100:	00000c06 	br	80b134 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80b104:	d0a00c17 	ldw	r2,-32720(gp)
  80b108:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80b10c:	d0e00c17 	ldw	r3,-32720(gp)
  80b110:	e0bffe17 	ldw	r2,-8(fp)
  80b114:	1885883a 	add	r2,r3,r2
  80b118:	d0a00c15 	stw	r2,-32720(gp)
  80b11c:	e0bffd17 	ldw	r2,-12(fp)
  80b120:	e0bff915 	stw	r2,-28(fp)
  80b124:	e0bff917 	ldw	r2,-28(fp)
  80b128:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80b12c:	e0bffc17 	ldw	r2,-16(fp)
  80b130:	e0bfff15 	stw	r2,-4(fp)
  80b134:	e0bfff17 	ldw	r2,-4(fp)
} 
  80b138:	e037883a 	mov	sp,fp
  80b13c:	df000017 	ldw	fp,0(sp)
  80b140:	dec00104 	addi	sp,sp,4
  80b144:	f800283a 	ret

0080b148 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80b148:	defff704 	addi	sp,sp,-36
  80b14c:	dfc00815 	stw	ra,32(sp)
  80b150:	df000715 	stw	fp,28(sp)
  80b154:	df000704 	addi	fp,sp,28
  80b158:	e13ffb15 	stw	r4,-20(fp)
  80b15c:	e17ffc15 	stw	r5,-16(fp)
  80b160:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b164:	e0bffb17 	ldw	r2,-20(fp)
  80b168:	1004803a 	cmplt	r2,r2,zero
  80b16c:	1000081e 	bne	r2,zero,80b190 <write+0x48>
  80b170:	e0bffb17 	ldw	r2,-20(fp)
  80b174:	10800324 	muli	r2,r2,12
  80b178:	1007883a 	mov	r3,r2
  80b17c:	00802074 	movhi	r2,129
  80b180:	10b9ef04 	addi	r2,r2,-6212
  80b184:	1887883a 	add	r3,r3,r2
  80b188:	e0ffff15 	stw	r3,-4(fp)
  80b18c:	00000106 	br	80b194 <write+0x4c>
  80b190:	e03fff15 	stw	zero,-4(fp)
  80b194:	e0bfff17 	ldw	r2,-4(fp)
  80b198:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80b19c:	e0bffa17 	ldw	r2,-24(fp)
  80b1a0:	1005003a 	cmpeq	r2,r2,zero
  80b1a4:	1000241e 	bne	r2,zero,80b238 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80b1a8:	e0bffa17 	ldw	r2,-24(fp)
  80b1ac:	10800217 	ldw	r2,8(r2)
  80b1b0:	108000cc 	andi	r2,r2,3
  80b1b4:	1005003a 	cmpeq	r2,r2,zero
  80b1b8:	10001a1e 	bne	r2,zero,80b224 <write+0xdc>
  80b1bc:	e0bffa17 	ldw	r2,-24(fp)
  80b1c0:	10800017 	ldw	r2,0(r2)
  80b1c4:	10800617 	ldw	r2,24(r2)
  80b1c8:	1005003a 	cmpeq	r2,r2,zero
  80b1cc:	1000151e 	bne	r2,zero,80b224 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80b1d0:	e0bffa17 	ldw	r2,-24(fp)
  80b1d4:	10800017 	ldw	r2,0(r2)
  80b1d8:	10800617 	ldw	r2,24(r2)
  80b1dc:	e17ffc17 	ldw	r5,-16(fp)
  80b1e0:	e1bffd17 	ldw	r6,-12(fp)
  80b1e4:	e13ffa17 	ldw	r4,-24(fp)
  80b1e8:	103ee83a 	callr	r2
  80b1ec:	e0bff915 	stw	r2,-28(fp)
  80b1f0:	e0bff917 	ldw	r2,-28(fp)
  80b1f4:	1004403a 	cmpge	r2,r2,zero
  80b1f8:	1000071e 	bne	r2,zero,80b218 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80b1fc:	080b2680 	call	80b268 <alt_get_errno>
  80b200:	e0fff917 	ldw	r3,-28(fp)
  80b204:	00c7c83a 	sub	r3,zero,r3
  80b208:	10c00015 	stw	r3,0(r2)
        return -1;
  80b20c:	00bfffc4 	movi	r2,-1
  80b210:	e0bffe15 	stw	r2,-8(fp)
  80b214:	00000e06 	br	80b250 <write+0x108>
      }
      return rval;
  80b218:	e0bff917 	ldw	r2,-28(fp)
  80b21c:	e0bffe15 	stw	r2,-8(fp)
  80b220:	00000b06 	br	80b250 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80b224:	080b2680 	call	80b268 <alt_get_errno>
  80b228:	1007883a 	mov	r3,r2
  80b22c:	00800344 	movi	r2,13
  80b230:	18800015 	stw	r2,0(r3)
  80b234:	00000406 	br	80b248 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80b238:	080b2680 	call	80b268 <alt_get_errno>
  80b23c:	1007883a 	mov	r3,r2
  80b240:	00801444 	movi	r2,81
  80b244:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80b248:	00bfffc4 	movi	r2,-1
  80b24c:	e0bffe15 	stw	r2,-8(fp)
  80b250:	e0bffe17 	ldw	r2,-8(fp)
}
  80b254:	e037883a 	mov	sp,fp
  80b258:	dfc00117 	ldw	ra,4(sp)
  80b25c:	df000017 	ldw	fp,0(sp)
  80b260:	dec00204 	addi	sp,sp,8
  80b264:	f800283a 	ret

0080b268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b268:	defffd04 	addi	sp,sp,-12
  80b26c:	dfc00215 	stw	ra,8(sp)
  80b270:	df000115 	stw	fp,4(sp)
  80b274:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b278:	00802074 	movhi	r2,129
  80b27c:	10be7204 	addi	r2,r2,-1592
  80b280:	10800017 	ldw	r2,0(r2)
  80b284:	1005003a 	cmpeq	r2,r2,zero
  80b288:	1000061e 	bne	r2,zero,80b2a4 <alt_get_errno+0x3c>
  80b28c:	00802074 	movhi	r2,129
  80b290:	10be7204 	addi	r2,r2,-1592
  80b294:	10800017 	ldw	r2,0(r2)
  80b298:	103ee83a 	callr	r2
  80b29c:	e0bfff15 	stw	r2,-4(fp)
  80b2a0:	00000306 	br	80b2b0 <alt_get_errno+0x48>
  80b2a4:	00802074 	movhi	r2,129
  80b2a8:	10874f04 	addi	r2,r2,7484
  80b2ac:	e0bfff15 	stw	r2,-4(fp)
  80b2b0:	e0bfff17 	ldw	r2,-4(fp)
}
  80b2b4:	e037883a 	mov	sp,fp
  80b2b8:	dfc00117 	ldw	ra,4(sp)
  80b2bc:	df000017 	ldw	fp,0(sp)
  80b2c0:	dec00204 	addi	sp,sp,8
  80b2c4:	f800283a 	ret

0080b2c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80b2c8:	defffd04 	addi	sp,sp,-12
  80b2cc:	dfc00215 	stw	ra,8(sp)
  80b2d0:	df000115 	stw	fp,4(sp)
  80b2d4:	df000104 	addi	fp,sp,4
  80b2d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
  80b2dc:	080ca100 	call	80ca10 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80b2e0:	00800044 	movi	r2,1
  80b2e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80b2e8:	e037883a 	mov	sp,fp
  80b2ec:	dfc00117 	ldw	ra,4(sp)
  80b2f0:	df000017 	ldw	fp,0(sp)
  80b2f4:	dec00204 	addi	sp,sp,8
  80b2f8:	f800283a 	ret

0080b2fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80b2fc:	defffe04 	addi	sp,sp,-8
  80b300:	dfc00115 	stw	ra,4(sp)
  80b304:	df000015 	stw	fp,0(sp)
  80b308:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80b30c:	01002074 	movhi	r4,129
  80b310:	213a5904 	addi	r4,r4,-5788
  80b314:	000b883a 	mov	r5,zero
  80b318:	000d883a 	mov	r6,zero
  80b31c:	080b4c00 	call	80b4c0 <altera_avalon_jtag_uart_init>
  80b320:	01002074 	movhi	r4,129
  80b324:	213a4f04 	addi	r4,r4,-5828
  80b328:	080b3400 	call	80b340 <alt_dev_reg>
}
  80b32c:	e037883a 	mov	sp,fp
  80b330:	dfc00117 	ldw	ra,4(sp)
  80b334:	df000017 	ldw	fp,0(sp)
  80b338:	dec00204 	addi	sp,sp,8
  80b33c:	f800283a 	ret

0080b340 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80b340:	defffd04 	addi	sp,sp,-12
  80b344:	dfc00215 	stw	ra,8(sp)
  80b348:	df000115 	stw	fp,4(sp)
  80b34c:	df000104 	addi	fp,sp,4
  80b350:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80b354:	e13fff17 	ldw	r4,-4(fp)
  80b358:	01402074 	movhi	r5,129
  80b35c:	297e6f04 	addi	r5,r5,-1604
  80b360:	080bf940 	call	80bf94 <alt_dev_llist_insert>
}
  80b364:	e037883a 	mov	sp,fp
  80b368:	dfc00117 	ldw	ra,4(sp)
  80b36c:	df000017 	ldw	fp,0(sp)
  80b370:	dec00204 	addi	sp,sp,8
  80b374:	f800283a 	ret

0080b378 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80b378:	defffa04 	addi	sp,sp,-24
  80b37c:	dfc00515 	stw	ra,20(sp)
  80b380:	df000415 	stw	fp,16(sp)
  80b384:	df000404 	addi	fp,sp,16
  80b388:	e13ffd15 	stw	r4,-12(fp)
  80b38c:	e17ffe15 	stw	r5,-8(fp)
  80b390:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b394:	e0bffd17 	ldw	r2,-12(fp)
  80b398:	10800017 	ldw	r2,0(r2)
  80b39c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80b3a0:	e0bffc17 	ldw	r2,-16(fp)
  80b3a4:	11000a04 	addi	r4,r2,40
  80b3a8:	e0bffd17 	ldw	r2,-12(fp)
  80b3ac:	11c00217 	ldw	r7,8(r2)
  80b3b0:	e17ffe17 	ldw	r5,-8(fp)
  80b3b4:	e1bfff17 	ldw	r6,-4(fp)
  80b3b8:	080b9c00 	call	80b9c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80b3bc:	e037883a 	mov	sp,fp
  80b3c0:	dfc00117 	ldw	ra,4(sp)
  80b3c4:	df000017 	ldw	fp,0(sp)
  80b3c8:	dec00204 	addi	sp,sp,8
  80b3cc:	f800283a 	ret

0080b3d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80b3d0:	defffa04 	addi	sp,sp,-24
  80b3d4:	dfc00515 	stw	ra,20(sp)
  80b3d8:	df000415 	stw	fp,16(sp)
  80b3dc:	df000404 	addi	fp,sp,16
  80b3e0:	e13ffd15 	stw	r4,-12(fp)
  80b3e4:	e17ffe15 	stw	r5,-8(fp)
  80b3e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b3ec:	e0bffd17 	ldw	r2,-12(fp)
  80b3f0:	10800017 	ldw	r2,0(r2)
  80b3f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80b3f8:	e0bffc17 	ldw	r2,-16(fp)
  80b3fc:	11000a04 	addi	r4,r2,40
  80b400:	e0bffd17 	ldw	r2,-12(fp)
  80b404:	11c00217 	ldw	r7,8(r2)
  80b408:	e17ffe17 	ldw	r5,-8(fp)
  80b40c:	e1bfff17 	ldw	r6,-4(fp)
  80b410:	080bbe40 	call	80bbe4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80b414:	e037883a 	mov	sp,fp
  80b418:	dfc00117 	ldw	ra,4(sp)
  80b41c:	df000017 	ldw	fp,0(sp)
  80b420:	dec00204 	addi	sp,sp,8
  80b424:	f800283a 	ret

0080b428 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80b428:	defffc04 	addi	sp,sp,-16
  80b42c:	dfc00315 	stw	ra,12(sp)
  80b430:	df000215 	stw	fp,8(sp)
  80b434:	df000204 	addi	fp,sp,8
  80b438:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b43c:	e0bfff17 	ldw	r2,-4(fp)
  80b440:	10800017 	ldw	r2,0(r2)
  80b444:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80b448:	e0bffe17 	ldw	r2,-8(fp)
  80b44c:	11000a04 	addi	r4,r2,40
  80b450:	e0bfff17 	ldw	r2,-4(fp)
  80b454:	11400217 	ldw	r5,8(r2)
  80b458:	080b8580 	call	80b858 <altera_avalon_jtag_uart_close>
}
  80b45c:	e037883a 	mov	sp,fp
  80b460:	dfc00117 	ldw	ra,4(sp)
  80b464:	df000017 	ldw	fp,0(sp)
  80b468:	dec00204 	addi	sp,sp,8
  80b46c:	f800283a 	ret

0080b470 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80b470:	defffa04 	addi	sp,sp,-24
  80b474:	dfc00515 	stw	ra,20(sp)
  80b478:	df000415 	stw	fp,16(sp)
  80b47c:	df000404 	addi	fp,sp,16
  80b480:	e13ffd15 	stw	r4,-12(fp)
  80b484:	e17ffe15 	stw	r5,-8(fp)
  80b488:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80b48c:	e0bffd17 	ldw	r2,-12(fp)
  80b490:	10800017 	ldw	r2,0(r2)
  80b494:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80b498:	e0bffc17 	ldw	r2,-16(fp)
  80b49c:	11000a04 	addi	r4,r2,40
  80b4a0:	e17ffe17 	ldw	r5,-8(fp)
  80b4a4:	e1bfff17 	ldw	r6,-4(fp)
  80b4a8:	080b8cc0 	call	80b8cc <altera_avalon_jtag_uart_ioctl>
}
  80b4ac:	e037883a 	mov	sp,fp
  80b4b0:	dfc00117 	ldw	ra,4(sp)
  80b4b4:	df000017 	ldw	fp,0(sp)
  80b4b8:	dec00204 	addi	sp,sp,8
  80b4bc:	f800283a 	ret

0080b4c0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80b4c0:	defffa04 	addi	sp,sp,-24
  80b4c4:	dfc00515 	stw	ra,20(sp)
  80b4c8:	df000415 	stw	fp,16(sp)
  80b4cc:	df000404 	addi	fp,sp,16
  80b4d0:	e13ffd15 	stw	r4,-12(fp)
  80b4d4:	e17ffe15 	stw	r5,-8(fp)
  80b4d8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b4dc:	e0fffd17 	ldw	r3,-12(fp)
  80b4e0:	00800044 	movi	r2,1
  80b4e4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80b4e8:	e0bffd17 	ldw	r2,-12(fp)
  80b4ec:	10800017 	ldw	r2,0(r2)
  80b4f0:	11000104 	addi	r4,r2,4
  80b4f4:	e0bffd17 	ldw	r2,-12(fp)
  80b4f8:	10800817 	ldw	r2,32(r2)
  80b4fc:	1007883a 	mov	r3,r2
  80b500:	2005883a 	mov	r2,r4
  80b504:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80b508:	e13ffe17 	ldw	r4,-8(fp)
  80b50c:	e17fff17 	ldw	r5,-4(fp)
  80b510:	d8000015 	stw	zero,0(sp)
  80b514:	01802074 	movhi	r6,129
  80b518:	31ad6004 	addi	r6,r6,-19072
  80b51c:	e1fffd17 	ldw	r7,-12(fp)
  80b520:	080c1a00 	call	80c1a0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80b524:	e0bffd17 	ldw	r2,-12(fp)
  80b528:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80b52c:	e0bffd17 	ldw	r2,-12(fp)
  80b530:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80b534:	00802074 	movhi	r2,129
  80b538:	10875704 	addi	r2,r2,7516
  80b53c:	10800017 	ldw	r2,0(r2)
  80b540:	100b883a 	mov	r5,r2
  80b544:	01802074 	movhi	r6,129
  80b548:	31adea04 	addi	r6,r6,-18520
  80b54c:	e1fffd17 	ldw	r7,-12(fp)
  80b550:	080be240 	call	80be24 <alt_alarm_start>
  80b554:	1004403a 	cmpge	r2,r2,zero
  80b558:	1000041e 	bne	r2,zero,80b56c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80b55c:	e0fffd17 	ldw	r3,-12(fp)
  80b560:	00a00034 	movhi	r2,32768
  80b564:	10bfffc4 	addi	r2,r2,-1
  80b568:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80b56c:	e037883a 	mov	sp,fp
  80b570:	dfc00117 	ldw	ra,4(sp)
  80b574:	df000017 	ldw	fp,0(sp)
  80b578:	dec00204 	addi	sp,sp,8
  80b57c:	f800283a 	ret

0080b580 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80b580:	defff804 	addi	sp,sp,-32
  80b584:	df000715 	stw	fp,28(sp)
  80b588:	df000704 	addi	fp,sp,28
  80b58c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80b590:	e0bfff17 	ldw	r2,-4(fp)
  80b594:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80b598:	e0bffe17 	ldw	r2,-8(fp)
  80b59c:	10800017 	ldw	r2,0(r2)
  80b5a0:	e0bffd15 	stw	r2,-12(fp)
  80b5a4:	00000006 	br	80b5a8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b5a8:	e0bffd17 	ldw	r2,-12(fp)
  80b5ac:	10800104 	addi	r2,r2,4
  80b5b0:	10800037 	ldwio	r2,0(r2)
  80b5b4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80b5b8:	e0bffc17 	ldw	r2,-16(fp)
  80b5bc:	1080c00c 	andi	r2,r2,768
  80b5c0:	1005003a 	cmpeq	r2,r2,zero
  80b5c4:	1000741e 	bne	r2,zero,80b798 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80b5c8:	e0bffc17 	ldw	r2,-16(fp)
  80b5cc:	1080400c 	andi	r2,r2,256
  80b5d0:	1005003a 	cmpeq	r2,r2,zero
  80b5d4:	1000351e 	bne	r2,zero,80b6ac <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80b5d8:	00800074 	movhi	r2,1
  80b5dc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b5e0:	e0bffe17 	ldw	r2,-8(fp)
  80b5e4:	10800a17 	ldw	r2,40(r2)
  80b5e8:	10800044 	addi	r2,r2,1
  80b5ec:	1081ffcc 	andi	r2,r2,2047
  80b5f0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80b5f4:	e0bffe17 	ldw	r2,-8(fp)
  80b5f8:	10c00b17 	ldw	r3,44(r2)
  80b5fc:	e0bffa17 	ldw	r2,-24(fp)
  80b600:	18801626 	beq	r3,r2,80b65c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80b604:	e0bffd17 	ldw	r2,-12(fp)
  80b608:	10800037 	ldwio	r2,0(r2)
  80b60c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80b610:	e0bffb17 	ldw	r2,-20(fp)
  80b614:	10a0000c 	andi	r2,r2,32768
  80b618:	1005003a 	cmpeq	r2,r2,zero
  80b61c:	10000f1e 	bne	r2,zero,80b65c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80b620:	e0bffe17 	ldw	r2,-8(fp)
  80b624:	10c00a17 	ldw	r3,40(r2)
  80b628:	e0bffb17 	ldw	r2,-20(fp)
  80b62c:	1009883a 	mov	r4,r2
  80b630:	e0bffe17 	ldw	r2,-8(fp)
  80b634:	1885883a 	add	r2,r3,r2
  80b638:	10800e04 	addi	r2,r2,56
  80b63c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b640:	e0bffe17 	ldw	r2,-8(fp)
  80b644:	10800a17 	ldw	r2,40(r2)
  80b648:	10800044 	addi	r2,r2,1
  80b64c:	10c1ffcc 	andi	r3,r2,2047
  80b650:	e0bffe17 	ldw	r2,-8(fp)
  80b654:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80b658:	003fe106 	br	80b5e0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80b65c:	e0bffb17 	ldw	r2,-20(fp)
  80b660:	10bfffec 	andhi	r2,r2,65535
  80b664:	1005003a 	cmpeq	r2,r2,zero
  80b668:	1000101e 	bne	r2,zero,80b6ac <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b66c:	e0bffe17 	ldw	r2,-8(fp)
  80b670:	10c00817 	ldw	r3,32(r2)
  80b674:	00bfff84 	movi	r2,-2
  80b678:	1886703a 	and	r3,r3,r2
  80b67c:	e0bffe17 	ldw	r2,-8(fp)
  80b680:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80b684:	e0bffd17 	ldw	r2,-12(fp)
  80b688:	11000104 	addi	r4,r2,4
  80b68c:	e0bffe17 	ldw	r2,-8(fp)
  80b690:	10800817 	ldw	r2,32(r2)
  80b694:	1007883a 	mov	r3,r2
  80b698:	2005883a 	mov	r2,r4
  80b69c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b6a0:	e0bffd17 	ldw	r2,-12(fp)
  80b6a4:	10800104 	addi	r2,r2,4
  80b6a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80b6ac:	e0bffc17 	ldw	r2,-16(fp)
  80b6b0:	1080800c 	andi	r2,r2,512
  80b6b4:	1005003a 	cmpeq	r2,r2,zero
  80b6b8:	103fbb1e 	bne	r2,zero,80b5a8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80b6bc:	e0bffc17 	ldw	r2,-16(fp)
  80b6c0:	10bfffec 	andhi	r2,r2,65535
  80b6c4:	1004d43a 	srli	r2,r2,16
  80b6c8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b6cc:	00001506 	br	80b724 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80b6d0:	e13ffd17 	ldw	r4,-12(fp)
  80b6d4:	e0bffe17 	ldw	r2,-8(fp)
  80b6d8:	10c00d17 	ldw	r3,52(r2)
  80b6dc:	e0bffe17 	ldw	r2,-8(fp)
  80b6e0:	1885883a 	add	r2,r3,r2
  80b6e4:	10820e04 	addi	r2,r2,2104
  80b6e8:	10800003 	ldbu	r2,0(r2)
  80b6ec:	10c03fcc 	andi	r3,r2,255
  80b6f0:	18c0201c 	xori	r3,r3,128
  80b6f4:	18ffe004 	addi	r3,r3,-128
  80b6f8:	2005883a 	mov	r2,r4
  80b6fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b700:	e0bffe17 	ldw	r2,-8(fp)
  80b704:	10800d17 	ldw	r2,52(r2)
  80b708:	10800044 	addi	r2,r2,1
  80b70c:	10c1ffcc 	andi	r3,r2,2047
  80b710:	e0bffe17 	ldw	r2,-8(fp)
  80b714:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80b718:	e0bff917 	ldw	r2,-28(fp)
  80b71c:	10bfffc4 	addi	r2,r2,-1
  80b720:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b724:	e0bff917 	ldw	r2,-28(fp)
  80b728:	1005003a 	cmpeq	r2,r2,zero
  80b72c:	1000051e 	bne	r2,zero,80b744 <altera_avalon_jtag_uart_irq+0x1c4>
  80b730:	e0bffe17 	ldw	r2,-8(fp)
  80b734:	10c00d17 	ldw	r3,52(r2)
  80b738:	e0bffe17 	ldw	r2,-8(fp)
  80b73c:	10800c17 	ldw	r2,48(r2)
  80b740:	18bfe31e 	bne	r3,r2,80b6d0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80b744:	e0bff917 	ldw	r2,-28(fp)
  80b748:	1005003a 	cmpeq	r2,r2,zero
  80b74c:	103f961e 	bne	r2,zero,80b5a8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b750:	e0bffe17 	ldw	r2,-8(fp)
  80b754:	10c00817 	ldw	r3,32(r2)
  80b758:	00bfff44 	movi	r2,-3
  80b75c:	1886703a 	and	r3,r3,r2
  80b760:	e0bffe17 	ldw	r2,-8(fp)
  80b764:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b768:	e0bffe17 	ldw	r2,-8(fp)
  80b76c:	10800017 	ldw	r2,0(r2)
  80b770:	11000104 	addi	r4,r2,4
  80b774:	e0bffe17 	ldw	r2,-8(fp)
  80b778:	10800817 	ldw	r2,32(r2)
  80b77c:	1007883a 	mov	r3,r2
  80b780:	2005883a 	mov	r2,r4
  80b784:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b788:	e0bffd17 	ldw	r2,-12(fp)
  80b78c:	10800104 	addi	r2,r2,4
  80b790:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80b794:	003f8406 	br	80b5a8 <altera_avalon_jtag_uart_irq+0x28>
}
  80b798:	e037883a 	mov	sp,fp
  80b79c:	df000017 	ldw	fp,0(sp)
  80b7a0:	dec00104 	addi	sp,sp,4
  80b7a4:	f800283a 	ret

0080b7a8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80b7a8:	defffc04 	addi	sp,sp,-16
  80b7ac:	df000315 	stw	fp,12(sp)
  80b7b0:	df000304 	addi	fp,sp,12
  80b7b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80b7b8:	e0bfff17 	ldw	r2,-4(fp)
  80b7bc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80b7c0:	e0bffe17 	ldw	r2,-8(fp)
  80b7c4:	10800017 	ldw	r2,0(r2)
  80b7c8:	10800104 	addi	r2,r2,4
  80b7cc:	10800037 	ldwio	r2,0(r2)
  80b7d0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80b7d4:	e0bffd17 	ldw	r2,-12(fp)
  80b7d8:	1081000c 	andi	r2,r2,1024
  80b7dc:	1005003a 	cmpeq	r2,r2,zero
  80b7e0:	10000c1e 	bne	r2,zero,80b814 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80b7e4:	e0bffe17 	ldw	r2,-8(fp)
  80b7e8:	10800017 	ldw	r2,0(r2)
  80b7ec:	11000104 	addi	r4,r2,4
  80b7f0:	e0bffe17 	ldw	r2,-8(fp)
  80b7f4:	10800817 	ldw	r2,32(r2)
  80b7f8:	10810014 	ori	r2,r2,1024
  80b7fc:	1007883a 	mov	r3,r2
  80b800:	2005883a 	mov	r2,r4
  80b804:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80b808:	e0bffe17 	ldw	r2,-8(fp)
  80b80c:	10000915 	stw	zero,36(r2)
  80b810:	00000a06 	br	80b83c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80b814:	e0bffe17 	ldw	r2,-8(fp)
  80b818:	10c00917 	ldw	r3,36(r2)
  80b81c:	00a00034 	movhi	r2,32768
  80b820:	10bfff04 	addi	r2,r2,-4
  80b824:	10c00536 	bltu	r2,r3,80b83c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80b828:	e0bffe17 	ldw	r2,-8(fp)
  80b82c:	10800917 	ldw	r2,36(r2)
  80b830:	10c00044 	addi	r3,r2,1
  80b834:	e0bffe17 	ldw	r2,-8(fp)
  80b838:	10c00915 	stw	r3,36(r2)
  80b83c:	00802074 	movhi	r2,129
  80b840:	10875704 	addi	r2,r2,7516
  80b844:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80b848:	e037883a 	mov	sp,fp
  80b84c:	df000017 	ldw	fp,0(sp)
  80b850:	dec00104 	addi	sp,sp,4
  80b854:	f800283a 	ret

0080b858 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80b858:	defffc04 	addi	sp,sp,-16
  80b85c:	df000315 	stw	fp,12(sp)
  80b860:	df000304 	addi	fp,sp,12
  80b864:	e13ffd15 	stw	r4,-12(fp)
  80b868:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b86c:	00000706 	br	80b88c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80b870:	e0bffe17 	ldw	r2,-8(fp)
  80b874:	1090000c 	andi	r2,r2,16384
  80b878:	1005003a 	cmpeq	r2,r2,zero
  80b87c:	1000031e 	bne	r2,zero,80b88c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80b880:	00bffd44 	movi	r2,-11
  80b884:	e0bfff15 	stw	r2,-4(fp)
  80b888:	00000b06 	br	80b8b8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b88c:	e0bffd17 	ldw	r2,-12(fp)
  80b890:	10c00d17 	ldw	r3,52(r2)
  80b894:	e0bffd17 	ldw	r2,-12(fp)
  80b898:	10800c17 	ldw	r2,48(r2)
  80b89c:	18800526 	beq	r3,r2,80b8b4 <altera_avalon_jtag_uart_close+0x5c>
  80b8a0:	e0bffd17 	ldw	r2,-12(fp)
  80b8a4:	10c00917 	ldw	r3,36(r2)
  80b8a8:	e0bffd17 	ldw	r2,-12(fp)
  80b8ac:	10800117 	ldw	r2,4(r2)
  80b8b0:	18bfef36 	bltu	r3,r2,80b870 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80b8b4:	e03fff15 	stw	zero,-4(fp)
  80b8b8:	e0bfff17 	ldw	r2,-4(fp)
}
  80b8bc:	e037883a 	mov	sp,fp
  80b8c0:	df000017 	ldw	fp,0(sp)
  80b8c4:	dec00104 	addi	sp,sp,4
  80b8c8:	f800283a 	ret

0080b8cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80b8cc:	defff804 	addi	sp,sp,-32
  80b8d0:	df000715 	stw	fp,28(sp)
  80b8d4:	df000704 	addi	fp,sp,28
  80b8d8:	e13ffb15 	stw	r4,-20(fp)
  80b8dc:	e17ffc15 	stw	r5,-16(fp)
  80b8e0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80b8e4:	00bff9c4 	movi	r2,-25
  80b8e8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80b8ec:	e0bffc17 	ldw	r2,-16(fp)
  80b8f0:	e0bfff15 	stw	r2,-4(fp)
  80b8f4:	e0ffff17 	ldw	r3,-4(fp)
  80b8f8:	189a8060 	cmpeqi	r2,r3,27137
  80b8fc:	1000041e 	bne	r2,zero,80b910 <altera_avalon_jtag_uart_ioctl+0x44>
  80b900:	e0ffff17 	ldw	r3,-4(fp)
  80b904:	189a80a0 	cmpeqi	r2,r3,27138
  80b908:	10001b1e 	bne	r2,zero,80b978 <altera_avalon_jtag_uart_ioctl+0xac>
  80b90c:	00002706 	br	80b9ac <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80b910:	e0bffb17 	ldw	r2,-20(fp)
  80b914:	10c00117 	ldw	r3,4(r2)
  80b918:	00a00034 	movhi	r2,32768
  80b91c:	10bfffc4 	addi	r2,r2,-1
  80b920:	18802226 	beq	r3,r2,80b9ac <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80b924:	e0bffd17 	ldw	r2,-12(fp)
  80b928:	10800017 	ldw	r2,0(r2)
  80b92c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80b930:	e0bff917 	ldw	r2,-28(fp)
  80b934:	10800090 	cmplti	r2,r2,2
  80b938:	1000071e 	bne	r2,zero,80b958 <altera_avalon_jtag_uart_ioctl+0x8c>
  80b93c:	e0fff917 	ldw	r3,-28(fp)
  80b940:	00a00034 	movhi	r2,32768
  80b944:	10bfffc4 	addi	r2,r2,-1
  80b948:	18800326 	beq	r3,r2,80b958 <altera_avalon_jtag_uart_ioctl+0x8c>
  80b94c:	e0bff917 	ldw	r2,-28(fp)
  80b950:	e0bffe15 	stw	r2,-8(fp)
  80b954:	00000306 	br	80b964 <altera_avalon_jtag_uart_ioctl+0x98>
  80b958:	00e00034 	movhi	r3,32768
  80b95c:	18ffff84 	addi	r3,r3,-2
  80b960:	e0fffe15 	stw	r3,-8(fp)
  80b964:	e0bffb17 	ldw	r2,-20(fp)
  80b968:	e0fffe17 	ldw	r3,-8(fp)
  80b96c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80b970:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80b974:	00000d06 	br	80b9ac <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80b978:	e0bffb17 	ldw	r2,-20(fp)
  80b97c:	10c00117 	ldw	r3,4(r2)
  80b980:	00a00034 	movhi	r2,32768
  80b984:	10bfffc4 	addi	r2,r2,-1
  80b988:	18800826 	beq	r3,r2,80b9ac <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80b98c:	e13ffd17 	ldw	r4,-12(fp)
  80b990:	e0bffb17 	ldw	r2,-20(fp)
  80b994:	10c00917 	ldw	r3,36(r2)
  80b998:	e0bffb17 	ldw	r2,-20(fp)
  80b99c:	10800117 	ldw	r2,4(r2)
  80b9a0:	1885803a 	cmpltu	r2,r3,r2
  80b9a4:	20800015 	stw	r2,0(r4)
      rc = 0;
  80b9a8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80b9ac:	e0bffa17 	ldw	r2,-24(fp)
}
  80b9b0:	e037883a 	mov	sp,fp
  80b9b4:	df000017 	ldw	fp,0(sp)
  80b9b8:	dec00104 	addi	sp,sp,4
  80b9bc:	f800283a 	ret

0080b9c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80b9c0:	defff204 	addi	sp,sp,-56
  80b9c4:	dfc00d15 	stw	ra,52(sp)
  80b9c8:	df000c15 	stw	fp,48(sp)
  80b9cc:	df000c04 	addi	fp,sp,48
  80b9d0:	e13ffb15 	stw	r4,-20(fp)
  80b9d4:	e17ffc15 	stw	r5,-16(fp)
  80b9d8:	e1bffd15 	stw	r6,-12(fp)
  80b9dc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80b9e0:	e0bffc17 	ldw	r2,-16(fp)
  80b9e4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b9e8:	00004806 	br	80bb0c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80b9ec:	e0bffb17 	ldw	r2,-20(fp)
  80b9f0:	10800a17 	ldw	r2,40(r2)
  80b9f4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80b9f8:	e0bffb17 	ldw	r2,-20(fp)
  80b9fc:	10800b17 	ldw	r2,44(r2)
  80ba00:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80ba04:	e0fff717 	ldw	r3,-36(fp)
  80ba08:	e0bff617 	ldw	r2,-40(fp)
  80ba0c:	18800536 	bltu	r3,r2,80ba24 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80ba10:	e0bff717 	ldw	r2,-36(fp)
  80ba14:	e0fff617 	ldw	r3,-40(fp)
  80ba18:	10c5c83a 	sub	r2,r2,r3
  80ba1c:	e0bff815 	stw	r2,-32(fp)
  80ba20:	00000406 	br	80ba34 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80ba24:	00820004 	movi	r2,2048
  80ba28:	e0fff617 	ldw	r3,-40(fp)
  80ba2c:	10c5c83a 	sub	r2,r2,r3
  80ba30:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80ba34:	e0bff817 	ldw	r2,-32(fp)
  80ba38:	1005003a 	cmpeq	r2,r2,zero
  80ba3c:	10001f1e 	bne	r2,zero,80babc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80ba40:	e0fffd17 	ldw	r3,-12(fp)
  80ba44:	e0bff817 	ldw	r2,-32(fp)
  80ba48:	1880022e 	bgeu	r3,r2,80ba54 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80ba4c:	e0bffd17 	ldw	r2,-12(fp)
  80ba50:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80ba54:	e0bffb17 	ldw	r2,-20(fp)
  80ba58:	10c00e04 	addi	r3,r2,56
  80ba5c:	e0bff617 	ldw	r2,-40(fp)
  80ba60:	1887883a 	add	r3,r3,r2
  80ba64:	e0bffa17 	ldw	r2,-24(fp)
  80ba68:	1009883a 	mov	r4,r2
  80ba6c:	180b883a 	mov	r5,r3
  80ba70:	e1bff817 	ldw	r6,-32(fp)
  80ba74:	0801c740 	call	801c74 <memcpy>
      ptr   += n;
  80ba78:	e0fff817 	ldw	r3,-32(fp)
  80ba7c:	e0bffa17 	ldw	r2,-24(fp)
  80ba80:	10c5883a 	add	r2,r2,r3
  80ba84:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80ba88:	e0fffd17 	ldw	r3,-12(fp)
  80ba8c:	e0bff817 	ldw	r2,-32(fp)
  80ba90:	1885c83a 	sub	r2,r3,r2
  80ba94:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ba98:	e0fff617 	ldw	r3,-40(fp)
  80ba9c:	e0bff817 	ldw	r2,-32(fp)
  80baa0:	1885883a 	add	r2,r3,r2
  80baa4:	10c1ffcc 	andi	r3,r2,2047
  80baa8:	e0bffb17 	ldw	r2,-20(fp)
  80baac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80bab0:	e0bffd17 	ldw	r2,-12(fp)
  80bab4:	10800048 	cmpgei	r2,r2,1
  80bab8:	103fcc1e 	bne	r2,zero,80b9ec <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80babc:	e0fffa17 	ldw	r3,-24(fp)
  80bac0:	e0bffc17 	ldw	r2,-16(fp)
  80bac4:	1880141e 	bne	r3,r2,80bb18 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80bac8:	e0bffe17 	ldw	r2,-8(fp)
  80bacc:	1090000c 	andi	r2,r2,16384
  80bad0:	1004c03a 	cmpne	r2,r2,zero
  80bad4:	1000101e 	bne	r2,zero,80bb18 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80bad8:	e0bffb17 	ldw	r2,-20(fp)
  80badc:	10c00a17 	ldw	r3,40(r2)
  80bae0:	e0bff717 	ldw	r2,-36(fp)
  80bae4:	1880051e 	bne	r3,r2,80bafc <altera_avalon_jtag_uart_read+0x13c>
  80bae8:	e0bffb17 	ldw	r2,-20(fp)
  80baec:	10c00917 	ldw	r3,36(r2)
  80baf0:	e0bffb17 	ldw	r2,-20(fp)
  80baf4:	10800117 	ldw	r2,4(r2)
  80baf8:	18bff736 	bltu	r3,r2,80bad8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80bafc:	e0bffb17 	ldw	r2,-20(fp)
  80bb00:	10c00a17 	ldw	r3,40(r2)
  80bb04:	e0bff717 	ldw	r2,-36(fp)
  80bb08:	18800326 	beq	r3,r2,80bb18 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80bb0c:	e0bffd17 	ldw	r2,-12(fp)
  80bb10:	10800048 	cmpgei	r2,r2,1
  80bb14:	103fb51e 	bne	r2,zero,80b9ec <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80bb18:	e0fffa17 	ldw	r3,-24(fp)
  80bb1c:	e0bffc17 	ldw	r2,-16(fp)
  80bb20:	18801926 	beq	r3,r2,80bb88 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bb24:	0005303a 	rdctl	r2,status
  80bb28:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bb2c:	e0fff517 	ldw	r3,-44(fp)
  80bb30:	00bfff84 	movi	r2,-2
  80bb34:	1884703a 	and	r2,r3,r2
  80bb38:	1001703a 	wrctl	status,r2
  
  return context;
  80bb3c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80bb40:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80bb44:	e0bffb17 	ldw	r2,-20(fp)
  80bb48:	10800817 	ldw	r2,32(r2)
  80bb4c:	10c00054 	ori	r3,r2,1
  80bb50:	e0bffb17 	ldw	r2,-20(fp)
  80bb54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80bb58:	e0bffb17 	ldw	r2,-20(fp)
  80bb5c:	10800017 	ldw	r2,0(r2)
  80bb60:	11000104 	addi	r4,r2,4
  80bb64:	e0bffb17 	ldw	r2,-20(fp)
  80bb68:	10800817 	ldw	r2,32(r2)
  80bb6c:	1007883a 	mov	r3,r2
  80bb70:	2005883a 	mov	r2,r4
  80bb74:	10c00035 	stwio	r3,0(r2)
  80bb78:	e0bff917 	ldw	r2,-28(fp)
  80bb7c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb80:	e0bff417 	ldw	r2,-48(fp)
  80bb84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80bb88:	e0fffa17 	ldw	r3,-24(fp)
  80bb8c:	e0bffc17 	ldw	r2,-16(fp)
  80bb90:	18800526 	beq	r3,r2,80bba8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80bb94:	e0fffa17 	ldw	r3,-24(fp)
  80bb98:	e0bffc17 	ldw	r2,-16(fp)
  80bb9c:	1887c83a 	sub	r3,r3,r2
  80bba0:	e0ffff15 	stw	r3,-4(fp)
  80bba4:	00000906 	br	80bbcc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80bba8:	e0bffe17 	ldw	r2,-8(fp)
  80bbac:	1090000c 	andi	r2,r2,16384
  80bbb0:	1005003a 	cmpeq	r2,r2,zero
  80bbb4:	1000031e 	bne	r2,zero,80bbc4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80bbb8:	00bffd44 	movi	r2,-11
  80bbbc:	e0bfff15 	stw	r2,-4(fp)
  80bbc0:	00000206 	br	80bbcc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80bbc4:	00bffec4 	movi	r2,-5
  80bbc8:	e0bfff15 	stw	r2,-4(fp)
  80bbcc:	e0bfff17 	ldw	r2,-4(fp)
}
  80bbd0:	e037883a 	mov	sp,fp
  80bbd4:	dfc00117 	ldw	ra,4(sp)
  80bbd8:	df000017 	ldw	fp,0(sp)
  80bbdc:	dec00204 	addi	sp,sp,8
  80bbe0:	f800283a 	ret

0080bbe4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80bbe4:	defff204 	addi	sp,sp,-56
  80bbe8:	dfc00d15 	stw	ra,52(sp)
  80bbec:	df000c15 	stw	fp,48(sp)
  80bbf0:	df000c04 	addi	fp,sp,48
  80bbf4:	e13ffb15 	stw	r4,-20(fp)
  80bbf8:	e17ffc15 	stw	r5,-16(fp)
  80bbfc:	e1bffd15 	stw	r6,-12(fp)
  80bc00:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80bc04:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80bc08:	e0bffc17 	ldw	r2,-16(fp)
  80bc0c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80bc10:	00003a06 	br	80bcfc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80bc14:	e0bffb17 	ldw	r2,-20(fp)
  80bc18:	10800c17 	ldw	r2,48(r2)
  80bc1c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80bc20:	e0bffb17 	ldw	r2,-20(fp)
  80bc24:	10800d17 	ldw	r2,52(r2)
  80bc28:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80bc2c:	e0fffa17 	ldw	r3,-24(fp)
  80bc30:	e0bff917 	ldw	r2,-28(fp)
  80bc34:	1880062e 	bgeu	r3,r2,80bc50 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80bc38:	e0fff917 	ldw	r3,-28(fp)
  80bc3c:	e0bffa17 	ldw	r2,-24(fp)
  80bc40:	1885c83a 	sub	r2,r3,r2
  80bc44:	10bfffc4 	addi	r2,r2,-1
  80bc48:	e0bff815 	stw	r2,-32(fp)
  80bc4c:	00000c06 	br	80bc80 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80bc50:	e0bff917 	ldw	r2,-28(fp)
  80bc54:	1005003a 	cmpeq	r2,r2,zero
  80bc58:	1000051e 	bne	r2,zero,80bc70 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80bc5c:	00820004 	movi	r2,2048
  80bc60:	e0fffa17 	ldw	r3,-24(fp)
  80bc64:	10c5c83a 	sub	r2,r2,r3
  80bc68:	e0bff815 	stw	r2,-32(fp)
  80bc6c:	00000406 	br	80bc80 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80bc70:	0081ffc4 	movi	r2,2047
  80bc74:	e0fffa17 	ldw	r3,-24(fp)
  80bc78:	10c5c83a 	sub	r2,r2,r3
  80bc7c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80bc80:	e0bff817 	ldw	r2,-32(fp)
  80bc84:	1005003a 	cmpeq	r2,r2,zero
  80bc88:	10001f1e 	bne	r2,zero,80bd08 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80bc8c:	e0fffd17 	ldw	r3,-12(fp)
  80bc90:	e0bff817 	ldw	r2,-32(fp)
  80bc94:	1880022e 	bgeu	r3,r2,80bca0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80bc98:	e0bffd17 	ldw	r2,-12(fp)
  80bc9c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80bca0:	e0bffb17 	ldw	r2,-20(fp)
  80bca4:	10c20e04 	addi	r3,r2,2104
  80bca8:	e0bffa17 	ldw	r2,-24(fp)
  80bcac:	1885883a 	add	r2,r3,r2
  80bcb0:	e0fffc17 	ldw	r3,-16(fp)
  80bcb4:	1009883a 	mov	r4,r2
  80bcb8:	180b883a 	mov	r5,r3
  80bcbc:	e1bff817 	ldw	r6,-32(fp)
  80bcc0:	0801c740 	call	801c74 <memcpy>
      ptr   += n;
  80bcc4:	e0fff817 	ldw	r3,-32(fp)
  80bcc8:	e0bffc17 	ldw	r2,-16(fp)
  80bccc:	10c5883a 	add	r2,r2,r3
  80bcd0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80bcd4:	e0fffd17 	ldw	r3,-12(fp)
  80bcd8:	e0bff817 	ldw	r2,-32(fp)
  80bcdc:	1885c83a 	sub	r2,r3,r2
  80bce0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bce4:	e0fffa17 	ldw	r3,-24(fp)
  80bce8:	e0bff817 	ldw	r2,-32(fp)
  80bcec:	1885883a 	add	r2,r3,r2
  80bcf0:	10c1ffcc 	andi	r3,r2,2047
  80bcf4:	e0bffb17 	ldw	r2,-20(fp)
  80bcf8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80bcfc:	e0bffd17 	ldw	r2,-12(fp)
  80bd00:	10800048 	cmpgei	r2,r2,1
  80bd04:	103fc31e 	bne	r2,zero,80bc14 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bd08:	0005303a 	rdctl	r2,status
  80bd0c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bd10:	e0fff517 	ldw	r3,-44(fp)
  80bd14:	00bfff84 	movi	r2,-2
  80bd18:	1884703a 	and	r2,r3,r2
  80bd1c:	1001703a 	wrctl	status,r2
  
  return context;
  80bd20:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80bd24:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80bd28:	e0bffb17 	ldw	r2,-20(fp)
  80bd2c:	10800817 	ldw	r2,32(r2)
  80bd30:	10c00094 	ori	r3,r2,2
  80bd34:	e0bffb17 	ldw	r2,-20(fp)
  80bd38:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80bd3c:	e0bffb17 	ldw	r2,-20(fp)
  80bd40:	10800017 	ldw	r2,0(r2)
  80bd44:	11000104 	addi	r4,r2,4
  80bd48:	e0bffb17 	ldw	r2,-20(fp)
  80bd4c:	10800817 	ldw	r2,32(r2)
  80bd50:	1007883a 	mov	r3,r2
  80bd54:	2005883a 	mov	r2,r4
  80bd58:	10c00035 	stwio	r3,0(r2)
  80bd5c:	e0bff717 	ldw	r2,-36(fp)
  80bd60:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bd64:	e0bff417 	ldw	r2,-48(fp)
  80bd68:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80bd6c:	e0bffd17 	ldw	r2,-12(fp)
  80bd70:	10800050 	cmplti	r2,r2,1
  80bd74:	1000111e 	bne	r2,zero,80bdbc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80bd78:	e0bffe17 	ldw	r2,-8(fp)
  80bd7c:	1090000c 	andi	r2,r2,16384
  80bd80:	1004c03a 	cmpne	r2,r2,zero
  80bd84:	1000101e 	bne	r2,zero,80bdc8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80bd88:	e0bffb17 	ldw	r2,-20(fp)
  80bd8c:	10c00d17 	ldw	r3,52(r2)
  80bd90:	e0bff917 	ldw	r2,-28(fp)
  80bd94:	1880051e 	bne	r3,r2,80bdac <altera_avalon_jtag_uart_write+0x1c8>
  80bd98:	e0bffb17 	ldw	r2,-20(fp)
  80bd9c:	10c00917 	ldw	r3,36(r2)
  80bda0:	e0bffb17 	ldw	r2,-20(fp)
  80bda4:	10800117 	ldw	r2,4(r2)
  80bda8:	18bff736 	bltu	r3,r2,80bd88 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80bdac:	e0bffb17 	ldw	r2,-20(fp)
  80bdb0:	10c00d17 	ldw	r3,52(r2)
  80bdb4:	e0bff917 	ldw	r2,-28(fp)
  80bdb8:	18800326 	beq	r3,r2,80bdc8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80bdbc:	e0bffd17 	ldw	r2,-12(fp)
  80bdc0:	10800048 	cmpgei	r2,r2,1
  80bdc4:	103fcd1e 	bne	r2,zero,80bcfc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80bdc8:	e0fffc17 	ldw	r3,-16(fp)
  80bdcc:	e0bff617 	ldw	r2,-40(fp)
  80bdd0:	18800526 	beq	r3,r2,80bde8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80bdd4:	e0fffc17 	ldw	r3,-16(fp)
  80bdd8:	e0bff617 	ldw	r2,-40(fp)
  80bddc:	1887c83a 	sub	r3,r3,r2
  80bde0:	e0ffff15 	stw	r3,-4(fp)
  80bde4:	00000906 	br	80be0c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80bde8:	e0bffe17 	ldw	r2,-8(fp)
  80bdec:	1090000c 	andi	r2,r2,16384
  80bdf0:	1005003a 	cmpeq	r2,r2,zero
  80bdf4:	1000031e 	bne	r2,zero,80be04 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80bdf8:	00bffd44 	movi	r2,-11
  80bdfc:	e0bfff15 	stw	r2,-4(fp)
  80be00:	00000206 	br	80be0c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80be04:	00bffec4 	movi	r2,-5
  80be08:	e0bfff15 	stw	r2,-4(fp)
  80be0c:	e0bfff17 	ldw	r2,-4(fp)
}
  80be10:	e037883a 	mov	sp,fp
  80be14:	dfc00117 	ldw	ra,4(sp)
  80be18:	df000017 	ldw	fp,0(sp)
  80be1c:	dec00204 	addi	sp,sp,8
  80be20:	f800283a 	ret

0080be24 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80be24:	defff404 	addi	sp,sp,-48
  80be28:	df000b15 	stw	fp,44(sp)
  80be2c:	df000b04 	addi	fp,sp,44
  80be30:	e13ffb15 	stw	r4,-20(fp)
  80be34:	e17ffc15 	stw	r5,-16(fp)
  80be38:	e1bffd15 	stw	r6,-12(fp)
  80be3c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80be40:	e03ff915 	stw	zero,-28(fp)
  80be44:	00802074 	movhi	r2,129
  80be48:	10875704 	addi	r2,r2,7516
  80be4c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80be50:	1005003a 	cmpeq	r2,r2,zero
  80be54:	1000411e 	bne	r2,zero,80bf5c <alt_alarm_start+0x138>
  {
    if (alarm)
  80be58:	e0bffb17 	ldw	r2,-20(fp)
  80be5c:	1005003a 	cmpeq	r2,r2,zero
  80be60:	10003b1e 	bne	r2,zero,80bf50 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80be64:	e0fffb17 	ldw	r3,-20(fp)
  80be68:	e0bffd17 	ldw	r2,-12(fp)
  80be6c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80be70:	e0fffb17 	ldw	r3,-20(fp)
  80be74:	e0bffe17 	ldw	r2,-8(fp)
  80be78:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80be7c:	0005303a 	rdctl	r2,status
  80be80:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80be84:	e0fff817 	ldw	r3,-32(fp)
  80be88:	00bfff84 	movi	r2,-2
  80be8c:	1884703a 	and	r2,r3,r2
  80be90:	1001703a 	wrctl	status,r2
  
  return context;
  80be94:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80be98:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80be9c:	00802074 	movhi	r2,129
  80bea0:	10875804 	addi	r2,r2,7520
  80bea4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80bea8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80beac:	e0fffc17 	ldw	r3,-16(fp)
  80beb0:	e0bff917 	ldw	r2,-28(fp)
  80beb4:	1885883a 	add	r2,r3,r2
  80beb8:	10c00044 	addi	r3,r2,1
  80bebc:	e0bffb17 	ldw	r2,-20(fp)
  80bec0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80bec4:	e0bffb17 	ldw	r2,-20(fp)
  80bec8:	10c00217 	ldw	r3,8(r2)
  80becc:	e0bff917 	ldw	r2,-28(fp)
  80bed0:	1880042e 	bgeu	r3,r2,80bee4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80bed4:	e0fffb17 	ldw	r3,-20(fp)
  80bed8:	00800044 	movi	r2,1
  80bedc:	18800405 	stb	r2,16(r3)
  80bee0:	00000206 	br	80beec <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80bee4:	e0bffb17 	ldw	r2,-20(fp)
  80bee8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80beec:	e0fffb17 	ldw	r3,-20(fp)
  80bef0:	00802074 	movhi	r2,129
  80bef4:	10be7504 	addi	r2,r2,-1580
  80bef8:	e0bff615 	stw	r2,-40(fp)
  80befc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80bf00:	e0fff717 	ldw	r3,-36(fp)
  80bf04:	e0bff617 	ldw	r2,-40(fp)
  80bf08:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80bf0c:	e0bff617 	ldw	r2,-40(fp)
  80bf10:	10c00017 	ldw	r3,0(r2)
  80bf14:	e0bff717 	ldw	r2,-36(fp)
  80bf18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80bf1c:	e0bff617 	ldw	r2,-40(fp)
  80bf20:	10c00017 	ldw	r3,0(r2)
  80bf24:	e0bff717 	ldw	r2,-36(fp)
  80bf28:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80bf2c:	e0fff617 	ldw	r3,-40(fp)
  80bf30:	e0bff717 	ldw	r2,-36(fp)
  80bf34:	18800015 	stw	r2,0(r3)
  80bf38:	e0bffa17 	ldw	r2,-24(fp)
  80bf3c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bf40:	e0bff517 	ldw	r2,-44(fp)
  80bf44:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80bf48:	e03fff15 	stw	zero,-4(fp)
  80bf4c:	00000506 	br	80bf64 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80bf50:	00bffa84 	movi	r2,-22
  80bf54:	e0bfff15 	stw	r2,-4(fp)
  80bf58:	00000206 	br	80bf64 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80bf5c:	00bfde84 	movi	r2,-134
  80bf60:	e0bfff15 	stw	r2,-4(fp)
  80bf64:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80bf68:	e037883a 	mov	sp,fp
  80bf6c:	df000017 	ldw	fp,0(sp)
  80bf70:	dec00104 	addi	sp,sp,4
  80bf74:	f800283a 	ret

0080bf78 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80bf78:	deffff04 	addi	sp,sp,-4
  80bf7c:	df000015 	stw	fp,0(sp)
  80bf80:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80bf84:	e037883a 	mov	sp,fp
  80bf88:	df000017 	ldw	fp,0(sp)
  80bf8c:	dec00104 	addi	sp,sp,4
  80bf90:	f800283a 	ret

0080bf94 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80bf94:	defff904 	addi	sp,sp,-28
  80bf98:	dfc00615 	stw	ra,24(sp)
  80bf9c:	df000515 	stw	fp,20(sp)
  80bfa0:	df000504 	addi	fp,sp,20
  80bfa4:	e13ffd15 	stw	r4,-12(fp)
  80bfa8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80bfac:	e0bffd17 	ldw	r2,-12(fp)
  80bfb0:	1005003a 	cmpeq	r2,r2,zero
  80bfb4:	1000041e 	bne	r2,zero,80bfc8 <alt_dev_llist_insert+0x34>
  80bfb8:	e0bffd17 	ldw	r2,-12(fp)
  80bfbc:	10800217 	ldw	r2,8(r2)
  80bfc0:	1004c03a 	cmpne	r2,r2,zero
  80bfc4:	1000071e 	bne	r2,zero,80bfe4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80bfc8:	080c0480 	call	80c048 <alt_get_errno>
  80bfcc:	1007883a 	mov	r3,r2
  80bfd0:	00800584 	movi	r2,22
  80bfd4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80bfd8:	00bffa84 	movi	r2,-22
  80bfdc:	e0bfff15 	stw	r2,-4(fp)
  80bfe0:	00001306 	br	80c030 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80bfe4:	e0fffd17 	ldw	r3,-12(fp)
  80bfe8:	e0bffe17 	ldw	r2,-8(fp)
  80bfec:	e0bffb15 	stw	r2,-20(fp)
  80bff0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80bff4:	e0fffc17 	ldw	r3,-16(fp)
  80bff8:	e0bffb17 	ldw	r2,-20(fp)
  80bffc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80c000:	e0bffb17 	ldw	r2,-20(fp)
  80c004:	10c00017 	ldw	r3,0(r2)
  80c008:	e0bffc17 	ldw	r2,-16(fp)
  80c00c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80c010:	e0bffb17 	ldw	r2,-20(fp)
  80c014:	10c00017 	ldw	r3,0(r2)
  80c018:	e0bffc17 	ldw	r2,-16(fp)
  80c01c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80c020:	e0fffb17 	ldw	r3,-20(fp)
  80c024:	e0bffc17 	ldw	r2,-16(fp)
  80c028:	18800015 	stw	r2,0(r3)

  return 0;  
  80c02c:	e03fff15 	stw	zero,-4(fp)
  80c030:	e0bfff17 	ldw	r2,-4(fp)
}
  80c034:	e037883a 	mov	sp,fp
  80c038:	dfc00117 	ldw	ra,4(sp)
  80c03c:	df000017 	ldw	fp,0(sp)
  80c040:	dec00204 	addi	sp,sp,8
  80c044:	f800283a 	ret

0080c048 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c048:	defffd04 	addi	sp,sp,-12
  80c04c:	dfc00215 	stw	ra,8(sp)
  80c050:	df000115 	stw	fp,4(sp)
  80c054:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c058:	00802074 	movhi	r2,129
  80c05c:	10be7204 	addi	r2,r2,-1592
  80c060:	10800017 	ldw	r2,0(r2)
  80c064:	1005003a 	cmpeq	r2,r2,zero
  80c068:	1000061e 	bne	r2,zero,80c084 <alt_get_errno+0x3c>
  80c06c:	00802074 	movhi	r2,129
  80c070:	10be7204 	addi	r2,r2,-1592
  80c074:	10800017 	ldw	r2,0(r2)
  80c078:	103ee83a 	callr	r2
  80c07c:	e0bfff15 	stw	r2,-4(fp)
  80c080:	00000306 	br	80c090 <alt_get_errno+0x48>
  80c084:	00802074 	movhi	r2,129
  80c088:	10874f04 	addi	r2,r2,7484
  80c08c:	e0bfff15 	stw	r2,-4(fp)
  80c090:	e0bfff17 	ldw	r2,-4(fp)
}
  80c094:	e037883a 	mov	sp,fp
  80c098:	dfc00117 	ldw	ra,4(sp)
  80c09c:	df000017 	ldw	fp,0(sp)
  80c0a0:	dec00204 	addi	sp,sp,8
  80c0a4:	f800283a 	ret

0080c0a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80c0a8:	defffd04 	addi	sp,sp,-12
  80c0ac:	dfc00215 	stw	ra,8(sp)
  80c0b0:	df000115 	stw	fp,4(sp)
  80c0b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80c0b8:	00bfff04 	movi	r2,-4
  80c0bc:	00c02074 	movhi	r3,129
  80c0c0:	18f46904 	addi	r3,r3,-11868
  80c0c4:	1885883a 	add	r2,r3,r2
  80c0c8:	e0bfff15 	stw	r2,-4(fp)
  80c0cc:	00000606 	br	80c0e8 <_do_ctors+0x40>
        (*ctor) (); 
  80c0d0:	e0bfff17 	ldw	r2,-4(fp)
  80c0d4:	10800017 	ldw	r2,0(r2)
  80c0d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80c0dc:	e0bfff17 	ldw	r2,-4(fp)
  80c0e0:	10bfff04 	addi	r2,r2,-4
  80c0e4:	e0bfff15 	stw	r2,-4(fp)
  80c0e8:	e0ffff17 	ldw	r3,-4(fp)
  80c0ec:	00802074 	movhi	r2,129
  80c0f0:	10b46804 	addi	r2,r2,-11872
  80c0f4:	18bff62e 	bgeu	r3,r2,80c0d0 <_do_ctors+0x28>
        (*ctor) (); 
}
  80c0f8:	e037883a 	mov	sp,fp
  80c0fc:	dfc00117 	ldw	ra,4(sp)
  80c100:	df000017 	ldw	fp,0(sp)
  80c104:	dec00204 	addi	sp,sp,8
  80c108:	f800283a 	ret

0080c10c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80c10c:	defffd04 	addi	sp,sp,-12
  80c110:	dfc00215 	stw	ra,8(sp)
  80c114:	df000115 	stw	fp,4(sp)
  80c118:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80c11c:	00bfff04 	movi	r2,-4
  80c120:	00c02074 	movhi	r3,129
  80c124:	18f46904 	addi	r3,r3,-11868
  80c128:	1885883a 	add	r2,r3,r2
  80c12c:	e0bfff15 	stw	r2,-4(fp)
  80c130:	00000606 	br	80c14c <_do_dtors+0x40>
        (*dtor) (); 
  80c134:	e0bfff17 	ldw	r2,-4(fp)
  80c138:	10800017 	ldw	r2,0(r2)
  80c13c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80c140:	e0bfff17 	ldw	r2,-4(fp)
  80c144:	10bfff04 	addi	r2,r2,-4
  80c148:	e0bfff15 	stw	r2,-4(fp)
  80c14c:	e0ffff17 	ldw	r3,-4(fp)
  80c150:	00802074 	movhi	r2,129
  80c154:	10b46904 	addi	r2,r2,-11868
  80c158:	18bff62e 	bgeu	r3,r2,80c134 <_do_dtors+0x28>
        (*dtor) (); 
}
  80c15c:	e037883a 	mov	sp,fp
  80c160:	dfc00117 	ldw	ra,4(sp)
  80c164:	df000017 	ldw	fp,0(sp)
  80c168:	dec00204 	addi	sp,sp,8
  80c16c:	f800283a 	ret

0080c170 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80c170:	defffe04 	addi	sp,sp,-8
  80c174:	dfc00115 	stw	ra,4(sp)
  80c178:	df000015 	stw	fp,0(sp)
  80c17c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80c180:	0009883a 	mov	r4,zero
  80c184:	01440004 	movi	r5,4096
  80c188:	080cc9c0 	call	80cc9c <alt_icache_flush>
#endif
}
  80c18c:	e037883a 	mov	sp,fp
  80c190:	dfc00117 	ldw	ra,4(sp)
  80c194:	df000017 	ldw	fp,0(sp)
  80c198:	dec00204 	addi	sp,sp,8
  80c19c:	f800283a 	ret

0080c1a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80c1a0:	defff904 	addi	sp,sp,-28
  80c1a4:	dfc00615 	stw	ra,24(sp)
  80c1a8:	df000515 	stw	fp,20(sp)
  80c1ac:	df000504 	addi	fp,sp,20
  80c1b0:	e13ffc15 	stw	r4,-16(fp)
  80c1b4:	e17ffd15 	stw	r5,-12(fp)
  80c1b8:	e1bffe15 	stw	r6,-8(fp)
  80c1bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80c1c0:	e0800217 	ldw	r2,8(fp)
  80c1c4:	d8800015 	stw	r2,0(sp)
  80c1c8:	e13ffc17 	ldw	r4,-16(fp)
  80c1cc:	e17ffd17 	ldw	r5,-12(fp)
  80c1d0:	e1bffe17 	ldw	r6,-8(fp)
  80c1d4:	e1ffff17 	ldw	r7,-4(fp)
  80c1d8:	080c3740 	call	80c374 <alt_iic_isr_register>
}  
  80c1dc:	e037883a 	mov	sp,fp
  80c1e0:	dfc00117 	ldw	ra,4(sp)
  80c1e4:	df000017 	ldw	fp,0(sp)
  80c1e8:	dec00204 	addi	sp,sp,8
  80c1ec:	f800283a 	ret

0080c1f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80c1f0:	defff904 	addi	sp,sp,-28
  80c1f4:	df000615 	stw	fp,24(sp)
  80c1f8:	df000604 	addi	fp,sp,24
  80c1fc:	e13ffe15 	stw	r4,-8(fp)
  80c200:	e17fff15 	stw	r5,-4(fp)
  80c204:	e0bfff17 	ldw	r2,-4(fp)
  80c208:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c20c:	0005303a 	rdctl	r2,status
  80c210:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c214:	e0fffb17 	ldw	r3,-20(fp)
  80c218:	00bfff84 	movi	r2,-2
  80c21c:	1884703a 	and	r2,r3,r2
  80c220:	1001703a 	wrctl	status,r2
  
  return context;
  80c224:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80c228:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80c22c:	e0fffc17 	ldw	r3,-16(fp)
  80c230:	00800044 	movi	r2,1
  80c234:	10c4983a 	sll	r2,r2,r3
  80c238:	1007883a 	mov	r3,r2
  80c23c:	00802074 	movhi	r2,129
  80c240:	10875604 	addi	r2,r2,7512
  80c244:	10800017 	ldw	r2,0(r2)
  80c248:	1886b03a 	or	r3,r3,r2
  80c24c:	00802074 	movhi	r2,129
  80c250:	10875604 	addi	r2,r2,7512
  80c254:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80c258:	00802074 	movhi	r2,129
  80c25c:	10875604 	addi	r2,r2,7512
  80c260:	10800017 	ldw	r2,0(r2)
  80c264:	100170fa 	wrctl	ienable,r2
  80c268:	e0bffd17 	ldw	r2,-12(fp)
  80c26c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c270:	e0bffa17 	ldw	r2,-24(fp)
  80c274:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80c278:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80c27c:	e037883a 	mov	sp,fp
  80c280:	df000017 	ldw	fp,0(sp)
  80c284:	dec00104 	addi	sp,sp,4
  80c288:	f800283a 	ret

0080c28c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80c28c:	defff904 	addi	sp,sp,-28
  80c290:	df000615 	stw	fp,24(sp)
  80c294:	df000604 	addi	fp,sp,24
  80c298:	e13ffe15 	stw	r4,-8(fp)
  80c29c:	e17fff15 	stw	r5,-4(fp)
  80c2a0:	e0bfff17 	ldw	r2,-4(fp)
  80c2a4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c2a8:	0005303a 	rdctl	r2,status
  80c2ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c2b0:	e0fffb17 	ldw	r3,-20(fp)
  80c2b4:	00bfff84 	movi	r2,-2
  80c2b8:	1884703a 	and	r2,r3,r2
  80c2bc:	1001703a 	wrctl	status,r2
  
  return context;
  80c2c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80c2c4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80c2c8:	e0fffc17 	ldw	r3,-16(fp)
  80c2cc:	00800044 	movi	r2,1
  80c2d0:	10c4983a 	sll	r2,r2,r3
  80c2d4:	0084303a 	nor	r2,zero,r2
  80c2d8:	1007883a 	mov	r3,r2
  80c2dc:	00802074 	movhi	r2,129
  80c2e0:	10875604 	addi	r2,r2,7512
  80c2e4:	10800017 	ldw	r2,0(r2)
  80c2e8:	1886703a 	and	r3,r3,r2
  80c2ec:	00802074 	movhi	r2,129
  80c2f0:	10875604 	addi	r2,r2,7512
  80c2f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80c2f8:	00802074 	movhi	r2,129
  80c2fc:	10875604 	addi	r2,r2,7512
  80c300:	10800017 	ldw	r2,0(r2)
  80c304:	100170fa 	wrctl	ienable,r2
  80c308:	e0bffd17 	ldw	r2,-12(fp)
  80c30c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c310:	e0bffa17 	ldw	r2,-24(fp)
  80c314:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80c318:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80c31c:	e037883a 	mov	sp,fp
  80c320:	df000017 	ldw	fp,0(sp)
  80c324:	dec00104 	addi	sp,sp,4
  80c328:	f800283a 	ret

0080c32c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80c32c:	defffc04 	addi	sp,sp,-16
  80c330:	df000315 	stw	fp,12(sp)
  80c334:	df000304 	addi	fp,sp,12
  80c338:	e13ffe15 	stw	r4,-8(fp)
  80c33c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80c340:	000530fa 	rdctl	r2,ienable
  80c344:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80c348:	e0ffff17 	ldw	r3,-4(fp)
  80c34c:	00800044 	movi	r2,1
  80c350:	10c4983a 	sll	r2,r2,r3
  80c354:	1007883a 	mov	r3,r2
  80c358:	e0bffd17 	ldw	r2,-12(fp)
  80c35c:	1884703a 	and	r2,r3,r2
  80c360:	1004c03a 	cmpne	r2,r2,zero
}
  80c364:	e037883a 	mov	sp,fp
  80c368:	df000017 	ldw	fp,0(sp)
  80c36c:	dec00104 	addi	sp,sp,4
  80c370:	f800283a 	ret

0080c374 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80c374:	defff404 	addi	sp,sp,-48
  80c378:	dfc00b15 	stw	ra,44(sp)
  80c37c:	df000a15 	stw	fp,40(sp)
  80c380:	df000a04 	addi	fp,sp,40
  80c384:	e13ffb15 	stw	r4,-20(fp)
  80c388:	e17ffc15 	stw	r5,-16(fp)
  80c38c:	e1bffd15 	stw	r6,-12(fp)
  80c390:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80c394:	00bffa84 	movi	r2,-22
  80c398:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80c39c:	e0bffc17 	ldw	r2,-16(fp)
  80c3a0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80c3a4:	e0bff917 	ldw	r2,-28(fp)
  80c3a8:	10800808 	cmpgei	r2,r2,32
  80c3ac:	1000291e 	bne	r2,zero,80c454 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c3b0:	0005303a 	rdctl	r2,status
  80c3b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c3b8:	e0fff717 	ldw	r3,-36(fp)
  80c3bc:	00bfff84 	movi	r2,-2
  80c3c0:	1884703a 	and	r2,r3,r2
  80c3c4:	1001703a 	wrctl	status,r2
  
  return context;
  80c3c8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80c3cc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80c3d0:	e0bff917 	ldw	r2,-28(fp)
  80c3d4:	00c02074 	movhi	r3,129
  80c3d8:	18c76304 	addi	r3,r3,7564
  80c3dc:	100490fa 	slli	r2,r2,3
  80c3e0:	10c7883a 	add	r3,r2,r3
  80c3e4:	e0bffd17 	ldw	r2,-12(fp)
  80c3e8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80c3ec:	e0bff917 	ldw	r2,-28(fp)
  80c3f0:	00c02074 	movhi	r3,129
  80c3f4:	18c76304 	addi	r3,r3,7564
  80c3f8:	100490fa 	slli	r2,r2,3
  80c3fc:	10c5883a 	add	r2,r2,r3
  80c400:	10c00104 	addi	r3,r2,4
  80c404:	e0bffe17 	ldw	r2,-8(fp)
  80c408:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80c40c:	e0bffd17 	ldw	r2,-12(fp)
  80c410:	1005003a 	cmpeq	r2,r2,zero
  80c414:	1000051e 	bne	r2,zero,80c42c <alt_iic_isr_register+0xb8>
  80c418:	e17ff917 	ldw	r5,-28(fp)
  80c41c:	e13ffb17 	ldw	r4,-20(fp)
  80c420:	080c1f00 	call	80c1f0 <alt_ic_irq_enable>
  80c424:	e0bfff15 	stw	r2,-4(fp)
  80c428:	00000406 	br	80c43c <alt_iic_isr_register+0xc8>
  80c42c:	e17ff917 	ldw	r5,-28(fp)
  80c430:	e13ffb17 	ldw	r4,-20(fp)
  80c434:	080c28c0 	call	80c28c <alt_ic_irq_disable>
  80c438:	e0bfff15 	stw	r2,-4(fp)
  80c43c:	e0bfff17 	ldw	r2,-4(fp)
  80c440:	e0bffa15 	stw	r2,-24(fp)
  80c444:	e0bff817 	ldw	r2,-32(fp)
  80c448:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c44c:	e0bff617 	ldw	r2,-40(fp)
  80c450:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80c454:	e0bffa17 	ldw	r2,-24(fp)
}
  80c458:	e037883a 	mov	sp,fp
  80c45c:	dfc00117 	ldw	ra,4(sp)
  80c460:	df000017 	ldw	fp,0(sp)
  80c464:	dec00204 	addi	sp,sp,8
  80c468:	f800283a 	ret

0080c46c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80c46c:	defff904 	addi	sp,sp,-28
  80c470:	dfc00615 	stw	ra,24(sp)
  80c474:	df000515 	stw	fp,20(sp)
  80c478:	df000504 	addi	fp,sp,20
  80c47c:	e13ffc15 	stw	r4,-16(fp)
  80c480:	e17ffd15 	stw	r5,-12(fp)
  80c484:	e1bffe15 	stw	r6,-8(fp)
  80c488:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80c48c:	e13ffd17 	ldw	r4,-12(fp)
  80c490:	e17ffe17 	ldw	r5,-8(fp)
  80c494:	e1bfff17 	ldw	r6,-4(fp)
  80c498:	080c6840 	call	80c684 <open>
  80c49c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80c4a0:	e0bffb17 	ldw	r2,-20(fp)
  80c4a4:	1004803a 	cmplt	r2,r2,zero
  80c4a8:	10001c1e 	bne	r2,zero,80c51c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80c4ac:	e0bffb17 	ldw	r2,-20(fp)
  80c4b0:	00c02074 	movhi	r3,129
  80c4b4:	18f9ef04 	addi	r3,r3,-6212
  80c4b8:	10800324 	muli	r2,r2,12
  80c4bc:	10c5883a 	add	r2,r2,r3
  80c4c0:	10c00017 	ldw	r3,0(r2)
  80c4c4:	e0bffc17 	ldw	r2,-16(fp)
  80c4c8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80c4cc:	e0bffb17 	ldw	r2,-20(fp)
  80c4d0:	00c02074 	movhi	r3,129
  80c4d4:	18f9ef04 	addi	r3,r3,-6212
  80c4d8:	10800324 	muli	r2,r2,12
  80c4dc:	10c5883a 	add	r2,r2,r3
  80c4e0:	10800104 	addi	r2,r2,4
  80c4e4:	10c00017 	ldw	r3,0(r2)
  80c4e8:	e0bffc17 	ldw	r2,-16(fp)
  80c4ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80c4f0:	e0bffb17 	ldw	r2,-20(fp)
  80c4f4:	00c02074 	movhi	r3,129
  80c4f8:	18f9ef04 	addi	r3,r3,-6212
  80c4fc:	10800324 	muli	r2,r2,12
  80c500:	10c5883a 	add	r2,r2,r3
  80c504:	10800204 	addi	r2,r2,8
  80c508:	10c00017 	ldw	r3,0(r2)
  80c50c:	e0bffc17 	ldw	r2,-16(fp)
  80c510:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80c514:	e13ffb17 	ldw	r4,-20(fp)
  80c518:	080b02c0 	call	80b02c <alt_release_fd>
  }
} 
  80c51c:	e037883a 	mov	sp,fp
  80c520:	dfc00117 	ldw	ra,4(sp)
  80c524:	df000017 	ldw	fp,0(sp)
  80c528:	dec00204 	addi	sp,sp,8
  80c52c:	f800283a 	ret

0080c530 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80c530:	defffb04 	addi	sp,sp,-20
  80c534:	dfc00415 	stw	ra,16(sp)
  80c538:	df000315 	stw	fp,12(sp)
  80c53c:	df000304 	addi	fp,sp,12
  80c540:	e13ffd15 	stw	r4,-12(fp)
  80c544:	e17ffe15 	stw	r5,-8(fp)
  80c548:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80c54c:	01002074 	movhi	r4,129
  80c550:	2139f204 	addi	r4,r4,-6200
  80c554:	e17ffd17 	ldw	r5,-12(fp)
  80c558:	01800044 	movi	r6,1
  80c55c:	01c07fc4 	movi	r7,511
  80c560:	080c46c0 	call	80c46c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80c564:	01002074 	movhi	r4,129
  80c568:	2139ef04 	addi	r4,r4,-6212
  80c56c:	e17ffe17 	ldw	r5,-8(fp)
  80c570:	000d883a 	mov	r6,zero
  80c574:	01c07fc4 	movi	r7,511
  80c578:	080c46c0 	call	80c46c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80c57c:	01002074 	movhi	r4,129
  80c580:	2139f504 	addi	r4,r4,-6188
  80c584:	e17fff17 	ldw	r5,-4(fp)
  80c588:	01800044 	movi	r6,1
  80c58c:	01c07fc4 	movi	r7,511
  80c590:	080c46c0 	call	80c46c <alt_open_fd>
}  
  80c594:	e037883a 	mov	sp,fp
  80c598:	dfc00117 	ldw	ra,4(sp)
  80c59c:	df000017 	ldw	fp,0(sp)
  80c5a0:	dec00204 	addi	sp,sp,8
  80c5a4:	f800283a 	ret

0080c5a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80c5a8:	defffc04 	addi	sp,sp,-16
  80c5ac:	df000315 	stw	fp,12(sp)
  80c5b0:	df000304 	addi	fp,sp,12
  80c5b4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80c5b8:	e0bffe17 	ldw	r2,-8(fp)
  80c5bc:	10800217 	ldw	r2,8(r2)
  80c5c0:	10d00034 	orhi	r3,r2,16384
  80c5c4:	e0bffe17 	ldw	r2,-8(fp)
  80c5c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80c5cc:	e03ffd15 	stw	zero,-12(fp)
  80c5d0:	00002006 	br	80c654 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80c5d4:	e0bffd17 	ldw	r2,-12(fp)
  80c5d8:	00c02074 	movhi	r3,129
  80c5dc:	18f9ef04 	addi	r3,r3,-6212
  80c5e0:	10800324 	muli	r2,r2,12
  80c5e4:	10c5883a 	add	r2,r2,r3
  80c5e8:	10c00017 	ldw	r3,0(r2)
  80c5ec:	e0bffe17 	ldw	r2,-8(fp)
  80c5f0:	10800017 	ldw	r2,0(r2)
  80c5f4:	1880141e 	bne	r3,r2,80c648 <alt_file_locked+0xa0>
  80c5f8:	e0bffd17 	ldw	r2,-12(fp)
  80c5fc:	00c02074 	movhi	r3,129
  80c600:	18f9ef04 	addi	r3,r3,-6212
  80c604:	10800324 	muli	r2,r2,12
  80c608:	10c5883a 	add	r2,r2,r3
  80c60c:	10800204 	addi	r2,r2,8
  80c610:	10800017 	ldw	r2,0(r2)
  80c614:	1004403a 	cmpge	r2,r2,zero
  80c618:	10000b1e 	bne	r2,zero,80c648 <alt_file_locked+0xa0>
  80c61c:	e0bffd17 	ldw	r2,-12(fp)
  80c620:	10800324 	muli	r2,r2,12
  80c624:	1007883a 	mov	r3,r2
  80c628:	00802074 	movhi	r2,129
  80c62c:	10b9ef04 	addi	r2,r2,-6212
  80c630:	1887883a 	add	r3,r3,r2
  80c634:	e0bffe17 	ldw	r2,-8(fp)
  80c638:	18800326 	beq	r3,r2,80c648 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80c63c:	00bffcc4 	movi	r2,-13
  80c640:	e0bfff15 	stw	r2,-4(fp)
  80c644:	00000a06 	br	80c670 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80c648:	e0bffd17 	ldw	r2,-12(fp)
  80c64c:	10800044 	addi	r2,r2,1
  80c650:	e0bffd15 	stw	r2,-12(fp)
  80c654:	00802074 	movhi	r2,129
  80c658:	10be7104 	addi	r2,r2,-1596
  80c65c:	10800017 	ldw	r2,0(r2)
  80c660:	1007883a 	mov	r3,r2
  80c664:	e0bffd17 	ldw	r2,-12(fp)
  80c668:	18bfda2e 	bgeu	r3,r2,80c5d4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80c66c:	e03fff15 	stw	zero,-4(fp)
  80c670:	e0bfff17 	ldw	r2,-4(fp)
}
  80c674:	e037883a 	mov	sp,fp
  80c678:	df000017 	ldw	fp,0(sp)
  80c67c:	dec00104 	addi	sp,sp,4
  80c680:	f800283a 	ret

0080c684 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80c684:	defff404 	addi	sp,sp,-48
  80c688:	dfc00b15 	stw	ra,44(sp)
  80c68c:	df000a15 	stw	fp,40(sp)
  80c690:	df000a04 	addi	fp,sp,40
  80c694:	e13ffb15 	stw	r4,-20(fp)
  80c698:	e17ffc15 	stw	r5,-16(fp)
  80c69c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80c6a0:	00bfffc4 	movi	r2,-1
  80c6a4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80c6a8:	00bffb44 	movi	r2,-19
  80c6ac:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80c6b0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80c6b4:	e13ffb17 	ldw	r4,-20(fp)
  80c6b8:	01402074 	movhi	r5,129
  80c6bc:	297e6f04 	addi	r5,r5,-1604
  80c6c0:	080ca300 	call	80ca30 <alt_find_dev>
  80c6c4:	e0bffa15 	stw	r2,-24(fp)
  80c6c8:	e0bffa17 	ldw	r2,-24(fp)
  80c6cc:	1004c03a 	cmpne	r2,r2,zero
  80c6d0:	1000051e 	bne	r2,zero,80c6e8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80c6d4:	e13ffb17 	ldw	r4,-20(fp)
  80c6d8:	080cac40 	call	80cac4 <alt_find_file>
  80c6dc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80c6e0:	00800044 	movi	r2,1
  80c6e4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80c6e8:	e0bffa17 	ldw	r2,-24(fp)
  80c6ec:	1005003a 	cmpeq	r2,r2,zero
  80c6f0:	1000301e 	bne	r2,zero,80c7b4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80c6f4:	e13ffa17 	ldw	r4,-24(fp)
  80c6f8:	080cbe40 	call	80cbe4 <alt_get_fd>
  80c6fc:	e0bff815 	stw	r2,-32(fp)
  80c700:	e0bff817 	ldw	r2,-32(fp)
  80c704:	1004403a 	cmpge	r2,r2,zero
  80c708:	1000031e 	bne	r2,zero,80c718 <open+0x94>
    {
      status = index;
  80c70c:	e0bff817 	ldw	r2,-32(fp)
  80c710:	e0bff715 	stw	r2,-36(fp)
  80c714:	00002906 	br	80c7bc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80c718:	e0bff817 	ldw	r2,-32(fp)
  80c71c:	10800324 	muli	r2,r2,12
  80c720:	1007883a 	mov	r3,r2
  80c724:	00802074 	movhi	r2,129
  80c728:	10b9ef04 	addi	r2,r2,-6212
  80c72c:	1885883a 	add	r2,r3,r2
  80c730:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80c734:	e0fffc17 	ldw	r3,-16(fp)
  80c738:	00900034 	movhi	r2,16384
  80c73c:	10bfffc4 	addi	r2,r2,-1
  80c740:	1886703a 	and	r3,r3,r2
  80c744:	e0bff917 	ldw	r2,-28(fp)
  80c748:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80c74c:	e0bff617 	ldw	r2,-40(fp)
  80c750:	1004c03a 	cmpne	r2,r2,zero
  80c754:	1000061e 	bne	r2,zero,80c770 <open+0xec>
  80c758:	e13ff917 	ldw	r4,-28(fp)
  80c75c:	080c5a80 	call	80c5a8 <alt_file_locked>
  80c760:	e0bff715 	stw	r2,-36(fp)
  80c764:	e0bff717 	ldw	r2,-36(fp)
  80c768:	1004803a 	cmplt	r2,r2,zero
  80c76c:	1000131e 	bne	r2,zero,80c7bc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80c770:	e0bffa17 	ldw	r2,-24(fp)
  80c774:	10800317 	ldw	r2,12(r2)
  80c778:	1005003a 	cmpeq	r2,r2,zero
  80c77c:	1000091e 	bne	r2,zero,80c7a4 <open+0x120>
  80c780:	e0bffa17 	ldw	r2,-24(fp)
  80c784:	10800317 	ldw	r2,12(r2)
  80c788:	e13ff917 	ldw	r4,-28(fp)
  80c78c:	e17ffb17 	ldw	r5,-20(fp)
  80c790:	e1bffc17 	ldw	r6,-16(fp)
  80c794:	e1fffd17 	ldw	r7,-12(fp)
  80c798:	103ee83a 	callr	r2
  80c79c:	e0bfff15 	stw	r2,-4(fp)
  80c7a0:	00000106 	br	80c7a8 <open+0x124>
  80c7a4:	e03fff15 	stw	zero,-4(fp)
  80c7a8:	e0bfff17 	ldw	r2,-4(fp)
  80c7ac:	e0bff715 	stw	r2,-36(fp)
  80c7b0:	00000206 	br	80c7bc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80c7b4:	00bffb44 	movi	r2,-19
  80c7b8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80c7bc:	e0bff717 	ldw	r2,-36(fp)
  80c7c0:	1004403a 	cmpge	r2,r2,zero
  80c7c4:	1000091e 	bne	r2,zero,80c7ec <open+0x168>
  {
    alt_release_fd (index);  
  80c7c8:	e13ff817 	ldw	r4,-32(fp)
  80c7cc:	080b02c0 	call	80b02c <alt_release_fd>
    ALT_ERRNO = -status;
  80c7d0:	080c80c0 	call	80c80c <alt_get_errno>
  80c7d4:	e0fff717 	ldw	r3,-36(fp)
  80c7d8:	00c7c83a 	sub	r3,zero,r3
  80c7dc:	10c00015 	stw	r3,0(r2)
    return -1;
  80c7e0:	00bfffc4 	movi	r2,-1
  80c7e4:	e0bffe15 	stw	r2,-8(fp)
  80c7e8:	00000206 	br	80c7f4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  80c7ec:	e0bff817 	ldw	r2,-32(fp)
  80c7f0:	e0bffe15 	stw	r2,-8(fp)
  80c7f4:	e0bffe17 	ldw	r2,-8(fp)
}
  80c7f8:	e037883a 	mov	sp,fp
  80c7fc:	dfc00117 	ldw	ra,4(sp)
  80c800:	df000017 	ldw	fp,0(sp)
  80c804:	dec00204 	addi	sp,sp,8
  80c808:	f800283a 	ret

0080c80c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c80c:	defffd04 	addi	sp,sp,-12
  80c810:	dfc00215 	stw	ra,8(sp)
  80c814:	df000115 	stw	fp,4(sp)
  80c818:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c81c:	00802074 	movhi	r2,129
  80c820:	10be7204 	addi	r2,r2,-1592
  80c824:	10800017 	ldw	r2,0(r2)
  80c828:	1005003a 	cmpeq	r2,r2,zero
  80c82c:	1000061e 	bne	r2,zero,80c848 <alt_get_errno+0x3c>
  80c830:	00802074 	movhi	r2,129
  80c834:	10be7204 	addi	r2,r2,-1592
  80c838:	10800017 	ldw	r2,0(r2)
  80c83c:	103ee83a 	callr	r2
  80c840:	e0bfff15 	stw	r2,-4(fp)
  80c844:	00000306 	br	80c854 <alt_get_errno+0x48>
  80c848:	00802074 	movhi	r2,129
  80c84c:	10874f04 	addi	r2,r2,7484
  80c850:	e0bfff15 	stw	r2,-4(fp)
  80c854:	e0bfff17 	ldw	r2,-4(fp)
}
  80c858:	e037883a 	mov	sp,fp
  80c85c:	dfc00117 	ldw	ra,4(sp)
  80c860:	df000017 	ldw	fp,0(sp)
  80c864:	dec00204 	addi	sp,sp,8
  80c868:	f800283a 	ret

0080c86c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80c86c:	defffa04 	addi	sp,sp,-24
  80c870:	df000515 	stw	fp,20(sp)
  80c874:	df000504 	addi	fp,sp,20
  80c878:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c87c:	0005303a 	rdctl	r2,status
  80c880:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c884:	e0fffd17 	ldw	r3,-12(fp)
  80c888:	00bfff84 	movi	r2,-2
  80c88c:	1884703a 	and	r2,r3,r2
  80c890:	1001703a 	wrctl	status,r2
  
  return context;
  80c894:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80c898:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80c89c:	e0bfff17 	ldw	r2,-4(fp)
  80c8a0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80c8a4:	e0bffc17 	ldw	r2,-16(fp)
  80c8a8:	10c00017 	ldw	r3,0(r2)
  80c8ac:	e0bffc17 	ldw	r2,-16(fp)
  80c8b0:	10800117 	ldw	r2,4(r2)
  80c8b4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80c8b8:	e0bffc17 	ldw	r2,-16(fp)
  80c8bc:	10c00117 	ldw	r3,4(r2)
  80c8c0:	e0bffc17 	ldw	r2,-16(fp)
  80c8c4:	10800017 	ldw	r2,0(r2)
  80c8c8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80c8cc:	e0fffc17 	ldw	r3,-16(fp)
  80c8d0:	e0bffc17 	ldw	r2,-16(fp)
  80c8d4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80c8d8:	e0fffc17 	ldw	r3,-16(fp)
  80c8dc:	e0bffc17 	ldw	r2,-16(fp)
  80c8e0:	18800015 	stw	r2,0(r3)
  80c8e4:	e0bffe17 	ldw	r2,-8(fp)
  80c8e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c8ec:	e0bffb17 	ldw	r2,-20(fp)
  80c8f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80c8f4:	e037883a 	mov	sp,fp
  80c8f8:	df000017 	ldw	fp,0(sp)
  80c8fc:	dec00104 	addi	sp,sp,4
  80c900:	f800283a 	ret

0080c904 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80c904:	defffb04 	addi	sp,sp,-20
  80c908:	dfc00415 	stw	ra,16(sp)
  80c90c:	df000315 	stw	fp,12(sp)
  80c910:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80c914:	d0a00e17 	ldw	r2,-32712(gp)
  80c918:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80c91c:	d0a8f117 	ldw	r2,-23612(gp)
  80c920:	10800044 	addi	r2,r2,1
  80c924:	d0a8f115 	stw	r2,-23612(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c928:	00003106 	br	80c9f0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80c92c:	e0bffe17 	ldw	r2,-8(fp)
  80c930:	10800017 	ldw	r2,0(r2)
  80c934:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80c938:	e0bffe17 	ldw	r2,-8(fp)
  80c93c:	10800403 	ldbu	r2,16(r2)
  80c940:	10803fcc 	andi	r2,r2,255
  80c944:	1005003a 	cmpeq	r2,r2,zero
  80c948:	1000051e 	bne	r2,zero,80c960 <alt_tick+0x5c>
  80c94c:	d0a8f117 	ldw	r2,-23612(gp)
  80c950:	1004c03a 	cmpne	r2,r2,zero
  80c954:	1000021e 	bne	r2,zero,80c960 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80c958:	e0bffe17 	ldw	r2,-8(fp)
  80c95c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80c960:	e0bffe17 	ldw	r2,-8(fp)
  80c964:	10c00217 	ldw	r3,8(r2)
  80c968:	d0a8f117 	ldw	r2,-23612(gp)
  80c96c:	10c01e36 	bltu	r2,r3,80c9e8 <alt_tick+0xe4>
  80c970:	e0bffe17 	ldw	r2,-8(fp)
  80c974:	10800403 	ldbu	r2,16(r2)
  80c978:	10803fcc 	andi	r2,r2,255
  80c97c:	1004c03a 	cmpne	r2,r2,zero
  80c980:	1000191e 	bne	r2,zero,80c9e8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80c984:	e0bffe17 	ldw	r2,-8(fp)
  80c988:	10c00317 	ldw	r3,12(r2)
  80c98c:	e0bffe17 	ldw	r2,-8(fp)
  80c990:	11000517 	ldw	r4,20(r2)
  80c994:	183ee83a 	callr	r3
  80c998:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80c99c:	e0bffd17 	ldw	r2,-12(fp)
  80c9a0:	1004c03a 	cmpne	r2,r2,zero
  80c9a4:	1000031e 	bne	r2,zero,80c9b4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80c9a8:	e13ffe17 	ldw	r4,-8(fp)
  80c9ac:	080c86c0 	call	80c86c <alt_alarm_stop>
  80c9b0:	00000d06 	br	80c9e8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80c9b4:	e0bffe17 	ldw	r2,-8(fp)
  80c9b8:	10c00217 	ldw	r3,8(r2)
  80c9bc:	e0bffd17 	ldw	r2,-12(fp)
  80c9c0:	1887883a 	add	r3,r3,r2
  80c9c4:	e0bffe17 	ldw	r2,-8(fp)
  80c9c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80c9cc:	e0bffe17 	ldw	r2,-8(fp)
  80c9d0:	10c00217 	ldw	r3,8(r2)
  80c9d4:	d0a8f117 	ldw	r2,-23612(gp)
  80c9d8:	1880032e 	bgeu	r3,r2,80c9e8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80c9dc:	e0fffe17 	ldw	r3,-8(fp)
  80c9e0:	00800044 	movi	r2,1
  80c9e4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80c9e8:	e0bfff17 	ldw	r2,-4(fp)
  80c9ec:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c9f0:	d0e00e04 	addi	r3,gp,-32712
  80c9f4:	e0bffe17 	ldw	r2,-8(fp)
  80c9f8:	10ffcc1e 	bne	r2,r3,80c92c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80c9fc:	e037883a 	mov	sp,fp
  80ca00:	dfc00117 	ldw	ra,4(sp)
  80ca04:	df000017 	ldw	fp,0(sp)
  80ca08:	dec00204 	addi	sp,sp,8
  80ca0c:	f800283a 	ret

0080ca10 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80ca10:	deffff04 	addi	sp,sp,-4
  80ca14:	df000015 	stw	fp,0(sp)
  80ca18:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80ca1c:	000170fa 	wrctl	ienable,zero
}
  80ca20:	e037883a 	mov	sp,fp
  80ca24:	df000017 	ldw	fp,0(sp)
  80ca28:	dec00104 	addi	sp,sp,4
  80ca2c:	f800283a 	ret

0080ca30 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80ca30:	defff904 	addi	sp,sp,-28
  80ca34:	dfc00615 	stw	ra,24(sp)
  80ca38:	df000515 	stw	fp,20(sp)
  80ca3c:	df000504 	addi	fp,sp,20
  80ca40:	e13ffd15 	stw	r4,-12(fp)
  80ca44:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80ca48:	e0bffe17 	ldw	r2,-8(fp)
  80ca4c:	10800017 	ldw	r2,0(r2)
  80ca50:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80ca54:	e13ffd17 	ldw	r4,-12(fp)
  80ca58:	08022740 	call	802274 <strlen>
  80ca5c:	10800044 	addi	r2,r2,1
  80ca60:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80ca64:	00000d06 	br	80ca9c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80ca68:	e0bffc17 	ldw	r2,-16(fp)
  80ca6c:	11000217 	ldw	r4,8(r2)
  80ca70:	e1bffb17 	ldw	r6,-20(fp)
  80ca74:	e17ffd17 	ldw	r5,-12(fp)
  80ca78:	080cd780 	call	80cd78 <memcmp>
  80ca7c:	1004c03a 	cmpne	r2,r2,zero
  80ca80:	1000031e 	bne	r2,zero,80ca90 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80ca84:	e0bffc17 	ldw	r2,-16(fp)
  80ca88:	e0bfff15 	stw	r2,-4(fp)
  80ca8c:	00000706 	br	80caac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80ca90:	e0bffc17 	ldw	r2,-16(fp)
  80ca94:	10800017 	ldw	r2,0(r2)
  80ca98:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80ca9c:	e0fffe17 	ldw	r3,-8(fp)
  80caa0:	e0bffc17 	ldw	r2,-16(fp)
  80caa4:	10fff01e 	bne	r2,r3,80ca68 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80caa8:	e03fff15 	stw	zero,-4(fp)
  80caac:	e0bfff17 	ldw	r2,-4(fp)
}
  80cab0:	e037883a 	mov	sp,fp
  80cab4:	dfc00117 	ldw	ra,4(sp)
  80cab8:	df000017 	ldw	fp,0(sp)
  80cabc:	dec00204 	addi	sp,sp,8
  80cac0:	f800283a 	ret

0080cac4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80cac4:	defffa04 	addi	sp,sp,-24
  80cac8:	dfc00515 	stw	ra,20(sp)
  80cacc:	df000415 	stw	fp,16(sp)
  80cad0:	df000404 	addi	fp,sp,16
  80cad4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80cad8:	00802074 	movhi	r2,129
  80cadc:	10be6d04 	addi	r2,r2,-1612
  80cae0:	10800017 	ldw	r2,0(r2)
  80cae4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80cae8:	00003306 	br	80cbb8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80caec:	e0bffd17 	ldw	r2,-12(fp)
  80caf0:	11000217 	ldw	r4,8(r2)
  80caf4:	08022740 	call	802274 <strlen>
  80caf8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80cafc:	e0bffd17 	ldw	r2,-12(fp)
  80cb00:	10c00217 	ldw	r3,8(r2)
  80cb04:	e0bffc17 	ldw	r2,-16(fp)
  80cb08:	1885883a 	add	r2,r3,r2
  80cb0c:	10bfffc4 	addi	r2,r2,-1
  80cb10:	10800003 	ldbu	r2,0(r2)
  80cb14:	10803fcc 	andi	r2,r2,255
  80cb18:	1080201c 	xori	r2,r2,128
  80cb1c:	10bfe004 	addi	r2,r2,-128
  80cb20:	10800bd8 	cmpnei	r2,r2,47
  80cb24:	1000031e 	bne	r2,zero,80cb34 <alt_find_file+0x70>
    {
      len -= 1;
  80cb28:	e0bffc17 	ldw	r2,-16(fp)
  80cb2c:	10bfffc4 	addi	r2,r2,-1
  80cb30:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80cb34:	e0bffc17 	ldw	r2,-16(fp)
  80cb38:	1007883a 	mov	r3,r2
  80cb3c:	e0bffe17 	ldw	r2,-8(fp)
  80cb40:	1885883a 	add	r2,r3,r2
  80cb44:	10800003 	ldbu	r2,0(r2)
  80cb48:	10803fcc 	andi	r2,r2,255
  80cb4c:	1080201c 	xori	r2,r2,128
  80cb50:	10bfe004 	addi	r2,r2,-128
  80cb54:	10800be0 	cmpeqi	r2,r2,47
  80cb58:	10000a1e 	bne	r2,zero,80cb84 <alt_find_file+0xc0>
  80cb5c:	e0bffc17 	ldw	r2,-16(fp)
  80cb60:	1007883a 	mov	r3,r2
  80cb64:	e0bffe17 	ldw	r2,-8(fp)
  80cb68:	1885883a 	add	r2,r3,r2
  80cb6c:	10800003 	ldbu	r2,0(r2)
  80cb70:	10803fcc 	andi	r2,r2,255
  80cb74:	1080201c 	xori	r2,r2,128
  80cb78:	10bfe004 	addi	r2,r2,-128
  80cb7c:	1004c03a 	cmpne	r2,r2,zero
  80cb80:	10000a1e 	bne	r2,zero,80cbac <alt_find_file+0xe8>
  80cb84:	e0bffd17 	ldw	r2,-12(fp)
  80cb88:	11000217 	ldw	r4,8(r2)
  80cb8c:	e1bffc17 	ldw	r6,-16(fp)
  80cb90:	e17ffe17 	ldw	r5,-8(fp)
  80cb94:	080cd780 	call	80cd78 <memcmp>
  80cb98:	1004c03a 	cmpne	r2,r2,zero
  80cb9c:	1000031e 	bne	r2,zero,80cbac <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80cba0:	e0bffd17 	ldw	r2,-12(fp)
  80cba4:	e0bfff15 	stw	r2,-4(fp)
  80cba8:	00000806 	br	80cbcc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80cbac:	e0bffd17 	ldw	r2,-12(fp)
  80cbb0:	10800017 	ldw	r2,0(r2)
  80cbb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80cbb8:	00c02074 	movhi	r3,129
  80cbbc:	18fe6d04 	addi	r3,r3,-1612
  80cbc0:	e0bffd17 	ldw	r2,-12(fp)
  80cbc4:	10ffc91e 	bne	r2,r3,80caec <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80cbc8:	e03fff15 	stw	zero,-4(fp)
  80cbcc:	e0bfff17 	ldw	r2,-4(fp)
}
  80cbd0:	e037883a 	mov	sp,fp
  80cbd4:	dfc00117 	ldw	ra,4(sp)
  80cbd8:	df000017 	ldw	fp,0(sp)
  80cbdc:	dec00204 	addi	sp,sp,8
  80cbe0:	f800283a 	ret

0080cbe4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80cbe4:	defffc04 	addi	sp,sp,-16
  80cbe8:	df000315 	stw	fp,12(sp)
  80cbec:	df000304 	addi	fp,sp,12
  80cbf0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80cbf4:	00bffa04 	movi	r2,-24
  80cbf8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80cbfc:	e03ffe15 	stw	zero,-8(fp)
  80cc00:	00001e06 	br	80cc7c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  80cc04:	e0bffe17 	ldw	r2,-8(fp)
  80cc08:	00c02074 	movhi	r3,129
  80cc0c:	18f9ef04 	addi	r3,r3,-6212
  80cc10:	10800324 	muli	r2,r2,12
  80cc14:	10c5883a 	add	r2,r2,r3
  80cc18:	10800017 	ldw	r2,0(r2)
  80cc1c:	1004c03a 	cmpne	r2,r2,zero
  80cc20:	1000131e 	bne	r2,zero,80cc70 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  80cc24:	e0bffe17 	ldw	r2,-8(fp)
  80cc28:	00c02074 	movhi	r3,129
  80cc2c:	18f9ef04 	addi	r3,r3,-6212
  80cc30:	10800324 	muli	r2,r2,12
  80cc34:	10c7883a 	add	r3,r2,r3
  80cc38:	e0bfff17 	ldw	r2,-4(fp)
  80cc3c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80cc40:	00802074 	movhi	r2,129
  80cc44:	10be7104 	addi	r2,r2,-1596
  80cc48:	10c00017 	ldw	r3,0(r2)
  80cc4c:	e0bffe17 	ldw	r2,-8(fp)
  80cc50:	1880040e 	bge	r3,r2,80cc64 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  80cc54:	00c02074 	movhi	r3,129
  80cc58:	18fe7104 	addi	r3,r3,-1596
  80cc5c:	e0bffe17 	ldw	r2,-8(fp)
  80cc60:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80cc64:	e0bffe17 	ldw	r2,-8(fp)
  80cc68:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80cc6c:	00000606 	br	80cc88 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80cc70:	e0bffe17 	ldw	r2,-8(fp)
  80cc74:	10800044 	addi	r2,r2,1
  80cc78:	e0bffe15 	stw	r2,-8(fp)
  80cc7c:	e0bffe17 	ldw	r2,-8(fp)
  80cc80:	10800810 	cmplti	r2,r2,32
  80cc84:	103fdf1e 	bne	r2,zero,80cc04 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80cc88:	e0bffd17 	ldw	r2,-12(fp)
}
  80cc8c:	e037883a 	mov	sp,fp
  80cc90:	df000017 	ldw	fp,0(sp)
  80cc94:	dec00104 	addi	sp,sp,4
  80cc98:	f800283a 	ret

0080cc9c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80cc9c:	defffb04 	addi	sp,sp,-20
  80cca0:	df000415 	stw	fp,16(sp)
  80cca4:	df000404 	addi	fp,sp,16
  80cca8:	e13ffe15 	stw	r4,-8(fp)
  80ccac:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80ccb0:	e0bfff17 	ldw	r2,-4(fp)
  80ccb4:	10840070 	cmpltui	r2,r2,4097
  80ccb8:	1000021e 	bne	r2,zero,80ccc4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80ccbc:	00840004 	movi	r2,4096
  80ccc0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80ccc4:	e0fffe17 	ldw	r3,-8(fp)
  80ccc8:	e0bfff17 	ldw	r2,-4(fp)
  80cccc:	1885883a 	add	r2,r3,r2
  80ccd0:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80ccd4:	e0bffe17 	ldw	r2,-8(fp)
  80ccd8:	e0bffd15 	stw	r2,-12(fp)
  80ccdc:	00000506 	br	80ccf4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80cce0:	e0bffd17 	ldw	r2,-12(fp)
  80cce4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80cce8:	e0bffd17 	ldw	r2,-12(fp)
  80ccec:	10800804 	addi	r2,r2,32
  80ccf0:	e0bffd15 	stw	r2,-12(fp)
  80ccf4:	e0fffd17 	ldw	r3,-12(fp)
  80ccf8:	e0bffc17 	ldw	r2,-16(fp)
  80ccfc:	18bff836 	bltu	r3,r2,80cce0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80cd00:	e0bffe17 	ldw	r2,-8(fp)
  80cd04:	108007cc 	andi	r2,r2,31
  80cd08:	1005003a 	cmpeq	r2,r2,zero
  80cd0c:	1000021e 	bne	r2,zero,80cd18 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80cd10:	e0bffd17 	ldw	r2,-12(fp)
  80cd14:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80cd18:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80cd1c:	e037883a 	mov	sp,fp
  80cd20:	df000017 	ldw	fp,0(sp)
  80cd24:	dec00104 	addi	sp,sp,4
  80cd28:	f800283a 	ret

0080cd2c <atexit>:
  80cd2c:	200b883a 	mov	r5,r4
  80cd30:	000d883a 	mov	r6,zero
  80cd34:	0009883a 	mov	r4,zero
  80cd38:	000f883a 	mov	r7,zero
  80cd3c:	080cdec1 	jmpi	80cdec <__register_exitproc>

0080cd40 <exit>:
  80cd40:	defffe04 	addi	sp,sp,-8
  80cd44:	000b883a 	mov	r5,zero
  80cd48:	dc000015 	stw	r16,0(sp)
  80cd4c:	dfc00115 	stw	ra,4(sp)
  80cd50:	2021883a 	mov	r16,r4
  80cd54:	080cf240 	call	80cf24 <__call_exitprocs>
  80cd58:	00802074 	movhi	r2,129
  80cd5c:	10be6804 	addi	r2,r2,-1632
  80cd60:	11000017 	ldw	r4,0(r2)
  80cd64:	20800f17 	ldw	r2,60(r4)
  80cd68:	10000126 	beq	r2,zero,80cd70 <exit+0x30>
  80cd6c:	103ee83a 	callr	r2
  80cd70:	8009883a 	mov	r4,r16
  80cd74:	080d1140 	call	80d114 <_exit>

0080cd78 <memcmp>:
  80cd78:	00c000c4 	movi	r3,3
  80cd7c:	1980032e 	bgeu	r3,r6,80cd8c <memcmp+0x14>
  80cd80:	2144b03a 	or	r2,r4,r5
  80cd84:	10c4703a 	and	r2,r2,r3
  80cd88:	10000f26 	beq	r2,zero,80cdc8 <memcmp+0x50>
  80cd8c:	31ffffc4 	addi	r7,r6,-1
  80cd90:	3000061e 	bne	r6,zero,80cdac <memcmp+0x34>
  80cd94:	00000a06 	br	80cdc0 <memcmp+0x48>
  80cd98:	39ffffc4 	addi	r7,r7,-1
  80cd9c:	00bfffc4 	movi	r2,-1
  80cda0:	21000044 	addi	r4,r4,1
  80cda4:	29400044 	addi	r5,r5,1
  80cda8:	38800526 	beq	r7,r2,80cdc0 <memcmp+0x48>
  80cdac:	20c00003 	ldbu	r3,0(r4)
  80cdb0:	28800003 	ldbu	r2,0(r5)
  80cdb4:	18bff826 	beq	r3,r2,80cd98 <memcmp+0x20>
  80cdb8:	1885c83a 	sub	r2,r3,r2
  80cdbc:	f800283a 	ret
  80cdc0:	0005883a 	mov	r2,zero
  80cdc4:	f800283a 	ret
  80cdc8:	180f883a 	mov	r7,r3
  80cdcc:	20c00017 	ldw	r3,0(r4)
  80cdd0:	28800017 	ldw	r2,0(r5)
  80cdd4:	18bfed1e 	bne	r3,r2,80cd8c <memcmp+0x14>
  80cdd8:	31bfff04 	addi	r6,r6,-4
  80cddc:	21000104 	addi	r4,r4,4
  80cde0:	29400104 	addi	r5,r5,4
  80cde4:	39bff936 	bltu	r7,r6,80cdcc <memcmp+0x54>
  80cde8:	003fe806 	br	80cd8c <memcmp+0x14>

0080cdec <__register_exitproc>:
  80cdec:	defffa04 	addi	sp,sp,-24
  80cdf0:	00802074 	movhi	r2,129
  80cdf4:	10be6804 	addi	r2,r2,-1632
  80cdf8:	dc000015 	stw	r16,0(sp)
  80cdfc:	14000017 	ldw	r16,0(r2)
  80ce00:	dd000415 	stw	r20,16(sp)
  80ce04:	2829883a 	mov	r20,r5
  80ce08:	81405217 	ldw	r5,328(r16)
  80ce0c:	dcc00315 	stw	r19,12(sp)
  80ce10:	dc800215 	stw	r18,8(sp)
  80ce14:	dc400115 	stw	r17,4(sp)
  80ce18:	dfc00515 	stw	ra,20(sp)
  80ce1c:	2023883a 	mov	r17,r4
  80ce20:	3027883a 	mov	r19,r6
  80ce24:	3825883a 	mov	r18,r7
  80ce28:	28002526 	beq	r5,zero,80cec0 <__register_exitproc+0xd4>
  80ce2c:	29000117 	ldw	r4,4(r5)
  80ce30:	008007c4 	movi	r2,31
  80ce34:	11002716 	blt	r2,r4,80ced4 <__register_exitproc+0xe8>
  80ce38:	8800101e 	bne	r17,zero,80ce7c <__register_exitproc+0x90>
  80ce3c:	2105883a 	add	r2,r4,r4
  80ce40:	1085883a 	add	r2,r2,r2
  80ce44:	20c00044 	addi	r3,r4,1
  80ce48:	1145883a 	add	r2,r2,r5
  80ce4c:	0009883a 	mov	r4,zero
  80ce50:	15000215 	stw	r20,8(r2)
  80ce54:	28c00115 	stw	r3,4(r5)
  80ce58:	2005883a 	mov	r2,r4
  80ce5c:	dfc00517 	ldw	ra,20(sp)
  80ce60:	dd000417 	ldw	r20,16(sp)
  80ce64:	dcc00317 	ldw	r19,12(sp)
  80ce68:	dc800217 	ldw	r18,8(sp)
  80ce6c:	dc400117 	ldw	r17,4(sp)
  80ce70:	dc000017 	ldw	r16,0(sp)
  80ce74:	dec00604 	addi	sp,sp,24
  80ce78:	f800283a 	ret
  80ce7c:	29802204 	addi	r6,r5,136
  80ce80:	00800044 	movi	r2,1
  80ce84:	110e983a 	sll	r7,r2,r4
  80ce88:	30c04017 	ldw	r3,256(r6)
  80ce8c:	2105883a 	add	r2,r4,r4
  80ce90:	1085883a 	add	r2,r2,r2
  80ce94:	1185883a 	add	r2,r2,r6
  80ce98:	19c6b03a 	or	r3,r3,r7
  80ce9c:	14802015 	stw	r18,128(r2)
  80cea0:	14c00015 	stw	r19,0(r2)
  80cea4:	00800084 	movi	r2,2
  80cea8:	30c04015 	stw	r3,256(r6)
  80ceac:	88bfe31e 	bne	r17,r2,80ce3c <__register_exitproc+0x50>
  80ceb0:	30804117 	ldw	r2,260(r6)
  80ceb4:	11c4b03a 	or	r2,r2,r7
  80ceb8:	30804115 	stw	r2,260(r6)
  80cebc:	003fdf06 	br	80ce3c <__register_exitproc+0x50>
  80cec0:	00802074 	movhi	r2,129
  80cec4:	1087a304 	addi	r2,r2,7820
  80cec8:	100b883a 	mov	r5,r2
  80cecc:	80805215 	stw	r2,328(r16)
  80ced0:	003fd606 	br	80ce2c <__register_exitproc+0x40>
  80ced4:	00802034 	movhi	r2,128
  80ced8:	10850f04 	addi	r2,r2,5180
  80cedc:	1000021e 	bne	r2,zero,80cee8 <__register_exitproc+0xfc>
  80cee0:	013fffc4 	movi	r4,-1
  80cee4:	003fdc06 	br	80ce58 <__register_exitproc+0x6c>
  80cee8:	01006404 	movi	r4,400
  80ceec:	103ee83a 	callr	r2
  80cef0:	1007883a 	mov	r3,r2
  80cef4:	103ffa26 	beq	r2,zero,80cee0 <__register_exitproc+0xf4>
  80cef8:	80805217 	ldw	r2,328(r16)
  80cefc:	180b883a 	mov	r5,r3
  80cf00:	18000115 	stw	zero,4(r3)
  80cf04:	18800015 	stw	r2,0(r3)
  80cf08:	80c05215 	stw	r3,328(r16)
  80cf0c:	18006215 	stw	zero,392(r3)
  80cf10:	18006315 	stw	zero,396(r3)
  80cf14:	0009883a 	mov	r4,zero
  80cf18:	883fc826 	beq	r17,zero,80ce3c <__register_exitproc+0x50>
  80cf1c:	003fd706 	br	80ce7c <__register_exitproc+0x90>

0080cf20 <register_fini>:
  80cf20:	f800283a 	ret

0080cf24 <__call_exitprocs>:
  80cf24:	00802074 	movhi	r2,129
  80cf28:	10be6804 	addi	r2,r2,-1632
  80cf2c:	10800017 	ldw	r2,0(r2)
  80cf30:	defff304 	addi	sp,sp,-52
  80cf34:	df000b15 	stw	fp,44(sp)
  80cf38:	d8800115 	stw	r2,4(sp)
  80cf3c:	00802034 	movhi	r2,128
  80cf40:	10850a04 	addi	r2,r2,5160
  80cf44:	1005003a 	cmpeq	r2,r2,zero
  80cf48:	d8800215 	stw	r2,8(sp)
  80cf4c:	d8800117 	ldw	r2,4(sp)
  80cf50:	dd400815 	stw	r21,32(sp)
  80cf54:	dd000715 	stw	r20,28(sp)
  80cf58:	10805204 	addi	r2,r2,328
  80cf5c:	dfc00c15 	stw	ra,48(sp)
  80cf60:	ddc00a15 	stw	r23,40(sp)
  80cf64:	dd800915 	stw	r22,36(sp)
  80cf68:	dcc00615 	stw	r19,24(sp)
  80cf6c:	dc800515 	stw	r18,20(sp)
  80cf70:	dc400415 	stw	r17,16(sp)
  80cf74:	dc000315 	stw	r16,12(sp)
  80cf78:	282b883a 	mov	r21,r5
  80cf7c:	2039883a 	mov	fp,r4
  80cf80:	d8800015 	stw	r2,0(sp)
  80cf84:	2829003a 	cmpeq	r20,r5,zero
  80cf88:	d8800117 	ldw	r2,4(sp)
  80cf8c:	14405217 	ldw	r17,328(r2)
  80cf90:	88001026 	beq	r17,zero,80cfd4 <__call_exitprocs+0xb0>
  80cf94:	ddc00017 	ldw	r23,0(sp)
  80cf98:	88800117 	ldw	r2,4(r17)
  80cf9c:	8c802204 	addi	r18,r17,136
  80cfa0:	143fffc4 	addi	r16,r2,-1
  80cfa4:	80000916 	blt	r16,zero,80cfcc <__call_exitprocs+0xa8>
  80cfa8:	05bfffc4 	movi	r22,-1
  80cfac:	a000151e 	bne	r20,zero,80d004 <__call_exitprocs+0xe0>
  80cfb0:	8409883a 	add	r4,r16,r16
  80cfb4:	2105883a 	add	r2,r4,r4
  80cfb8:	1485883a 	add	r2,r2,r18
  80cfbc:	10c02017 	ldw	r3,128(r2)
  80cfc0:	a8c01126 	beq	r21,r3,80d008 <__call_exitprocs+0xe4>
  80cfc4:	843fffc4 	addi	r16,r16,-1
  80cfc8:	85bff81e 	bne	r16,r22,80cfac <__call_exitprocs+0x88>
  80cfcc:	d8800217 	ldw	r2,8(sp)
  80cfd0:	10003126 	beq	r2,zero,80d098 <__call_exitprocs+0x174>
  80cfd4:	dfc00c17 	ldw	ra,48(sp)
  80cfd8:	df000b17 	ldw	fp,44(sp)
  80cfdc:	ddc00a17 	ldw	r23,40(sp)
  80cfe0:	dd800917 	ldw	r22,36(sp)
  80cfe4:	dd400817 	ldw	r21,32(sp)
  80cfe8:	dd000717 	ldw	r20,28(sp)
  80cfec:	dcc00617 	ldw	r19,24(sp)
  80cff0:	dc800517 	ldw	r18,20(sp)
  80cff4:	dc400417 	ldw	r17,16(sp)
  80cff8:	dc000317 	ldw	r16,12(sp)
  80cffc:	dec00d04 	addi	sp,sp,52
  80d000:	f800283a 	ret
  80d004:	8409883a 	add	r4,r16,r16
  80d008:	88c00117 	ldw	r3,4(r17)
  80d00c:	2105883a 	add	r2,r4,r4
  80d010:	1445883a 	add	r2,r2,r17
  80d014:	18ffffc4 	addi	r3,r3,-1
  80d018:	11800217 	ldw	r6,8(r2)
  80d01c:	1c001526 	beq	r3,r16,80d074 <__call_exitprocs+0x150>
  80d020:	10000215 	stw	zero,8(r2)
  80d024:	303fe726 	beq	r6,zero,80cfc4 <__call_exitprocs+0xa0>
  80d028:	00c00044 	movi	r3,1
  80d02c:	1c06983a 	sll	r3,r3,r16
  80d030:	90804017 	ldw	r2,256(r18)
  80d034:	8cc00117 	ldw	r19,4(r17)
  80d038:	1884703a 	and	r2,r3,r2
  80d03c:	10001426 	beq	r2,zero,80d090 <__call_exitprocs+0x16c>
  80d040:	90804117 	ldw	r2,260(r18)
  80d044:	1884703a 	and	r2,r3,r2
  80d048:	10000c1e 	bne	r2,zero,80d07c <__call_exitprocs+0x158>
  80d04c:	2105883a 	add	r2,r4,r4
  80d050:	1485883a 	add	r2,r2,r18
  80d054:	11400017 	ldw	r5,0(r2)
  80d058:	e009883a 	mov	r4,fp
  80d05c:	303ee83a 	callr	r6
  80d060:	88800117 	ldw	r2,4(r17)
  80d064:	98bfc81e 	bne	r19,r2,80cf88 <__call_exitprocs+0x64>
  80d068:	b8800017 	ldw	r2,0(r23)
  80d06c:	147fd526 	beq	r2,r17,80cfc4 <__call_exitprocs+0xa0>
  80d070:	003fc506 	br	80cf88 <__call_exitprocs+0x64>
  80d074:	8c000115 	stw	r16,4(r17)
  80d078:	003fea06 	br	80d024 <__call_exitprocs+0x100>
  80d07c:	2105883a 	add	r2,r4,r4
  80d080:	1485883a 	add	r2,r2,r18
  80d084:	11000017 	ldw	r4,0(r2)
  80d088:	303ee83a 	callr	r6
  80d08c:	003ff406 	br	80d060 <__call_exitprocs+0x13c>
  80d090:	303ee83a 	callr	r6
  80d094:	003ff206 	br	80d060 <__call_exitprocs+0x13c>
  80d098:	88800117 	ldw	r2,4(r17)
  80d09c:	1000081e 	bne	r2,zero,80d0c0 <__call_exitprocs+0x19c>
  80d0a0:	89000017 	ldw	r4,0(r17)
  80d0a4:	20000726 	beq	r4,zero,80d0c4 <__call_exitprocs+0x1a0>
  80d0a8:	b9000015 	stw	r4,0(r23)
  80d0ac:	8809883a 	mov	r4,r17
  80d0b0:	08014280 	call	801428 <free>
  80d0b4:	bc400017 	ldw	r17,0(r23)
  80d0b8:	883fb71e 	bne	r17,zero,80cf98 <__call_exitprocs+0x74>
  80d0bc:	003fc506 	br	80cfd4 <__call_exitprocs+0xb0>
  80d0c0:	89000017 	ldw	r4,0(r17)
  80d0c4:	882f883a 	mov	r23,r17
  80d0c8:	2023883a 	mov	r17,r4
  80d0cc:	883fb21e 	bne	r17,zero,80cf98 <__call_exitprocs+0x74>
  80d0d0:	003fc006 	br	80cfd4 <__call_exitprocs+0xb0>

0080d0d4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80d0d4:	defffd04 	addi	sp,sp,-12
  80d0d8:	df000215 	stw	fp,8(sp)
  80d0dc:	df000204 	addi	fp,sp,8
  80d0e0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80d0e4:	e0bfff17 	ldw	r2,-4(fp)
  80d0e8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80d0ec:	e0bffe17 	ldw	r2,-8(fp)
  80d0f0:	1005003a 	cmpeq	r2,r2,zero
  80d0f4:	1000021e 	bne	r2,zero,80d100 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80d0f8:	002af070 	cmpltui	zero,zero,43969
  80d0fc:	00000106 	br	80d104 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80d100:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80d104:	e037883a 	mov	sp,fp
  80d108:	df000017 	ldw	fp,0(sp)
  80d10c:	dec00104 	addi	sp,sp,4
  80d110:	f800283a 	ret

0080d114 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80d114:	defffd04 	addi	sp,sp,-12
  80d118:	dfc00215 	stw	ra,8(sp)
  80d11c:	df000115 	stw	fp,4(sp)
  80d120:	df000104 	addi	fp,sp,4
  80d124:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80d128:	e13fff17 	ldw	r4,-4(fp)
  80d12c:	080d0d40 	call	80d0d4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80d130:	003fff06 	br	80d130 <_exit+0x1c>
  80d134:	00000010 	cmplti	zero,zero,0
  80d138:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  80d13c:	00527a01 	jmpi	527a0 <__alt_mem_sdram_0-0x7ad860>
  80d140:	011f7c01 	jmpi	11f7c0 <__alt_mem_sdram_0-0x6e0840>
  80d144:	001b0c0b 	ldhu	zero,27696(zero)
  80d148:	00000028 	cmpgeui	zero,zero,0
  80d14c:	00000018 	cmpnei	zero,zero,0
  80d150:	00808504 	movi	r2,532
  80d154:	000005dc 	xori	zero,zero,23
  80d158:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  80d15c:	92099170 	cmpltui	r8,r18,9797
  80d160:	95079308 	cmpgei	r20,r18,7756
  80d164:	97049605 	stb	fp,4696(r18)
  80d168:	90019f03 	ldbu	zero,1660(r18)
  80d16c:	9c06940a 	0x9c06940a
  80d170:	00000002 	0x2
  80d174:	00000028 	cmpgeui	zero,zero,0
  80d178:	00000044 	movi	zero,1
  80d17c:	00808ae0 	cmpeqi	r2,zero,555
  80d180:	000005b0 	cmpltui	zero,zero,22
  80d184:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  80d188:	92099168 	cmpgeui	r8,r18,9797
  80d18c:	95079308 	cmpgei	r20,r18,7756
  80d190:	9c039705 	stb	r16,3676(r19)
  80d194:	90019f02 	0x90019f02
  80d198:	9606940a 	0x9606940a
  80d19c:	00000004 	movi	zero,0
  80d1a0:	0080cf20 	cmpeqi	r2,zero,828
