--a_graycounter DEVICE_FAMILY="Cyclone III" PVALUE=1 WIDTH=6 aclr clock cnt_en q
--VERSION_BEGIN 11.1 cbx_a_gray2bin 2011:10:31:21:13:15:SJ cbx_a_graycounter 2011:10:31:21:13:15:SJ cbx_cycloneii 2011:10:31:21:13:15:SJ cbx_mgl 2011:10:31:21:14:05:SJ cbx_stratix 2011:10:31:21:13:15:SJ cbx_stratixii 2011:10:31:21:13:15:SJ  VERSION_END


-- Copyright (C) 1991-2011 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = reg 9 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to counter7a0} POWER_UP_LEVEL=HIGH;{-to parity8} POWER_UP_LEVEL=HIGH";

SUBDESIGN a_graycounter_h47
( 
	aclr	:	input;
	clock	:	input;
	cnt_en	:	input;
	q[5..0]	:	output;
) 
VARIABLE 
	counter7a0 : dffeas
		WITH (
			power_up = "high"
		);
	counter7a1 : dffeas;
	counter7a2 : dffeas;
	counter7a3 : dffeas;
	counter7a4 : dffeas;
	counter7a5 : dffeas;
	parity8 : dffeas
		WITH (
			power_up = "high"
		);
	sub_parity9a[1..0] : dffeas;
	cntr_cout[5..0]	: WIRE;
	parity_cout	: WIRE;
	sclr	: NODE;
	updown	: NODE;

BEGIN 
	counter7a[5..0].clk = clock;
	counter7a[5..1].clrn = (! aclr);
	counter7a[5..0].d = ( (counter7a[5].q $ cntr_cout[4..4]), (counter7a[4].q $ (counter7a[3].q & cntr_cout[3..3])), (counter7a[3].q $ (counter7a[2].q & cntr_cout[2..2])), (counter7a[2].q $ (counter7a[1].q & cntr_cout[1..1])), (counter7a[1].q $ (counter7a[0].q & cntr_cout[0..0])), ((cnt_en & (counter7a[0].q $ (! parity_cout))) # ((! cnt_en) & counter7a[0].q)));
	counter7a[0].prn = (! aclr);
	counter7a[5..0].sclr = sclr;
	parity8.clk = clock;
	parity8.d = ((cnt_en & (sub_parity9a[0..0].q $ sub_parity9a[1..1].q)) # ((! cnt_en) & parity8.q));
	parity8.prn = (! aclr);
	parity8.sclr = sclr;
	sub_parity9a[].clk = ( clock, clock);
	sub_parity9a[].clrn = ( (! aclr), (! aclr));
	sub_parity9a[].d = ( ((cnt_en & (counter7a[4..4].q $ counter7a[5..5].q)) # ((! cnt_en) & sub_parity9a[1].q)), ((cnt_en & (((counter7a[0..0].q $ counter7a[1..1].q) $ counter7a[2..2].q) $ counter7a[3..3].q)) # ((! cnt_en) & sub_parity9a[0].q)));
	sub_parity9a[].sclr = ( sclr, sclr);
	cntr_cout[] = ( B"0", (cntr_cout[3..3] & (! counter7a[3].q)), (cntr_cout[2..2] & (! counter7a[2].q)), (cntr_cout[1..1] & (! counter7a[1].q)), (cntr_cout[0..0] & (! counter7a[0].q)), (cnt_en & parity_cout));
	parity_cout = (((! parity8.q) $ updown) & cnt_en);
	q[] = counter7a[5..0].q;
	sclr = GND;
	updown = VCC;
END;
--VALID FILE
